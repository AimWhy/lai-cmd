/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(function webpackUniversalModuleDefinition(root, factory) {
	if(typeof exports === 'object' && typeof module === 'object')
		module.exports = factory();
	else if(typeof define === 'function' && define.amd)
		define([], factory);
	else {
		var a = factory();
		for(var i in a) (typeof exports === 'object' ? exports : root)[i] = a[i];
	}
})(global, function() {
return /******/ (() => { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ "./node_modules/js-yaml/index.js":
/*!***************************************!*\
  !*** ./node_modules/js-yaml/index.js ***!
  \***************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("\n\nvar loader = __webpack_require__(/*! ./lib/loader */ \"./node_modules/js-yaml/lib/loader.js\");\n\nvar dumper = __webpack_require__(/*! ./lib/dumper */ \"./node_modules/js-yaml/lib/dumper.js\");\n\nfunction renamed(from, to) {\n  return function () {\n    throw new Error('Function yaml.' + from + ' is removed in js-yaml 4. ' + 'Use yaml.' + to + ' instead, which is now safe by default.');\n  };\n}\n\nmodule.exports.Type = __webpack_require__(/*! ./lib/type */ \"./node_modules/js-yaml/lib/type.js\");\nmodule.exports.Schema = __webpack_require__(/*! ./lib/schema */ \"./node_modules/js-yaml/lib/schema.js\");\nmodule.exports.FAILSAFE_SCHEMA = __webpack_require__(/*! ./lib/schema/failsafe */ \"./node_modules/js-yaml/lib/schema/failsafe.js\");\nmodule.exports.JSON_SCHEMA = __webpack_require__(/*! ./lib/schema/json */ \"./node_modules/js-yaml/lib/schema/json.js\");\nmodule.exports.CORE_SCHEMA = __webpack_require__(/*! ./lib/schema/core */ \"./node_modules/js-yaml/lib/schema/core.js\");\nmodule.exports.DEFAULT_SCHEMA = __webpack_require__(/*! ./lib/schema/default */ \"./node_modules/js-yaml/lib/schema/default.js\");\nmodule.exports.load = loader.load;\nmodule.exports.loadAll = loader.loadAll;\nmodule.exports.dump = dumper.dump;\nmodule.exports.YAMLException = __webpack_require__(/*! ./lib/exception */ \"./node_modules/js-yaml/lib/exception.js\"); // Re-export all types in case user wants to create custom schema\n\nmodule.exports.types = {\n  binary: __webpack_require__(/*! ./lib/type/binary */ \"./node_modules/js-yaml/lib/type/binary.js\"),\n  \"float\": __webpack_require__(/*! ./lib/type/float */ \"./node_modules/js-yaml/lib/type/float.js\"),\n  map: __webpack_require__(/*! ./lib/type/map */ \"./node_modules/js-yaml/lib/type/map.js\"),\n  \"null\": __webpack_require__(/*! ./lib/type/null */ \"./node_modules/js-yaml/lib/type/null.js\"),\n  pairs: __webpack_require__(/*! ./lib/type/pairs */ \"./node_modules/js-yaml/lib/type/pairs.js\"),\n  set: __webpack_require__(/*! ./lib/type/set */ \"./node_modules/js-yaml/lib/type/set.js\"),\n  timestamp: __webpack_require__(/*! ./lib/type/timestamp */ \"./node_modules/js-yaml/lib/type/timestamp.js\"),\n  bool: __webpack_require__(/*! ./lib/type/bool */ \"./node_modules/js-yaml/lib/type/bool.js\"),\n  \"int\": __webpack_require__(/*! ./lib/type/int */ \"./node_modules/js-yaml/lib/type/int.js\"),\n  merge: __webpack_require__(/*! ./lib/type/merge */ \"./node_modules/js-yaml/lib/type/merge.js\"),\n  omap: __webpack_require__(/*! ./lib/type/omap */ \"./node_modules/js-yaml/lib/type/omap.js\"),\n  seq: __webpack_require__(/*! ./lib/type/seq */ \"./node_modules/js-yaml/lib/type/seq.js\"),\n  str: __webpack_require__(/*! ./lib/type/str */ \"./node_modules/js-yaml/lib/type/str.js\")\n}; // Removed functions from JS-YAML 3.0.x\n\nmodule.exports.safeLoad = renamed('safeLoad', 'load');\nmodule.exports.safeLoadAll = renamed('safeLoadAll', 'loadAll');\nmodule.exports.safeDump = renamed('safeDump', 'dump');\n\n//# sourceURL=webpack://lai-cmd/./node_modules/js-yaml/index.js?");

/***/ }),

/***/ "./node_modules/js-yaml/lib/common.js":
/*!********************************************!*\
  !*** ./node_modules/js-yaml/lib/common.js ***!
  \********************************************/
/***/ ((module) => {

"use strict";
eval("\n\nfunction _typeof(obj) { \"@babel/helpers - typeof\"; return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && \"function\" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }, _typeof(obj); }\n\nfunction isNothing(subject) {\n  return typeof subject === 'undefined' || subject === null;\n}\n\nfunction isObject(subject) {\n  return _typeof(subject) === 'object' && subject !== null;\n}\n\nfunction toArray(sequence) {\n  if (Array.isArray(sequence)) return sequence;else if (isNothing(sequence)) return [];\n  return [sequence];\n}\n\nfunction extend(target, source) {\n  var index, length, key, sourceKeys;\n\n  if (source) {\n    sourceKeys = Object.keys(source);\n\n    for (index = 0, length = sourceKeys.length; index < length; index += 1) {\n      key = sourceKeys[index];\n      target[key] = source[key];\n    }\n  }\n\n  return target;\n}\n\nfunction repeat(string, count) {\n  var result = '',\n      cycle;\n\n  for (cycle = 0; cycle < count; cycle += 1) {\n    result += string;\n  }\n\n  return result;\n}\n\nfunction isNegativeZero(number) {\n  return number === 0 && Number.NEGATIVE_INFINITY === 1 / number;\n}\n\nmodule.exports.isNothing = isNothing;\nmodule.exports.isObject = isObject;\nmodule.exports.toArray = toArray;\nmodule.exports.repeat = repeat;\nmodule.exports.isNegativeZero = isNegativeZero;\nmodule.exports.extend = extend;\n\n//# sourceURL=webpack://lai-cmd/./node_modules/js-yaml/lib/common.js?");

/***/ }),

/***/ "./node_modules/js-yaml/lib/dumper.js":
/*!********************************************!*\
  !*** ./node_modules/js-yaml/lib/dumper.js ***!
  \********************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("\n/*eslint-disable no-use-before-define*/\n\nfunction _typeof(obj) { \"@babel/helpers - typeof\"; return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && \"function\" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }, _typeof(obj); }\n\nvar common = __webpack_require__(/*! ./common */ \"./node_modules/js-yaml/lib/common.js\");\n\nvar YAMLException = __webpack_require__(/*! ./exception */ \"./node_modules/js-yaml/lib/exception.js\");\n\nvar DEFAULT_SCHEMA = __webpack_require__(/*! ./schema/default */ \"./node_modules/js-yaml/lib/schema/default.js\");\n\nvar _toString = Object.prototype.toString;\nvar _hasOwnProperty = Object.prototype.hasOwnProperty;\nvar CHAR_BOM = 0xFEFF;\nvar CHAR_TAB = 0x09;\n/* Tab */\n\nvar CHAR_LINE_FEED = 0x0A;\n/* LF */\n\nvar CHAR_CARRIAGE_RETURN = 0x0D;\n/* CR */\n\nvar CHAR_SPACE = 0x20;\n/* Space */\n\nvar CHAR_EXCLAMATION = 0x21;\n/* ! */\n\nvar CHAR_DOUBLE_QUOTE = 0x22;\n/* \" */\n\nvar CHAR_SHARP = 0x23;\n/* # */\n\nvar CHAR_PERCENT = 0x25;\n/* % */\n\nvar CHAR_AMPERSAND = 0x26;\n/* & */\n\nvar CHAR_SINGLE_QUOTE = 0x27;\n/* ' */\n\nvar CHAR_ASTERISK = 0x2A;\n/* * */\n\nvar CHAR_COMMA = 0x2C;\n/* , */\n\nvar CHAR_MINUS = 0x2D;\n/* - */\n\nvar CHAR_COLON = 0x3A;\n/* : */\n\nvar CHAR_EQUALS = 0x3D;\n/* = */\n\nvar CHAR_GREATER_THAN = 0x3E;\n/* > */\n\nvar CHAR_QUESTION = 0x3F;\n/* ? */\n\nvar CHAR_COMMERCIAL_AT = 0x40;\n/* @ */\n\nvar CHAR_LEFT_SQUARE_BRACKET = 0x5B;\n/* [ */\n\nvar CHAR_RIGHT_SQUARE_BRACKET = 0x5D;\n/* ] */\n\nvar CHAR_GRAVE_ACCENT = 0x60;\n/* ` */\n\nvar CHAR_LEFT_CURLY_BRACKET = 0x7B;\n/* { */\n\nvar CHAR_VERTICAL_LINE = 0x7C;\n/* | */\n\nvar CHAR_RIGHT_CURLY_BRACKET = 0x7D;\n/* } */\n\nvar ESCAPE_SEQUENCES = {};\nESCAPE_SEQUENCES[0x00] = '\\\\0';\nESCAPE_SEQUENCES[0x07] = '\\\\a';\nESCAPE_SEQUENCES[0x08] = '\\\\b';\nESCAPE_SEQUENCES[0x09] = '\\\\t';\nESCAPE_SEQUENCES[0x0A] = '\\\\n';\nESCAPE_SEQUENCES[0x0B] = '\\\\v';\nESCAPE_SEQUENCES[0x0C] = '\\\\f';\nESCAPE_SEQUENCES[0x0D] = '\\\\r';\nESCAPE_SEQUENCES[0x1B] = '\\\\e';\nESCAPE_SEQUENCES[0x22] = '\\\\\"';\nESCAPE_SEQUENCES[0x5C] = '\\\\\\\\';\nESCAPE_SEQUENCES[0x85] = '\\\\N';\nESCAPE_SEQUENCES[0xA0] = '\\\\_';\nESCAPE_SEQUENCES[0x2028] = '\\\\L';\nESCAPE_SEQUENCES[0x2029] = '\\\\P';\nvar DEPRECATED_BOOLEANS_SYNTAX = ['y', 'Y', 'yes', 'Yes', 'YES', 'on', 'On', 'ON', 'n', 'N', 'no', 'No', 'NO', 'off', 'Off', 'OFF'];\nvar DEPRECATED_BASE60_SYNTAX = /^[-+]?[0-9_]+(?::[0-9_]+)+(?:\\.[0-9_]*)?$/;\n\nfunction compileStyleMap(schema, map) {\n  var result, keys, index, length, tag, style, type;\n  if (map === null) return {};\n  result = {};\n  keys = Object.keys(map);\n\n  for (index = 0, length = keys.length; index < length; index += 1) {\n    tag = keys[index];\n    style = String(map[tag]);\n\n    if (tag.slice(0, 2) === '!!') {\n      tag = 'tag:yaml.org,2002:' + tag.slice(2);\n    }\n\n    type = schema.compiledTypeMap['fallback'][tag];\n\n    if (type && _hasOwnProperty.call(type.styleAliases, style)) {\n      style = type.styleAliases[style];\n    }\n\n    result[tag] = style;\n  }\n\n  return result;\n}\n\nfunction encodeHex(character) {\n  var string, handle, length;\n  string = character.toString(16).toUpperCase();\n\n  if (character <= 0xFF) {\n    handle = 'x';\n    length = 2;\n  } else if (character <= 0xFFFF) {\n    handle = 'u';\n    length = 4;\n  } else if (character <= 0xFFFFFFFF) {\n    handle = 'U';\n    length = 8;\n  } else {\n    throw new YAMLException('code point within a string may not be greater than 0xFFFFFFFF');\n  }\n\n  return '\\\\' + handle + common.repeat('0', length - string.length) + string;\n}\n\nvar QUOTING_TYPE_SINGLE = 1,\n    QUOTING_TYPE_DOUBLE = 2;\n\nfunction State(options) {\n  this.schema = options['schema'] || DEFAULT_SCHEMA;\n  this.indent = Math.max(1, options['indent'] || 2);\n  this.noArrayIndent = options['noArrayIndent'] || false;\n  this.skipInvalid = options['skipInvalid'] || false;\n  this.flowLevel = common.isNothing(options['flowLevel']) ? -1 : options['flowLevel'];\n  this.styleMap = compileStyleMap(this.schema, options['styles'] || null);\n  this.sortKeys = options['sortKeys'] || false;\n  this.lineWidth = options['lineWidth'] || 80;\n  this.noRefs = options['noRefs'] || false;\n  this.noCompatMode = options['noCompatMode'] || false;\n  this.condenseFlow = options['condenseFlow'] || false;\n  this.quotingType = options['quotingType'] === '\"' ? QUOTING_TYPE_DOUBLE : QUOTING_TYPE_SINGLE;\n  this.forceQuotes = options['forceQuotes'] || false;\n  this.replacer = typeof options['replacer'] === 'function' ? options['replacer'] : null;\n  this.implicitTypes = this.schema.compiledImplicit;\n  this.explicitTypes = this.schema.compiledExplicit;\n  this.tag = null;\n  this.result = '';\n  this.duplicates = [];\n  this.usedDuplicates = null;\n} // Indents every line in a string. Empty lines (\\n only) are not indented.\n\n\nfunction indentString(string, spaces) {\n  var ind = common.repeat(' ', spaces),\n      position = 0,\n      next = -1,\n      result = '',\n      line,\n      length = string.length;\n\n  while (position < length) {\n    next = string.indexOf('\\n', position);\n\n    if (next === -1) {\n      line = string.slice(position);\n      position = length;\n    } else {\n      line = string.slice(position, next + 1);\n      position = next + 1;\n    }\n\n    if (line.length && line !== '\\n') result += ind;\n    result += line;\n  }\n\n  return result;\n}\n\nfunction generateNextLine(state, level) {\n  return '\\n' + common.repeat(' ', state.indent * level);\n}\n\nfunction testImplicitResolving(state, str) {\n  var index, length, type;\n\n  for (index = 0, length = state.implicitTypes.length; index < length; index += 1) {\n    type = state.implicitTypes[index];\n\n    if (type.resolve(str)) {\n      return true;\n    }\n  }\n\n  return false;\n} // [33] s-white ::= s-space | s-tab\n\n\nfunction isWhitespace(c) {\n  return c === CHAR_SPACE || c === CHAR_TAB;\n} // Returns true if the character can be printed without escaping.\n// From YAML 1.2: \"any allowed characters known to be non-printable\n// should also be escaped. [However,] This isn’t mandatory\"\n// Derived from nb-char - \\t - #x85 - #xA0 - #x2028 - #x2029.\n\n\nfunction isPrintable(c) {\n  return 0x00020 <= c && c <= 0x00007E || 0x000A1 <= c && c <= 0x00D7FF && c !== 0x2028 && c !== 0x2029 || 0x0E000 <= c && c <= 0x00FFFD && c !== CHAR_BOM || 0x10000 <= c && c <= 0x10FFFF;\n} // [34] ns-char ::= nb-char - s-white\n// [27] nb-char ::= c-printable - b-char - c-byte-order-mark\n// [26] b-char  ::= b-line-feed | b-carriage-return\n// Including s-white (for some reason, examples doesn't match specs in this aspect)\n// ns-char ::= c-printable - b-line-feed - b-carriage-return - c-byte-order-mark\n\n\nfunction isNsCharOrWhitespace(c) {\n  return isPrintable(c) && c !== CHAR_BOM // - b-char\n  && c !== CHAR_CARRIAGE_RETURN && c !== CHAR_LINE_FEED;\n} // [127]  ns-plain-safe(c) ::= c = flow-out  ⇒ ns-plain-safe-out\n//                             c = flow-in   ⇒ ns-plain-safe-in\n//                             c = block-key ⇒ ns-plain-safe-out\n//                             c = flow-key  ⇒ ns-plain-safe-in\n// [128] ns-plain-safe-out ::= ns-char\n// [129]  ns-plain-safe-in ::= ns-char - c-flow-indicator\n// [130]  ns-plain-char(c) ::=  ( ns-plain-safe(c) - “:” - “#” )\n//                            | ( /* An ns-char preceding */ “#” )\n//                            | ( “:” /* Followed by an ns-plain-safe(c) */ )\n\n\nfunction isPlainSafe(c, prev, inblock) {\n  var cIsNsCharOrWhitespace = isNsCharOrWhitespace(c);\n  var cIsNsChar = cIsNsCharOrWhitespace && !isWhitespace(c);\n  return ( // ns-plain-safe\n  inblock ? // c = flow-in\n  cIsNsCharOrWhitespace : cIsNsCharOrWhitespace // - c-flow-indicator\n  && c !== CHAR_COMMA && c !== CHAR_LEFT_SQUARE_BRACKET && c !== CHAR_RIGHT_SQUARE_BRACKET && c !== CHAR_LEFT_CURLY_BRACKET && c !== CHAR_RIGHT_CURLY_BRACKET // ns-plain-char\n  ) && c !== CHAR_SHARP // false on '#'\n  && !(prev === CHAR_COLON && !cIsNsChar) // false on ': '\n  || isNsCharOrWhitespace(prev) && !isWhitespace(prev) && c === CHAR_SHARP // change to true on '[^ ]#'\n  || prev === CHAR_COLON && cIsNsChar; // change to true on ':[^ ]'\n} // Simplified test for values allowed as the first character in plain style.\n\n\nfunction isPlainSafeFirst(c) {\n  // Uses a subset of ns-char - c-indicator\n  // where ns-char = nb-char - s-white.\n  // No support of ( ( “?” | “:” | “-” ) /* Followed by an ns-plain-safe(c)) */ ) part\n  return isPrintable(c) && c !== CHAR_BOM && !isWhitespace(c) // - s-white\n  // - (c-indicator ::=\n  // “-” | “?” | “:” | “,” | “[” | “]” | “{” | “}”\n  && c !== CHAR_MINUS && c !== CHAR_QUESTION && c !== CHAR_COLON && c !== CHAR_COMMA && c !== CHAR_LEFT_SQUARE_BRACKET && c !== CHAR_RIGHT_SQUARE_BRACKET && c !== CHAR_LEFT_CURLY_BRACKET && c !== CHAR_RIGHT_CURLY_BRACKET // | “#” | “&” | “*” | “!” | “|” | “=” | “>” | “'” | “\"”\n  && c !== CHAR_SHARP && c !== CHAR_AMPERSAND && c !== CHAR_ASTERISK && c !== CHAR_EXCLAMATION && c !== CHAR_VERTICAL_LINE && c !== CHAR_EQUALS && c !== CHAR_GREATER_THAN && c !== CHAR_SINGLE_QUOTE && c !== CHAR_DOUBLE_QUOTE // | “%” | “@” | “`”)\n  && c !== CHAR_PERCENT && c !== CHAR_COMMERCIAL_AT && c !== CHAR_GRAVE_ACCENT;\n} // Simplified test for values allowed as the last character in plain style.\n\n\nfunction isPlainSafeLast(c) {\n  // just not whitespace or colon, it will be checked to be plain character later\n  return !isWhitespace(c) && c !== CHAR_COLON;\n} // Same as 'string'.codePointAt(pos), but works in older browsers.\n\n\nfunction codePointAt(string, pos) {\n  var first = string.charCodeAt(pos),\n      second;\n\n  if (first >= 0xD800 && first <= 0xDBFF && pos + 1 < string.length) {\n    second = string.charCodeAt(pos + 1);\n\n    if (second >= 0xDC00 && second <= 0xDFFF) {\n      // https://mathiasbynens.be/notes/javascript-encoding#surrogate-formulae\n      return (first - 0xD800) * 0x400 + second - 0xDC00 + 0x10000;\n    }\n  }\n\n  return first;\n} // Determines whether block indentation indicator is required.\n\n\nfunction needIndentIndicator(string) {\n  var leadingSpaceRe = /^\\n* /;\n  return leadingSpaceRe.test(string);\n}\n\nvar STYLE_PLAIN = 1,\n    STYLE_SINGLE = 2,\n    STYLE_LITERAL = 3,\n    STYLE_FOLDED = 4,\n    STYLE_DOUBLE = 5; // Determines which scalar styles are possible and returns the preferred style.\n// lineWidth = -1 => no limit.\n// Pre-conditions: str.length > 0.\n// Post-conditions:\n//    STYLE_PLAIN or STYLE_SINGLE => no \\n are in the string.\n//    STYLE_LITERAL => no lines are suitable for folding (or lineWidth is -1).\n//    STYLE_FOLDED => a line > lineWidth and can be folded (and lineWidth != -1).\n\nfunction chooseScalarStyle(string, singleLineOnly, indentPerLevel, lineWidth, testAmbiguousType, quotingType, forceQuotes, inblock) {\n  var i;\n  var _char = 0;\n  var prevChar = null;\n  var hasLineBreak = false;\n  var hasFoldableLine = false; // only checked if shouldTrackWidth\n\n  var shouldTrackWidth = lineWidth !== -1;\n  var previousLineBreak = -1; // count the first line correctly\n\n  var plain = isPlainSafeFirst(codePointAt(string, 0)) && isPlainSafeLast(codePointAt(string, string.length - 1));\n\n  if (singleLineOnly || forceQuotes) {\n    // Case: no block styles.\n    // Check for disallowed characters to rule out plain and single.\n    for (i = 0; i < string.length; _char >= 0x10000 ? i += 2 : i++) {\n      _char = codePointAt(string, i);\n\n      if (!isPrintable(_char)) {\n        return STYLE_DOUBLE;\n      }\n\n      plain = plain && isPlainSafe(_char, prevChar, inblock);\n      prevChar = _char;\n    }\n  } else {\n    // Case: block styles permitted.\n    for (i = 0; i < string.length; _char >= 0x10000 ? i += 2 : i++) {\n      _char = codePointAt(string, i);\n\n      if (_char === CHAR_LINE_FEED) {\n        hasLineBreak = true; // Check if any line can be folded.\n\n        if (shouldTrackWidth) {\n          hasFoldableLine = hasFoldableLine || // Foldable line = too long, and not more-indented.\n          i - previousLineBreak - 1 > lineWidth && string[previousLineBreak + 1] !== ' ';\n          previousLineBreak = i;\n        }\n      } else if (!isPrintable(_char)) {\n        return STYLE_DOUBLE;\n      }\n\n      plain = plain && isPlainSafe(_char, prevChar, inblock);\n      prevChar = _char;\n    } // in case the end is missing a \\n\n\n\n    hasFoldableLine = hasFoldableLine || shouldTrackWidth && i - previousLineBreak - 1 > lineWidth && string[previousLineBreak + 1] !== ' ';\n  } // Although every style can represent \\n without escaping, prefer block styles\n  // for multiline, since they're more readable and they don't add empty lines.\n  // Also prefer folding a super-long line.\n\n\n  if (!hasLineBreak && !hasFoldableLine) {\n    // Strings interpretable as another type have to be quoted;\n    // e.g. the string 'true' vs. the boolean true.\n    if (plain && !forceQuotes && !testAmbiguousType(string)) {\n      return STYLE_PLAIN;\n    }\n\n    return quotingType === QUOTING_TYPE_DOUBLE ? STYLE_DOUBLE : STYLE_SINGLE;\n  } // Edge case: block indentation indicator can only have one digit.\n\n\n  if (indentPerLevel > 9 && needIndentIndicator(string)) {\n    return STYLE_DOUBLE;\n  } // At this point we know block styles are valid.\n  // Prefer literal style unless we want to fold.\n\n\n  if (!forceQuotes) {\n    return hasFoldableLine ? STYLE_FOLDED : STYLE_LITERAL;\n  }\n\n  return quotingType === QUOTING_TYPE_DOUBLE ? STYLE_DOUBLE : STYLE_SINGLE;\n} // Note: line breaking/folding is implemented for only the folded style.\n// NB. We drop the last trailing newline (if any) of a returned block scalar\n//  since the dumper adds its own newline. This always works:\n//    • No ending newline => unaffected; already using strip \"-\" chomping.\n//    • Ending newline    => removed then restored.\n//  Importantly, this keeps the \"+\" chomp indicator from gaining an extra line.\n\n\nfunction writeScalar(state, string, level, iskey, inblock) {\n  state.dump = function () {\n    if (string.length === 0) {\n      return state.quotingType === QUOTING_TYPE_DOUBLE ? '\"\"' : \"''\";\n    }\n\n    if (!state.noCompatMode) {\n      if (DEPRECATED_BOOLEANS_SYNTAX.indexOf(string) !== -1 || DEPRECATED_BASE60_SYNTAX.test(string)) {\n        return state.quotingType === QUOTING_TYPE_DOUBLE ? '\"' + string + '\"' : \"'\" + string + \"'\";\n      }\n    }\n\n    var indent = state.indent * Math.max(1, level); // no 0-indent scalars\n    // As indentation gets deeper, let the width decrease monotonically\n    // to the lower bound min(state.lineWidth, 40).\n    // Note that this implies\n    //  state.lineWidth ≤ 40 + state.indent: width is fixed at the lower bound.\n    //  state.lineWidth > 40 + state.indent: width decreases until the lower bound.\n    // This behaves better than a constant minimum width which disallows narrower options,\n    // or an indent threshold which causes the width to suddenly increase.\n\n    var lineWidth = state.lineWidth === -1 ? -1 : Math.max(Math.min(state.lineWidth, 40), state.lineWidth - indent); // Without knowing if keys are implicit/explicit, assume implicit for safety.\n\n    var singleLineOnly = iskey // No block styles in flow mode.\n    || state.flowLevel > -1 && level >= state.flowLevel;\n\n    function testAmbiguity(string) {\n      return testImplicitResolving(state, string);\n    }\n\n    switch (chooseScalarStyle(string, singleLineOnly, state.indent, lineWidth, testAmbiguity, state.quotingType, state.forceQuotes && !iskey, inblock)) {\n      case STYLE_PLAIN:\n        return string;\n\n      case STYLE_SINGLE:\n        return \"'\" + string.replace(/'/g, \"''\") + \"'\";\n\n      case STYLE_LITERAL:\n        return '|' + blockHeader(string, state.indent) + dropEndingNewline(indentString(string, indent));\n\n      case STYLE_FOLDED:\n        return '>' + blockHeader(string, state.indent) + dropEndingNewline(indentString(foldString(string, lineWidth), indent));\n\n      case STYLE_DOUBLE:\n        return '\"' + escapeString(string, lineWidth) + '\"';\n\n      default:\n        throw new YAMLException('impossible error: invalid scalar style');\n    }\n  }();\n} // Pre-conditions: string is valid for a block scalar, 1 <= indentPerLevel <= 9.\n\n\nfunction blockHeader(string, indentPerLevel) {\n  var indentIndicator = needIndentIndicator(string) ? String(indentPerLevel) : ''; // note the special case: the string '\\n' counts as a \"trailing\" empty line.\n\n  var clip = string[string.length - 1] === '\\n';\n  var keep = clip && (string[string.length - 2] === '\\n' || string === '\\n');\n  var chomp = keep ? '+' : clip ? '' : '-';\n  return indentIndicator + chomp + '\\n';\n} // (See the note for writeScalar.)\n\n\nfunction dropEndingNewline(string) {\n  return string[string.length - 1] === '\\n' ? string.slice(0, -1) : string;\n} // Note: a long line without a suitable break point will exceed the width limit.\n// Pre-conditions: every char in str isPrintable, str.length > 0, width > 0.\n\n\nfunction foldString(string, width) {\n  // In folded style, $k$ consecutive newlines output as $k+1$ newlines—\n  // unless they're before or after a more-indented line, or at the very\n  // beginning or end, in which case $k$ maps to $k$.\n  // Therefore, parse each chunk as newline(s) followed by a content line.\n  var lineRe = /(\\n+)([^\\n]*)/g; // first line (possibly an empty line)\n\n  var result = function () {\n    var nextLF = string.indexOf('\\n');\n    nextLF = nextLF !== -1 ? nextLF : string.length;\n    lineRe.lastIndex = nextLF;\n    return foldLine(string.slice(0, nextLF), width);\n  }(); // If we haven't reached the first content line yet, don't add an extra \\n.\n\n\n  var prevMoreIndented = string[0] === '\\n' || string[0] === ' ';\n  var moreIndented; // rest of the lines\n\n  var match;\n\n  while (match = lineRe.exec(string)) {\n    var prefix = match[1],\n        line = match[2];\n    moreIndented = line[0] === ' ';\n    result += prefix + (!prevMoreIndented && !moreIndented && line !== '' ? '\\n' : '') + foldLine(line, width);\n    prevMoreIndented = moreIndented;\n  }\n\n  return result;\n} // Greedy line breaking.\n// Picks the longest line under the limit each time,\n// otherwise settles for the shortest line over the limit.\n// NB. More-indented lines *cannot* be folded, as that would add an extra \\n.\n\n\nfunction foldLine(line, width) {\n  if (line === '' || line[0] === ' ') return line; // Since a more-indented line adds a \\n, breaks can't be followed by a space.\n\n  var breakRe = / [^ ]/g; // note: the match index will always be <= length-2.\n\n  var match; // start is an inclusive index. end, curr, and next are exclusive.\n\n  var start = 0,\n      end,\n      curr = 0,\n      next = 0;\n  var result = ''; // Invariants: 0 <= start <= length-1.\n  //   0 <= curr <= next <= max(0, length-2). curr - start <= width.\n  // Inside the loop:\n  //   A match implies length >= 2, so curr and next are <= length-2.\n\n  while (match = breakRe.exec(line)) {\n    next = match.index; // maintain invariant: curr - start <= width\n\n    if (next - start > width) {\n      end = curr > start ? curr : next; // derive end <= length-2\n\n      result += '\\n' + line.slice(start, end); // skip the space that was output as \\n\n\n      start = end + 1; // derive start <= length-1\n    }\n\n    curr = next;\n  } // By the invariants, start <= length-1, so there is something left over.\n  // It is either the whole string or a part starting from non-whitespace.\n\n\n  result += '\\n'; // Insert a break if the remainder is too long and there is a break available.\n\n  if (line.length - start > width && curr > start) {\n    result += line.slice(start, curr) + '\\n' + line.slice(curr + 1);\n  } else {\n    result += line.slice(start);\n  }\n\n  return result.slice(1); // drop extra \\n joiner\n} // Escapes a double-quoted string.\n\n\nfunction escapeString(string) {\n  var result = '';\n  var _char2 = 0;\n  var escapeSeq;\n\n  for (var i = 0; i < string.length; _char2 >= 0x10000 ? i += 2 : i++) {\n    _char2 = codePointAt(string, i);\n    escapeSeq = ESCAPE_SEQUENCES[_char2];\n\n    if (!escapeSeq && isPrintable(_char2)) {\n      result += string[i];\n      if (_char2 >= 0x10000) result += string[i + 1];\n    } else {\n      result += escapeSeq || encodeHex(_char2);\n    }\n  }\n\n  return result;\n}\n\nfunction writeFlowSequence(state, level, object) {\n  var _result = '',\n      _tag = state.tag,\n      index,\n      length,\n      value;\n\n  for (index = 0, length = object.length; index < length; index += 1) {\n    value = object[index];\n\n    if (state.replacer) {\n      value = state.replacer.call(object, String(index), value);\n    } // Write only valid elements, put null instead of invalid elements.\n\n\n    if (writeNode(state, level, value, false, false) || typeof value === 'undefined' && writeNode(state, level, null, false, false)) {\n      if (_result !== '') _result += ',' + (!state.condenseFlow ? ' ' : '');\n      _result += state.dump;\n    }\n  }\n\n  state.tag = _tag;\n  state.dump = '[' + _result + ']';\n}\n\nfunction writeBlockSequence(state, level, object, compact) {\n  var _result = '',\n      _tag = state.tag,\n      index,\n      length,\n      value;\n\n  for (index = 0, length = object.length; index < length; index += 1) {\n    value = object[index];\n\n    if (state.replacer) {\n      value = state.replacer.call(object, String(index), value);\n    } // Write only valid elements, put null instead of invalid elements.\n\n\n    if (writeNode(state, level + 1, value, true, true, false, true) || typeof value === 'undefined' && writeNode(state, level + 1, null, true, true, false, true)) {\n      if (!compact || _result !== '') {\n        _result += generateNextLine(state, level);\n      }\n\n      if (state.dump && CHAR_LINE_FEED === state.dump.charCodeAt(0)) {\n        _result += '-';\n      } else {\n        _result += '- ';\n      }\n\n      _result += state.dump;\n    }\n  }\n\n  state.tag = _tag;\n  state.dump = _result || '[]'; // Empty sequence if no valid values.\n}\n\nfunction writeFlowMapping(state, level, object) {\n  var _result = '',\n      _tag = state.tag,\n      objectKeyList = Object.keys(object),\n      index,\n      length,\n      objectKey,\n      objectValue,\n      pairBuffer;\n\n  for (index = 0, length = objectKeyList.length; index < length; index += 1) {\n    pairBuffer = '';\n    if (_result !== '') pairBuffer += ', ';\n    if (state.condenseFlow) pairBuffer += '\"';\n    objectKey = objectKeyList[index];\n    objectValue = object[objectKey];\n\n    if (state.replacer) {\n      objectValue = state.replacer.call(object, objectKey, objectValue);\n    }\n\n    if (!writeNode(state, level, objectKey, false, false)) {\n      continue; // Skip this pair because of invalid key;\n    }\n\n    if (state.dump.length > 1024) pairBuffer += '? ';\n    pairBuffer += state.dump + (state.condenseFlow ? '\"' : '') + ':' + (state.condenseFlow ? '' : ' ');\n\n    if (!writeNode(state, level, objectValue, false, false)) {\n      continue; // Skip this pair because of invalid value.\n    }\n\n    pairBuffer += state.dump; // Both key and value are valid.\n\n    _result += pairBuffer;\n  }\n\n  state.tag = _tag;\n  state.dump = '{' + _result + '}';\n}\n\nfunction writeBlockMapping(state, level, object, compact) {\n  var _result = '',\n      _tag = state.tag,\n      objectKeyList = Object.keys(object),\n      index,\n      length,\n      objectKey,\n      objectValue,\n      explicitPair,\n      pairBuffer; // Allow sorting keys so that the output file is deterministic\n\n  if (state.sortKeys === true) {\n    // Default sorting\n    objectKeyList.sort();\n  } else if (typeof state.sortKeys === 'function') {\n    // Custom sort function\n    objectKeyList.sort(state.sortKeys);\n  } else if (state.sortKeys) {\n    // Something is wrong\n    throw new YAMLException('sortKeys must be a boolean or a function');\n  }\n\n  for (index = 0, length = objectKeyList.length; index < length; index += 1) {\n    pairBuffer = '';\n\n    if (!compact || _result !== '') {\n      pairBuffer += generateNextLine(state, level);\n    }\n\n    objectKey = objectKeyList[index];\n    objectValue = object[objectKey];\n\n    if (state.replacer) {\n      objectValue = state.replacer.call(object, objectKey, objectValue);\n    }\n\n    if (!writeNode(state, level + 1, objectKey, true, true, true)) {\n      continue; // Skip this pair because of invalid key.\n    }\n\n    explicitPair = state.tag !== null && state.tag !== '?' || state.dump && state.dump.length > 1024;\n\n    if (explicitPair) {\n      if (state.dump && CHAR_LINE_FEED === state.dump.charCodeAt(0)) {\n        pairBuffer += '?';\n      } else {\n        pairBuffer += '? ';\n      }\n    }\n\n    pairBuffer += state.dump;\n\n    if (explicitPair) {\n      pairBuffer += generateNextLine(state, level);\n    }\n\n    if (!writeNode(state, level + 1, objectValue, true, explicitPair)) {\n      continue; // Skip this pair because of invalid value.\n    }\n\n    if (state.dump && CHAR_LINE_FEED === state.dump.charCodeAt(0)) {\n      pairBuffer += ':';\n    } else {\n      pairBuffer += ': ';\n    }\n\n    pairBuffer += state.dump; // Both key and value are valid.\n\n    _result += pairBuffer;\n  }\n\n  state.tag = _tag;\n  state.dump = _result || '{}'; // Empty mapping if no valid pairs.\n}\n\nfunction detectType(state, object, explicit) {\n  var _result, typeList, index, length, type, style;\n\n  typeList = explicit ? state.explicitTypes : state.implicitTypes;\n\n  for (index = 0, length = typeList.length; index < length; index += 1) {\n    type = typeList[index];\n\n    if ((type.instanceOf || type.predicate) && (!type.instanceOf || _typeof(object) === 'object' && object instanceof type.instanceOf) && (!type.predicate || type.predicate(object))) {\n      if (explicit) {\n        if (type.multi && type.representName) {\n          state.tag = type.representName(object);\n        } else {\n          state.tag = type.tag;\n        }\n      } else {\n        state.tag = '?';\n      }\n\n      if (type.represent) {\n        style = state.styleMap[type.tag] || type.defaultStyle;\n\n        if (_toString.call(type.represent) === '[object Function]') {\n          _result = type.represent(object, style);\n        } else if (_hasOwnProperty.call(type.represent, style)) {\n          _result = type.represent[style](object, style);\n        } else {\n          throw new YAMLException('!<' + type.tag + '> tag resolver accepts not \"' + style + '\" style');\n        }\n\n        state.dump = _result;\n      }\n\n      return true;\n    }\n  }\n\n  return false;\n} // Serializes `object` and writes it to global `result`.\n// Returns true on success, or false on invalid object.\n//\n\n\nfunction writeNode(state, level, object, block, compact, iskey, isblockseq) {\n  state.tag = null;\n  state.dump = object;\n\n  if (!detectType(state, object, false)) {\n    detectType(state, object, true);\n  }\n\n  var type = _toString.call(state.dump);\n\n  var inblock = block;\n  var tagStr;\n\n  if (block) {\n    block = state.flowLevel < 0 || state.flowLevel > level;\n  }\n\n  var objectOrArray = type === '[object Object]' || type === '[object Array]',\n      duplicateIndex,\n      duplicate;\n\n  if (objectOrArray) {\n    duplicateIndex = state.duplicates.indexOf(object);\n    duplicate = duplicateIndex !== -1;\n  }\n\n  if (state.tag !== null && state.tag !== '?' || duplicate || state.indent !== 2 && level > 0) {\n    compact = false;\n  }\n\n  if (duplicate && state.usedDuplicates[duplicateIndex]) {\n    state.dump = '*ref_' + duplicateIndex;\n  } else {\n    if (objectOrArray && duplicate && !state.usedDuplicates[duplicateIndex]) {\n      state.usedDuplicates[duplicateIndex] = true;\n    }\n\n    if (type === '[object Object]') {\n      if (block && Object.keys(state.dump).length !== 0) {\n        writeBlockMapping(state, level, state.dump, compact);\n\n        if (duplicate) {\n          state.dump = '&ref_' + duplicateIndex + state.dump;\n        }\n      } else {\n        writeFlowMapping(state, level, state.dump);\n\n        if (duplicate) {\n          state.dump = '&ref_' + duplicateIndex + ' ' + state.dump;\n        }\n      }\n    } else if (type === '[object Array]') {\n      if (block && state.dump.length !== 0) {\n        if (state.noArrayIndent && !isblockseq && level > 0) {\n          writeBlockSequence(state, level - 1, state.dump, compact);\n        } else {\n          writeBlockSequence(state, level, state.dump, compact);\n        }\n\n        if (duplicate) {\n          state.dump = '&ref_' + duplicateIndex + state.dump;\n        }\n      } else {\n        writeFlowSequence(state, level, state.dump);\n\n        if (duplicate) {\n          state.dump = '&ref_' + duplicateIndex + ' ' + state.dump;\n        }\n      }\n    } else if (type === '[object String]') {\n      if (state.tag !== '?') {\n        writeScalar(state, state.dump, level, iskey, inblock);\n      }\n    } else if (type === '[object Undefined]') {\n      return false;\n    } else {\n      if (state.skipInvalid) return false;\n      throw new YAMLException('unacceptable kind of an object to dump ' + type);\n    }\n\n    if (state.tag !== null && state.tag !== '?') {\n      // Need to encode all characters except those allowed by the spec:\n      //\n      // [35] ns-dec-digit    ::=  [#x30-#x39] /* 0-9 */\n      // [36] ns-hex-digit    ::=  ns-dec-digit\n      //                         | [#x41-#x46] /* A-F */ | [#x61-#x66] /* a-f */\n      // [37] ns-ascii-letter ::=  [#x41-#x5A] /* A-Z */ | [#x61-#x7A] /* a-z */\n      // [38] ns-word-char    ::=  ns-dec-digit | ns-ascii-letter | “-”\n      // [39] ns-uri-char     ::=  “%” ns-hex-digit ns-hex-digit | ns-word-char | “#”\n      //                         | “;” | “/” | “?” | “:” | “@” | “&” | “=” | “+” | “$” | “,”\n      //                         | “_” | “.” | “!” | “~” | “*” | “'” | “(” | “)” | “[” | “]”\n      //\n      // Also need to encode '!' because it has special meaning (end of tag prefix).\n      //\n      tagStr = encodeURI(state.tag[0] === '!' ? state.tag.slice(1) : state.tag).replace(/!/g, '%21');\n\n      if (state.tag[0] === '!') {\n        tagStr = '!' + tagStr;\n      } else if (tagStr.slice(0, 18) === 'tag:yaml.org,2002:') {\n        tagStr = '!!' + tagStr.slice(18);\n      } else {\n        tagStr = '!<' + tagStr + '>';\n      }\n\n      state.dump = tagStr + ' ' + state.dump;\n    }\n  }\n\n  return true;\n}\n\nfunction getDuplicateReferences(object, state) {\n  var objects = [],\n      duplicatesIndexes = [],\n      index,\n      length;\n  inspectNode(object, objects, duplicatesIndexes);\n\n  for (index = 0, length = duplicatesIndexes.length; index < length; index += 1) {\n    state.duplicates.push(objects[duplicatesIndexes[index]]);\n  }\n\n  state.usedDuplicates = new Array(length);\n}\n\nfunction inspectNode(object, objects, duplicatesIndexes) {\n  var objectKeyList, index, length;\n\n  if (object !== null && _typeof(object) === 'object') {\n    index = objects.indexOf(object);\n\n    if (index !== -1) {\n      if (duplicatesIndexes.indexOf(index) === -1) {\n        duplicatesIndexes.push(index);\n      }\n    } else {\n      objects.push(object);\n\n      if (Array.isArray(object)) {\n        for (index = 0, length = object.length; index < length; index += 1) {\n          inspectNode(object[index], objects, duplicatesIndexes);\n        }\n      } else {\n        objectKeyList = Object.keys(object);\n\n        for (index = 0, length = objectKeyList.length; index < length; index += 1) {\n          inspectNode(object[objectKeyList[index]], objects, duplicatesIndexes);\n        }\n      }\n    }\n  }\n}\n\nfunction dump(input, options) {\n  options = options || {};\n  var state = new State(options);\n  if (!state.noRefs) getDuplicateReferences(input, state);\n  var value = input;\n\n  if (state.replacer) {\n    value = state.replacer.call({\n      '': value\n    }, '', value);\n  }\n\n  if (writeNode(state, 0, value, true, true)) return state.dump + '\\n';\n  return '';\n}\n\nmodule.exports.dump = dump;\n\n//# sourceURL=webpack://lai-cmd/./node_modules/js-yaml/lib/dumper.js?");

/***/ }),

/***/ "./node_modules/js-yaml/lib/exception.js":
/*!***********************************************!*\
  !*** ./node_modules/js-yaml/lib/exception.js ***!
  \***********************************************/
/***/ ((module) => {

"use strict";
eval("// YAML error class. http://stackoverflow.com/questions/8458984\n//\n\n\nfunction formatError(exception, compact) {\n  var where = '',\n      message = exception.reason || '(unknown reason)';\n  if (!exception.mark) return message;\n\n  if (exception.mark.name) {\n    where += 'in \"' + exception.mark.name + '\" ';\n  }\n\n  where += '(' + (exception.mark.line + 1) + ':' + (exception.mark.column + 1) + ')';\n\n  if (!compact && exception.mark.snippet) {\n    where += '\\n\\n' + exception.mark.snippet;\n  }\n\n  return message + ' ' + where;\n}\n\nfunction YAMLException(reason, mark) {\n  // Super constructor\n  Error.call(this);\n  this.name = 'YAMLException';\n  this.reason = reason;\n  this.mark = mark;\n  this.message = formatError(this, false); // Include stack trace in error object\n\n  if (Error.captureStackTrace) {\n    // Chrome and NodeJS\n    Error.captureStackTrace(this, this.constructor);\n  } else {\n    // FF, IE 10+ and Safari 6+. Fallback for others\n    this.stack = new Error().stack || '';\n  }\n} // Inherit from Error\n\n\nYAMLException.prototype = Object.create(Error.prototype);\nYAMLException.prototype.constructor = YAMLException;\n\nYAMLException.prototype.toString = function toString(compact) {\n  return this.name + ': ' + formatError(this, compact);\n};\n\nmodule.exports = YAMLException;\n\n//# sourceURL=webpack://lai-cmd/./node_modules/js-yaml/lib/exception.js?");

/***/ }),

/***/ "./node_modules/js-yaml/lib/loader.js":
/*!********************************************!*\
  !*** ./node_modules/js-yaml/lib/loader.js ***!
  \********************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("\n/*eslint-disable max-len,no-use-before-define*/\n\nfunction _typeof(obj) { \"@babel/helpers - typeof\"; return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && \"function\" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }, _typeof(obj); }\n\nvar common = __webpack_require__(/*! ./common */ \"./node_modules/js-yaml/lib/common.js\");\n\nvar YAMLException = __webpack_require__(/*! ./exception */ \"./node_modules/js-yaml/lib/exception.js\");\n\nvar makeSnippet = __webpack_require__(/*! ./snippet */ \"./node_modules/js-yaml/lib/snippet.js\");\n\nvar DEFAULT_SCHEMA = __webpack_require__(/*! ./schema/default */ \"./node_modules/js-yaml/lib/schema/default.js\");\n\nvar _hasOwnProperty = Object.prototype.hasOwnProperty;\nvar CONTEXT_FLOW_IN = 1;\nvar CONTEXT_FLOW_OUT = 2;\nvar CONTEXT_BLOCK_IN = 3;\nvar CONTEXT_BLOCK_OUT = 4;\nvar CHOMPING_CLIP = 1;\nvar CHOMPING_STRIP = 2;\nvar CHOMPING_KEEP = 3;\nvar PATTERN_NON_PRINTABLE = /[\\x00-\\x08\\x0B\\x0C\\x0E-\\x1F\\x7F-\\x84\\x86-\\x9F\\uFFFE\\uFFFF]|[\\uD800-\\uDBFF](?![\\uDC00-\\uDFFF])|(?:[^\\uD800-\\uDBFF]|^)[\\uDC00-\\uDFFF]/;\nvar PATTERN_NON_ASCII_LINE_BREAKS = /[\\x85\\u2028\\u2029]/;\nvar PATTERN_FLOW_INDICATORS = /[,\\[\\]\\{\\}]/;\nvar PATTERN_TAG_HANDLE = /^(?:!|!!|![a-z\\-]+!)$/i;\nvar PATTERN_TAG_URI = /^(?:!|[^,\\[\\]\\{\\}])(?:%[0-9a-f]{2}|[0-9a-z\\-#;\\/\\?:@&=\\+\\$,_\\.!~\\*'\\(\\)\\[\\]])*$/i;\n\nfunction _class(obj) {\n  return Object.prototype.toString.call(obj);\n}\n\nfunction is_EOL(c) {\n  return c === 0x0A\n  /* LF */\n  || c === 0x0D\n  /* CR */\n  ;\n}\n\nfunction is_WHITE_SPACE(c) {\n  return c === 0x09\n  /* Tab */\n  || c === 0x20\n  /* Space */\n  ;\n}\n\nfunction is_WS_OR_EOL(c) {\n  return c === 0x09\n  /* Tab */\n  || c === 0x20\n  /* Space */\n  || c === 0x0A\n  /* LF */\n  || c === 0x0D\n  /* CR */\n  ;\n}\n\nfunction is_FLOW_INDICATOR(c) {\n  return c === 0x2C\n  /* , */\n  || c === 0x5B\n  /* [ */\n  || c === 0x5D\n  /* ] */\n  || c === 0x7B\n  /* { */\n  || c === 0x7D\n  /* } */\n  ;\n}\n\nfunction fromHexCode(c) {\n  var lc;\n\n  if (0x30\n  /* 0 */\n  <= c && c <= 0x39\n  /* 9 */\n  ) {\n    return c - 0x30;\n  }\n  /*eslint-disable no-bitwise*/\n\n\n  lc = c | 0x20;\n\n  if (0x61\n  /* a */\n  <= lc && lc <= 0x66\n  /* f */\n  ) {\n    return lc - 0x61 + 10;\n  }\n\n  return -1;\n}\n\nfunction escapedHexLen(c) {\n  if (c === 0x78\n  /* x */\n  ) {\n    return 2;\n  }\n\n  if (c === 0x75\n  /* u */\n  ) {\n    return 4;\n  }\n\n  if (c === 0x55\n  /* U */\n  ) {\n    return 8;\n  }\n\n  return 0;\n}\n\nfunction fromDecimalCode(c) {\n  if (0x30\n  /* 0 */\n  <= c && c <= 0x39\n  /* 9 */\n  ) {\n    return c - 0x30;\n  }\n\n  return -1;\n}\n\nfunction simpleEscapeSequence(c) {\n  /* eslint-disable indent */\n  return c === 0x30\n  /* 0 */\n  ? '\\x00' : c === 0x61\n  /* a */\n  ? '\\x07' : c === 0x62\n  /* b */\n  ? '\\x08' : c === 0x74\n  /* t */\n  ? '\\x09' : c === 0x09\n  /* Tab */\n  ? '\\x09' : c === 0x6E\n  /* n */\n  ? '\\x0A' : c === 0x76\n  /* v */\n  ? '\\x0B' : c === 0x66\n  /* f */\n  ? '\\x0C' : c === 0x72\n  /* r */\n  ? '\\x0D' : c === 0x65\n  /* e */\n  ? '\\x1B' : c === 0x20\n  /* Space */\n  ? ' ' : c === 0x22\n  /* \" */\n  ? '\\x22' : c === 0x2F\n  /* / */\n  ? '/' : c === 0x5C\n  /* \\ */\n  ? '\\x5C' : c === 0x4E\n  /* N */\n  ? '\\x85' : c === 0x5F\n  /* _ */\n  ? '\\xA0' : c === 0x4C\n  /* L */\n  ? \"\\u2028\" : c === 0x50\n  /* P */\n  ? \"\\u2029\" : '';\n}\n\nfunction charFromCodepoint(c) {\n  if (c <= 0xFFFF) {\n    return String.fromCharCode(c);\n  } // Encode UTF-16 surrogate pair\n  // https://en.wikipedia.org/wiki/UTF-16#Code_points_U.2B010000_to_U.2B10FFFF\n\n\n  return String.fromCharCode((c - 0x010000 >> 10) + 0xD800, (c - 0x010000 & 0x03FF) + 0xDC00);\n}\n\nvar simpleEscapeCheck = new Array(256); // integer, for fast access\n\nvar simpleEscapeMap = new Array(256);\n\nfor (var i = 0; i < 256; i++) {\n  simpleEscapeCheck[i] = simpleEscapeSequence(i) ? 1 : 0;\n  simpleEscapeMap[i] = simpleEscapeSequence(i);\n}\n\nfunction State(input, options) {\n  this.input = input;\n  this.filename = options['filename'] || null;\n  this.schema = options['schema'] || DEFAULT_SCHEMA;\n  this.onWarning = options['onWarning'] || null; // (Hidden) Remove? makes the loader to expect YAML 1.1 documents\n  // if such documents have no explicit %YAML directive\n\n  this.legacy = options['legacy'] || false;\n  this.json = options['json'] || false;\n  this.listener = options['listener'] || null;\n  this.implicitTypes = this.schema.compiledImplicit;\n  this.typeMap = this.schema.compiledTypeMap;\n  this.length = input.length;\n  this.position = 0;\n  this.line = 0;\n  this.lineStart = 0;\n  this.lineIndent = 0; // position of first leading tab in the current line,\n  // used to make sure there are no tabs in the indentation\n\n  this.firstTabInLine = -1;\n  this.documents = [];\n  /*\n  this.version;\n  this.checkLineBreaks;\n  this.tagMap;\n  this.anchorMap;\n  this.tag;\n  this.anchor;\n  this.kind;\n  this.result;*/\n}\n\nfunction generateError(state, message) {\n  var mark = {\n    name: state.filename,\n    buffer: state.input.slice(0, -1),\n    // omit trailing \\0\n    position: state.position,\n    line: state.line,\n    column: state.position - state.lineStart\n  };\n  mark.snippet = makeSnippet(mark);\n  return new YAMLException(message, mark);\n}\n\nfunction throwError(state, message) {\n  throw generateError(state, message);\n}\n\nfunction throwWarning(state, message) {\n  if (state.onWarning) {\n    state.onWarning.call(null, generateError(state, message));\n  }\n}\n\nvar directiveHandlers = {\n  YAML: function handleYamlDirective(state, name, args) {\n    var match, major, minor;\n\n    if (state.version !== null) {\n      throwError(state, 'duplication of %YAML directive');\n    }\n\n    if (args.length !== 1) {\n      throwError(state, 'YAML directive accepts exactly one argument');\n    }\n\n    match = /^([0-9]+)\\.([0-9]+)$/.exec(args[0]);\n\n    if (match === null) {\n      throwError(state, 'ill-formed argument of the YAML directive');\n    }\n\n    major = parseInt(match[1], 10);\n    minor = parseInt(match[2], 10);\n\n    if (major !== 1) {\n      throwError(state, 'unacceptable YAML version of the document');\n    }\n\n    state.version = args[0];\n    state.checkLineBreaks = minor < 2;\n\n    if (minor !== 1 && minor !== 2) {\n      throwWarning(state, 'unsupported YAML version of the document');\n    }\n  },\n  TAG: function handleTagDirective(state, name, args) {\n    var handle, prefix;\n\n    if (args.length !== 2) {\n      throwError(state, 'TAG directive accepts exactly two arguments');\n    }\n\n    handle = args[0];\n    prefix = args[1];\n\n    if (!PATTERN_TAG_HANDLE.test(handle)) {\n      throwError(state, 'ill-formed tag handle (first argument) of the TAG directive');\n    }\n\n    if (_hasOwnProperty.call(state.tagMap, handle)) {\n      throwError(state, 'there is a previously declared suffix for \"' + handle + '\" tag handle');\n    }\n\n    if (!PATTERN_TAG_URI.test(prefix)) {\n      throwError(state, 'ill-formed tag prefix (second argument) of the TAG directive');\n    }\n\n    try {\n      prefix = decodeURIComponent(prefix);\n    } catch (err) {\n      throwError(state, 'tag prefix is malformed: ' + prefix);\n    }\n\n    state.tagMap[handle] = prefix;\n  }\n};\n\nfunction captureSegment(state, start, end, checkJson) {\n  var _position, _length, _character, _result;\n\n  if (start < end) {\n    _result = state.input.slice(start, end);\n\n    if (checkJson) {\n      for (_position = 0, _length = _result.length; _position < _length; _position += 1) {\n        _character = _result.charCodeAt(_position);\n\n        if (!(_character === 0x09 || 0x20 <= _character && _character <= 0x10FFFF)) {\n          throwError(state, 'expected valid JSON character');\n        }\n      }\n    } else if (PATTERN_NON_PRINTABLE.test(_result)) {\n      throwError(state, 'the stream contains non-printable characters');\n    }\n\n    state.result += _result;\n  }\n}\n\nfunction mergeMappings(state, destination, source, overridableKeys) {\n  var sourceKeys, key, index, quantity;\n\n  if (!common.isObject(source)) {\n    throwError(state, 'cannot merge mappings; the provided source object is unacceptable');\n  }\n\n  sourceKeys = Object.keys(source);\n\n  for (index = 0, quantity = sourceKeys.length; index < quantity; index += 1) {\n    key = sourceKeys[index];\n\n    if (!_hasOwnProperty.call(destination, key)) {\n      destination[key] = source[key];\n      overridableKeys[key] = true;\n    }\n  }\n}\n\nfunction storeMappingPair(state, _result, overridableKeys, keyTag, keyNode, valueNode, startLine, startLineStart, startPos) {\n  var index, quantity; // The output is a plain object here, so keys can only be strings.\n  // We need to convert keyNode to a string, but doing so can hang the process\n  // (deeply nested arrays that explode exponentially using aliases).\n\n  if (Array.isArray(keyNode)) {\n    keyNode = Array.prototype.slice.call(keyNode);\n\n    for (index = 0, quantity = keyNode.length; index < quantity; index += 1) {\n      if (Array.isArray(keyNode[index])) {\n        throwError(state, 'nested arrays are not supported inside keys');\n      }\n\n      if (_typeof(keyNode) === 'object' && _class(keyNode[index]) === '[object Object]') {\n        keyNode[index] = '[object Object]';\n      }\n    }\n  } // Avoid code execution in load() via toString property\n  // (still use its own toString for arrays, timestamps,\n  // and whatever user schema extensions happen to have @@toStringTag)\n\n\n  if (_typeof(keyNode) === 'object' && _class(keyNode) === '[object Object]') {\n    keyNode = '[object Object]';\n  }\n\n  keyNode = String(keyNode);\n\n  if (_result === null) {\n    _result = {};\n  }\n\n  if (keyTag === 'tag:yaml.org,2002:merge') {\n    if (Array.isArray(valueNode)) {\n      for (index = 0, quantity = valueNode.length; index < quantity; index += 1) {\n        mergeMappings(state, _result, valueNode[index], overridableKeys);\n      }\n    } else {\n      mergeMappings(state, _result, valueNode, overridableKeys);\n    }\n  } else {\n    if (!state.json && !_hasOwnProperty.call(overridableKeys, keyNode) && _hasOwnProperty.call(_result, keyNode)) {\n      state.line = startLine || state.line;\n      state.lineStart = startLineStart || state.lineStart;\n      state.position = startPos || state.position;\n      throwError(state, 'duplicated mapping key');\n    } // used for this specific key only because Object.defineProperty is slow\n\n\n    if (keyNode === '__proto__') {\n      Object.defineProperty(_result, keyNode, {\n        configurable: true,\n        enumerable: true,\n        writable: true,\n        value: valueNode\n      });\n    } else {\n      _result[keyNode] = valueNode;\n    }\n\n    delete overridableKeys[keyNode];\n  }\n\n  return _result;\n}\n\nfunction readLineBreak(state) {\n  var ch;\n  ch = state.input.charCodeAt(state.position);\n\n  if (ch === 0x0A\n  /* LF */\n  ) {\n    state.position++;\n  } else if (ch === 0x0D\n  /* CR */\n  ) {\n    state.position++;\n\n    if (state.input.charCodeAt(state.position) === 0x0A\n    /* LF */\n    ) {\n      state.position++;\n    }\n  } else {\n    throwError(state, 'a line break is expected');\n  }\n\n  state.line += 1;\n  state.lineStart = state.position;\n  state.firstTabInLine = -1;\n}\n\nfunction skipSeparationSpace(state, allowComments, checkIndent) {\n  var lineBreaks = 0,\n      ch = state.input.charCodeAt(state.position);\n\n  while (ch !== 0) {\n    while (is_WHITE_SPACE(ch)) {\n      if (ch === 0x09\n      /* Tab */\n      && state.firstTabInLine === -1) {\n        state.firstTabInLine = state.position;\n      }\n\n      ch = state.input.charCodeAt(++state.position);\n    }\n\n    if (allowComments && ch === 0x23\n    /* # */\n    ) {\n      do {\n        ch = state.input.charCodeAt(++state.position);\n      } while (ch !== 0x0A\n      /* LF */\n      && ch !== 0x0D\n      /* CR */\n      && ch !== 0);\n    }\n\n    if (is_EOL(ch)) {\n      readLineBreak(state);\n      ch = state.input.charCodeAt(state.position);\n      lineBreaks++;\n      state.lineIndent = 0;\n\n      while (ch === 0x20\n      /* Space */\n      ) {\n        state.lineIndent++;\n        ch = state.input.charCodeAt(++state.position);\n      }\n    } else {\n      break;\n    }\n  }\n\n  if (checkIndent !== -1 && lineBreaks !== 0 && state.lineIndent < checkIndent) {\n    throwWarning(state, 'deficient indentation');\n  }\n\n  return lineBreaks;\n}\n\nfunction testDocumentSeparator(state) {\n  var _position = state.position,\n      ch;\n  ch = state.input.charCodeAt(_position); // Condition state.position === state.lineStart is tested\n  // in parent on each call, for efficiency. No needs to test here again.\n\n  if ((ch === 0x2D\n  /* - */\n  || ch === 0x2E\n  /* . */\n  ) && ch === state.input.charCodeAt(_position + 1) && ch === state.input.charCodeAt(_position + 2)) {\n    _position += 3;\n    ch = state.input.charCodeAt(_position);\n\n    if (ch === 0 || is_WS_OR_EOL(ch)) {\n      return true;\n    }\n  }\n\n  return false;\n}\n\nfunction writeFoldedLines(state, count) {\n  if (count === 1) {\n    state.result += ' ';\n  } else if (count > 1) {\n    state.result += common.repeat('\\n', count - 1);\n  }\n}\n\nfunction readPlainScalar(state, nodeIndent, withinFlowCollection) {\n  var preceding,\n      following,\n      captureStart,\n      captureEnd,\n      hasPendingContent,\n      _line,\n      _lineStart,\n      _lineIndent,\n      _kind = state.kind,\n      _result = state.result,\n      ch;\n\n  ch = state.input.charCodeAt(state.position);\n\n  if (is_WS_OR_EOL(ch) || is_FLOW_INDICATOR(ch) || ch === 0x23\n  /* # */\n  || ch === 0x26\n  /* & */\n  || ch === 0x2A\n  /* * */\n  || ch === 0x21\n  /* ! */\n  || ch === 0x7C\n  /* | */\n  || ch === 0x3E\n  /* > */\n  || ch === 0x27\n  /* ' */\n  || ch === 0x22\n  /* \" */\n  || ch === 0x25\n  /* % */\n  || ch === 0x40\n  /* @ */\n  || ch === 0x60\n  /* ` */\n  ) {\n    return false;\n  }\n\n  if (ch === 0x3F\n  /* ? */\n  || ch === 0x2D\n  /* - */\n  ) {\n    following = state.input.charCodeAt(state.position + 1);\n\n    if (is_WS_OR_EOL(following) || withinFlowCollection && is_FLOW_INDICATOR(following)) {\n      return false;\n    }\n  }\n\n  state.kind = 'scalar';\n  state.result = '';\n  captureStart = captureEnd = state.position;\n  hasPendingContent = false;\n\n  while (ch !== 0) {\n    if (ch === 0x3A\n    /* : */\n    ) {\n      following = state.input.charCodeAt(state.position + 1);\n\n      if (is_WS_OR_EOL(following) || withinFlowCollection && is_FLOW_INDICATOR(following)) {\n        break;\n      }\n    } else if (ch === 0x23\n    /* # */\n    ) {\n      preceding = state.input.charCodeAt(state.position - 1);\n\n      if (is_WS_OR_EOL(preceding)) {\n        break;\n      }\n    } else if (state.position === state.lineStart && testDocumentSeparator(state) || withinFlowCollection && is_FLOW_INDICATOR(ch)) {\n      break;\n    } else if (is_EOL(ch)) {\n      _line = state.line;\n      _lineStart = state.lineStart;\n      _lineIndent = state.lineIndent;\n      skipSeparationSpace(state, false, -1);\n\n      if (state.lineIndent >= nodeIndent) {\n        hasPendingContent = true;\n        ch = state.input.charCodeAt(state.position);\n        continue;\n      } else {\n        state.position = captureEnd;\n        state.line = _line;\n        state.lineStart = _lineStart;\n        state.lineIndent = _lineIndent;\n        break;\n      }\n    }\n\n    if (hasPendingContent) {\n      captureSegment(state, captureStart, captureEnd, false);\n      writeFoldedLines(state, state.line - _line);\n      captureStart = captureEnd = state.position;\n      hasPendingContent = false;\n    }\n\n    if (!is_WHITE_SPACE(ch)) {\n      captureEnd = state.position + 1;\n    }\n\n    ch = state.input.charCodeAt(++state.position);\n  }\n\n  captureSegment(state, captureStart, captureEnd, false);\n\n  if (state.result) {\n    return true;\n  }\n\n  state.kind = _kind;\n  state.result = _result;\n  return false;\n}\n\nfunction readSingleQuotedScalar(state, nodeIndent) {\n  var ch, captureStart, captureEnd;\n  ch = state.input.charCodeAt(state.position);\n\n  if (ch !== 0x27\n  /* ' */\n  ) {\n    return false;\n  }\n\n  state.kind = 'scalar';\n  state.result = '';\n  state.position++;\n  captureStart = captureEnd = state.position;\n\n  while ((ch = state.input.charCodeAt(state.position)) !== 0) {\n    if (ch === 0x27\n    /* ' */\n    ) {\n      captureSegment(state, captureStart, state.position, true);\n      ch = state.input.charCodeAt(++state.position);\n\n      if (ch === 0x27\n      /* ' */\n      ) {\n        captureStart = state.position;\n        state.position++;\n        captureEnd = state.position;\n      } else {\n        return true;\n      }\n    } else if (is_EOL(ch)) {\n      captureSegment(state, captureStart, captureEnd, true);\n      writeFoldedLines(state, skipSeparationSpace(state, false, nodeIndent));\n      captureStart = captureEnd = state.position;\n    } else if (state.position === state.lineStart && testDocumentSeparator(state)) {\n      throwError(state, 'unexpected end of the document within a single quoted scalar');\n    } else {\n      state.position++;\n      captureEnd = state.position;\n    }\n  }\n\n  throwError(state, 'unexpected end of the stream within a single quoted scalar');\n}\n\nfunction readDoubleQuotedScalar(state, nodeIndent) {\n  var captureStart, captureEnd, hexLength, hexResult, tmp, ch;\n  ch = state.input.charCodeAt(state.position);\n\n  if (ch !== 0x22\n  /* \" */\n  ) {\n    return false;\n  }\n\n  state.kind = 'scalar';\n  state.result = '';\n  state.position++;\n  captureStart = captureEnd = state.position;\n\n  while ((ch = state.input.charCodeAt(state.position)) !== 0) {\n    if (ch === 0x22\n    /* \" */\n    ) {\n      captureSegment(state, captureStart, state.position, true);\n      state.position++;\n      return true;\n    } else if (ch === 0x5C\n    /* \\ */\n    ) {\n      captureSegment(state, captureStart, state.position, true);\n      ch = state.input.charCodeAt(++state.position);\n\n      if (is_EOL(ch)) {\n        skipSeparationSpace(state, false, nodeIndent); // TODO: rework to inline fn with no type cast?\n      } else if (ch < 256 && simpleEscapeCheck[ch]) {\n        state.result += simpleEscapeMap[ch];\n        state.position++;\n      } else if ((tmp = escapedHexLen(ch)) > 0) {\n        hexLength = tmp;\n        hexResult = 0;\n\n        for (; hexLength > 0; hexLength--) {\n          ch = state.input.charCodeAt(++state.position);\n\n          if ((tmp = fromHexCode(ch)) >= 0) {\n            hexResult = (hexResult << 4) + tmp;\n          } else {\n            throwError(state, 'expected hexadecimal character');\n          }\n        }\n\n        state.result += charFromCodepoint(hexResult);\n        state.position++;\n      } else {\n        throwError(state, 'unknown escape sequence');\n      }\n\n      captureStart = captureEnd = state.position;\n    } else if (is_EOL(ch)) {\n      captureSegment(state, captureStart, captureEnd, true);\n      writeFoldedLines(state, skipSeparationSpace(state, false, nodeIndent));\n      captureStart = captureEnd = state.position;\n    } else if (state.position === state.lineStart && testDocumentSeparator(state)) {\n      throwError(state, 'unexpected end of the document within a double quoted scalar');\n    } else {\n      state.position++;\n      captureEnd = state.position;\n    }\n  }\n\n  throwError(state, 'unexpected end of the stream within a double quoted scalar');\n}\n\nfunction readFlowCollection(state, nodeIndent) {\n  var readNext = true,\n      _line,\n      _lineStart,\n      _pos,\n      _tag = state.tag,\n      _result,\n      _anchor = state.anchor,\n      following,\n      terminator,\n      isPair,\n      isExplicitPair,\n      isMapping,\n      overridableKeys = Object.create(null),\n      keyNode,\n      keyTag,\n      valueNode,\n      ch;\n\n  ch = state.input.charCodeAt(state.position);\n\n  if (ch === 0x5B\n  /* [ */\n  ) {\n    terminator = 0x5D;\n    /* ] */\n\n    isMapping = false;\n    _result = [];\n  } else if (ch === 0x7B\n  /* { */\n  ) {\n    terminator = 0x7D;\n    /* } */\n\n    isMapping = true;\n    _result = {};\n  } else {\n    return false;\n  }\n\n  if (state.anchor !== null) {\n    state.anchorMap[state.anchor] = _result;\n  }\n\n  ch = state.input.charCodeAt(++state.position);\n\n  while (ch !== 0) {\n    skipSeparationSpace(state, true, nodeIndent);\n    ch = state.input.charCodeAt(state.position);\n\n    if (ch === terminator) {\n      state.position++;\n      state.tag = _tag;\n      state.anchor = _anchor;\n      state.kind = isMapping ? 'mapping' : 'sequence';\n      state.result = _result;\n      return true;\n    } else if (!readNext) {\n      throwError(state, 'missed comma between flow collection entries');\n    } else if (ch === 0x2C\n    /* , */\n    ) {\n      // \"flow collection entries can never be completely empty\", as per YAML 1.2, section 7.4\n      throwError(state, \"expected the node content, but found ','\");\n    }\n\n    keyTag = keyNode = valueNode = null;\n    isPair = isExplicitPair = false;\n\n    if (ch === 0x3F\n    /* ? */\n    ) {\n      following = state.input.charCodeAt(state.position + 1);\n\n      if (is_WS_OR_EOL(following)) {\n        isPair = isExplicitPair = true;\n        state.position++;\n        skipSeparationSpace(state, true, nodeIndent);\n      }\n    }\n\n    _line = state.line; // Save the current line.\n\n    _lineStart = state.lineStart;\n    _pos = state.position;\n    composeNode(state, nodeIndent, CONTEXT_FLOW_IN, false, true);\n    keyTag = state.tag;\n    keyNode = state.result;\n    skipSeparationSpace(state, true, nodeIndent);\n    ch = state.input.charCodeAt(state.position);\n\n    if ((isExplicitPair || state.line === _line) && ch === 0x3A\n    /* : */\n    ) {\n      isPair = true;\n      ch = state.input.charCodeAt(++state.position);\n      skipSeparationSpace(state, true, nodeIndent);\n      composeNode(state, nodeIndent, CONTEXT_FLOW_IN, false, true);\n      valueNode = state.result;\n    }\n\n    if (isMapping) {\n      storeMappingPair(state, _result, overridableKeys, keyTag, keyNode, valueNode, _line, _lineStart, _pos);\n    } else if (isPair) {\n      _result.push(storeMappingPair(state, null, overridableKeys, keyTag, keyNode, valueNode, _line, _lineStart, _pos));\n    } else {\n      _result.push(keyNode);\n    }\n\n    skipSeparationSpace(state, true, nodeIndent);\n    ch = state.input.charCodeAt(state.position);\n\n    if (ch === 0x2C\n    /* , */\n    ) {\n      readNext = true;\n      ch = state.input.charCodeAt(++state.position);\n    } else {\n      readNext = false;\n    }\n  }\n\n  throwError(state, 'unexpected end of the stream within a flow collection');\n}\n\nfunction readBlockScalar(state, nodeIndent) {\n  var captureStart,\n      folding,\n      chomping = CHOMPING_CLIP,\n      didReadContent = false,\n      detectedIndent = false,\n      textIndent = nodeIndent,\n      emptyLines = 0,\n      atMoreIndented = false,\n      tmp,\n      ch;\n  ch = state.input.charCodeAt(state.position);\n\n  if (ch === 0x7C\n  /* | */\n  ) {\n    folding = false;\n  } else if (ch === 0x3E\n  /* > */\n  ) {\n    folding = true;\n  } else {\n    return false;\n  }\n\n  state.kind = 'scalar';\n  state.result = '';\n\n  while (ch !== 0) {\n    ch = state.input.charCodeAt(++state.position);\n\n    if (ch === 0x2B\n    /* + */\n    || ch === 0x2D\n    /* - */\n    ) {\n      if (CHOMPING_CLIP === chomping) {\n        chomping = ch === 0x2B\n        /* + */\n        ? CHOMPING_KEEP : CHOMPING_STRIP;\n      } else {\n        throwError(state, 'repeat of a chomping mode identifier');\n      }\n    } else if ((tmp = fromDecimalCode(ch)) >= 0) {\n      if (tmp === 0) {\n        throwError(state, 'bad explicit indentation width of a block scalar; it cannot be less than one');\n      } else if (!detectedIndent) {\n        textIndent = nodeIndent + tmp - 1;\n        detectedIndent = true;\n      } else {\n        throwError(state, 'repeat of an indentation width identifier');\n      }\n    } else {\n      break;\n    }\n  }\n\n  if (is_WHITE_SPACE(ch)) {\n    do {\n      ch = state.input.charCodeAt(++state.position);\n    } while (is_WHITE_SPACE(ch));\n\n    if (ch === 0x23\n    /* # */\n    ) {\n      do {\n        ch = state.input.charCodeAt(++state.position);\n      } while (!is_EOL(ch) && ch !== 0);\n    }\n  }\n\n  while (ch !== 0) {\n    readLineBreak(state);\n    state.lineIndent = 0;\n    ch = state.input.charCodeAt(state.position);\n\n    while ((!detectedIndent || state.lineIndent < textIndent) && ch === 0x20\n    /* Space */\n    ) {\n      state.lineIndent++;\n      ch = state.input.charCodeAt(++state.position);\n    }\n\n    if (!detectedIndent && state.lineIndent > textIndent) {\n      textIndent = state.lineIndent;\n    }\n\n    if (is_EOL(ch)) {\n      emptyLines++;\n      continue;\n    } // End of the scalar.\n\n\n    if (state.lineIndent < textIndent) {\n      // Perform the chomping.\n      if (chomping === CHOMPING_KEEP) {\n        state.result += common.repeat('\\n', didReadContent ? 1 + emptyLines : emptyLines);\n      } else if (chomping === CHOMPING_CLIP) {\n        if (didReadContent) {\n          // i.e. only if the scalar is not empty.\n          state.result += '\\n';\n        }\n      } // Break this `while` cycle and go to the funciton's epilogue.\n\n\n      break;\n    } // Folded style: use fancy rules to handle line breaks.\n\n\n    if (folding) {\n      // Lines starting with white space characters (more-indented lines) are not folded.\n      if (is_WHITE_SPACE(ch)) {\n        atMoreIndented = true; // except for the first content line (cf. Example 8.1)\n\n        state.result += common.repeat('\\n', didReadContent ? 1 + emptyLines : emptyLines); // End of more-indented block.\n      } else if (atMoreIndented) {\n        atMoreIndented = false;\n        state.result += common.repeat('\\n', emptyLines + 1); // Just one line break - perceive as the same line.\n      } else if (emptyLines === 0) {\n        if (didReadContent) {\n          // i.e. only if we have already read some scalar content.\n          state.result += ' ';\n        } // Several line breaks - perceive as different lines.\n\n      } else {\n        state.result += common.repeat('\\n', emptyLines);\n      } // Literal style: just add exact number of line breaks between content lines.\n\n    } else {\n      // Keep all line breaks except the header line break.\n      state.result += common.repeat('\\n', didReadContent ? 1 + emptyLines : emptyLines);\n    }\n\n    didReadContent = true;\n    detectedIndent = true;\n    emptyLines = 0;\n    captureStart = state.position;\n\n    while (!is_EOL(ch) && ch !== 0) {\n      ch = state.input.charCodeAt(++state.position);\n    }\n\n    captureSegment(state, captureStart, state.position, false);\n  }\n\n  return true;\n}\n\nfunction readBlockSequence(state, nodeIndent) {\n  var _line,\n      _tag = state.tag,\n      _anchor = state.anchor,\n      _result = [],\n      following,\n      detected = false,\n      ch; // there is a leading tab before this token, so it can't be a block sequence/mapping;\n  // it can still be flow sequence/mapping or a scalar\n\n\n  if (state.firstTabInLine !== -1) return false;\n\n  if (state.anchor !== null) {\n    state.anchorMap[state.anchor] = _result;\n  }\n\n  ch = state.input.charCodeAt(state.position);\n\n  while (ch !== 0) {\n    if (state.firstTabInLine !== -1) {\n      state.position = state.firstTabInLine;\n      throwError(state, 'tab characters must not be used in indentation');\n    }\n\n    if (ch !== 0x2D\n    /* - */\n    ) {\n      break;\n    }\n\n    following = state.input.charCodeAt(state.position + 1);\n\n    if (!is_WS_OR_EOL(following)) {\n      break;\n    }\n\n    detected = true;\n    state.position++;\n\n    if (skipSeparationSpace(state, true, -1)) {\n      if (state.lineIndent <= nodeIndent) {\n        _result.push(null);\n\n        ch = state.input.charCodeAt(state.position);\n        continue;\n      }\n    }\n\n    _line = state.line;\n    composeNode(state, nodeIndent, CONTEXT_BLOCK_IN, false, true);\n\n    _result.push(state.result);\n\n    skipSeparationSpace(state, true, -1);\n    ch = state.input.charCodeAt(state.position);\n\n    if ((state.line === _line || state.lineIndent > nodeIndent) && ch !== 0) {\n      throwError(state, 'bad indentation of a sequence entry');\n    } else if (state.lineIndent < nodeIndent) {\n      break;\n    }\n  }\n\n  if (detected) {\n    state.tag = _tag;\n    state.anchor = _anchor;\n    state.kind = 'sequence';\n    state.result = _result;\n    return true;\n  }\n\n  return false;\n}\n\nfunction readBlockMapping(state, nodeIndent, flowIndent) {\n  var following,\n      allowCompact,\n      _line,\n      _keyLine,\n      _keyLineStart,\n      _keyPos,\n      _tag = state.tag,\n      _anchor = state.anchor,\n      _result = {},\n      overridableKeys = Object.create(null),\n      keyTag = null,\n      keyNode = null,\n      valueNode = null,\n      atExplicitKey = false,\n      detected = false,\n      ch; // there is a leading tab before this token, so it can't be a block sequence/mapping;\n  // it can still be flow sequence/mapping or a scalar\n\n\n  if (state.firstTabInLine !== -1) return false;\n\n  if (state.anchor !== null) {\n    state.anchorMap[state.anchor] = _result;\n  }\n\n  ch = state.input.charCodeAt(state.position);\n\n  while (ch !== 0) {\n    if (!atExplicitKey && state.firstTabInLine !== -1) {\n      state.position = state.firstTabInLine;\n      throwError(state, 'tab characters must not be used in indentation');\n    }\n\n    following = state.input.charCodeAt(state.position + 1);\n    _line = state.line; // Save the current line.\n    //\n    // Explicit notation case. There are two separate blocks:\n    // first for the key (denoted by \"?\") and second for the value (denoted by \":\")\n    //\n\n    if ((ch === 0x3F\n    /* ? */\n    || ch === 0x3A\n    /* : */\n    ) && is_WS_OR_EOL(following)) {\n      if (ch === 0x3F\n      /* ? */\n      ) {\n        if (atExplicitKey) {\n          storeMappingPair(state, _result, overridableKeys, keyTag, keyNode, null, _keyLine, _keyLineStart, _keyPos);\n          keyTag = keyNode = valueNode = null;\n        }\n\n        detected = true;\n        atExplicitKey = true;\n        allowCompact = true;\n      } else if (atExplicitKey) {\n        // i.e. 0x3A/* : */ === character after the explicit key.\n        atExplicitKey = false;\n        allowCompact = true;\n      } else {\n        throwError(state, 'incomplete explicit mapping pair; a key node is missed; or followed by a non-tabulated empty line');\n      }\n\n      state.position += 1;\n      ch = following; //\n      // Implicit notation case. Flow-style node as the key first, then \":\", and the value.\n      //\n    } else {\n      _keyLine = state.line;\n      _keyLineStart = state.lineStart;\n      _keyPos = state.position;\n\n      if (!composeNode(state, flowIndent, CONTEXT_FLOW_OUT, false, true)) {\n        // Neither implicit nor explicit notation.\n        // Reading is done. Go to the epilogue.\n        break;\n      }\n\n      if (state.line === _line) {\n        ch = state.input.charCodeAt(state.position);\n\n        while (is_WHITE_SPACE(ch)) {\n          ch = state.input.charCodeAt(++state.position);\n        }\n\n        if (ch === 0x3A\n        /* : */\n        ) {\n          ch = state.input.charCodeAt(++state.position);\n\n          if (!is_WS_OR_EOL(ch)) {\n            throwError(state, 'a whitespace character is expected after the key-value separator within a block mapping');\n          }\n\n          if (atExplicitKey) {\n            storeMappingPair(state, _result, overridableKeys, keyTag, keyNode, null, _keyLine, _keyLineStart, _keyPos);\n            keyTag = keyNode = valueNode = null;\n          }\n\n          detected = true;\n          atExplicitKey = false;\n          allowCompact = false;\n          keyTag = state.tag;\n          keyNode = state.result;\n        } else if (detected) {\n          throwError(state, 'can not read an implicit mapping pair; a colon is missed');\n        } else {\n          state.tag = _tag;\n          state.anchor = _anchor;\n          return true; // Keep the result of `composeNode`.\n        }\n      } else if (detected) {\n        throwError(state, 'can not read a block mapping entry; a multiline key may not be an implicit key');\n      } else {\n        state.tag = _tag;\n        state.anchor = _anchor;\n        return true; // Keep the result of `composeNode`.\n      }\n    } //\n    // Common reading code for both explicit and implicit notations.\n    //\n\n\n    if (state.line === _line || state.lineIndent > nodeIndent) {\n      if (atExplicitKey) {\n        _keyLine = state.line;\n        _keyLineStart = state.lineStart;\n        _keyPos = state.position;\n      }\n\n      if (composeNode(state, nodeIndent, CONTEXT_BLOCK_OUT, true, allowCompact)) {\n        if (atExplicitKey) {\n          keyNode = state.result;\n        } else {\n          valueNode = state.result;\n        }\n      }\n\n      if (!atExplicitKey) {\n        storeMappingPair(state, _result, overridableKeys, keyTag, keyNode, valueNode, _keyLine, _keyLineStart, _keyPos);\n        keyTag = keyNode = valueNode = null;\n      }\n\n      skipSeparationSpace(state, true, -1);\n      ch = state.input.charCodeAt(state.position);\n    }\n\n    if ((state.line === _line || state.lineIndent > nodeIndent) && ch !== 0) {\n      throwError(state, 'bad indentation of a mapping entry');\n    } else if (state.lineIndent < nodeIndent) {\n      break;\n    }\n  } //\n  // Epilogue.\n  //\n  // Special case: last mapping's node contains only the key in explicit notation.\n\n\n  if (atExplicitKey) {\n    storeMappingPair(state, _result, overridableKeys, keyTag, keyNode, null, _keyLine, _keyLineStart, _keyPos);\n  } // Expose the resulting mapping.\n\n\n  if (detected) {\n    state.tag = _tag;\n    state.anchor = _anchor;\n    state.kind = 'mapping';\n    state.result = _result;\n  }\n\n  return detected;\n}\n\nfunction readTagProperty(state) {\n  var _position,\n      isVerbatim = false,\n      isNamed = false,\n      tagHandle,\n      tagName,\n      ch;\n\n  ch = state.input.charCodeAt(state.position);\n  if (ch !== 0x21\n  /* ! */\n  ) return false;\n\n  if (state.tag !== null) {\n    throwError(state, 'duplication of a tag property');\n  }\n\n  ch = state.input.charCodeAt(++state.position);\n\n  if (ch === 0x3C\n  /* < */\n  ) {\n    isVerbatim = true;\n    ch = state.input.charCodeAt(++state.position);\n  } else if (ch === 0x21\n  /* ! */\n  ) {\n    isNamed = true;\n    tagHandle = '!!';\n    ch = state.input.charCodeAt(++state.position);\n  } else {\n    tagHandle = '!';\n  }\n\n  _position = state.position;\n\n  if (isVerbatim) {\n    do {\n      ch = state.input.charCodeAt(++state.position);\n    } while (ch !== 0 && ch !== 0x3E\n    /* > */\n    );\n\n    if (state.position < state.length) {\n      tagName = state.input.slice(_position, state.position);\n      ch = state.input.charCodeAt(++state.position);\n    } else {\n      throwError(state, 'unexpected end of the stream within a verbatim tag');\n    }\n  } else {\n    while (ch !== 0 && !is_WS_OR_EOL(ch)) {\n      if (ch === 0x21\n      /* ! */\n      ) {\n        if (!isNamed) {\n          tagHandle = state.input.slice(_position - 1, state.position + 1);\n\n          if (!PATTERN_TAG_HANDLE.test(tagHandle)) {\n            throwError(state, 'named tag handle cannot contain such characters');\n          }\n\n          isNamed = true;\n          _position = state.position + 1;\n        } else {\n          throwError(state, 'tag suffix cannot contain exclamation marks');\n        }\n      }\n\n      ch = state.input.charCodeAt(++state.position);\n    }\n\n    tagName = state.input.slice(_position, state.position);\n\n    if (PATTERN_FLOW_INDICATORS.test(tagName)) {\n      throwError(state, 'tag suffix cannot contain flow indicator characters');\n    }\n  }\n\n  if (tagName && !PATTERN_TAG_URI.test(tagName)) {\n    throwError(state, 'tag name cannot contain such characters: ' + tagName);\n  }\n\n  try {\n    tagName = decodeURIComponent(tagName);\n  } catch (err) {\n    throwError(state, 'tag name is malformed: ' + tagName);\n  }\n\n  if (isVerbatim) {\n    state.tag = tagName;\n  } else if (_hasOwnProperty.call(state.tagMap, tagHandle)) {\n    state.tag = state.tagMap[tagHandle] + tagName;\n  } else if (tagHandle === '!') {\n    state.tag = '!' + tagName;\n  } else if (tagHandle === '!!') {\n    state.tag = 'tag:yaml.org,2002:' + tagName;\n  } else {\n    throwError(state, 'undeclared tag handle \"' + tagHandle + '\"');\n  }\n\n  return true;\n}\n\nfunction readAnchorProperty(state) {\n  var _position, ch;\n\n  ch = state.input.charCodeAt(state.position);\n  if (ch !== 0x26\n  /* & */\n  ) return false;\n\n  if (state.anchor !== null) {\n    throwError(state, 'duplication of an anchor property');\n  }\n\n  ch = state.input.charCodeAt(++state.position);\n  _position = state.position;\n\n  while (ch !== 0 && !is_WS_OR_EOL(ch) && !is_FLOW_INDICATOR(ch)) {\n    ch = state.input.charCodeAt(++state.position);\n  }\n\n  if (state.position === _position) {\n    throwError(state, 'name of an anchor node must contain at least one character');\n  }\n\n  state.anchor = state.input.slice(_position, state.position);\n  return true;\n}\n\nfunction readAlias(state) {\n  var _position, alias, ch;\n\n  ch = state.input.charCodeAt(state.position);\n  if (ch !== 0x2A\n  /* * */\n  ) return false;\n  ch = state.input.charCodeAt(++state.position);\n  _position = state.position;\n\n  while (ch !== 0 && !is_WS_OR_EOL(ch) && !is_FLOW_INDICATOR(ch)) {\n    ch = state.input.charCodeAt(++state.position);\n  }\n\n  if (state.position === _position) {\n    throwError(state, 'name of an alias node must contain at least one character');\n  }\n\n  alias = state.input.slice(_position, state.position);\n\n  if (!_hasOwnProperty.call(state.anchorMap, alias)) {\n    throwError(state, 'unidentified alias \"' + alias + '\"');\n  }\n\n  state.result = state.anchorMap[alias];\n  skipSeparationSpace(state, true, -1);\n  return true;\n}\n\nfunction composeNode(state, parentIndent, nodeContext, allowToSeek, allowCompact) {\n  var allowBlockStyles,\n      allowBlockScalars,\n      allowBlockCollections,\n      indentStatus = 1,\n      // 1: this>parent, 0: this=parent, -1: this<parent\n  atNewLine = false,\n      hasContent = false,\n      typeIndex,\n      typeQuantity,\n      typeList,\n      type,\n      flowIndent,\n      blockIndent;\n\n  if (state.listener !== null) {\n    state.listener('open', state);\n  }\n\n  state.tag = null;\n  state.anchor = null;\n  state.kind = null;\n  state.result = null;\n  allowBlockStyles = allowBlockScalars = allowBlockCollections = CONTEXT_BLOCK_OUT === nodeContext || CONTEXT_BLOCK_IN === nodeContext;\n\n  if (allowToSeek) {\n    if (skipSeparationSpace(state, true, -1)) {\n      atNewLine = true;\n\n      if (state.lineIndent > parentIndent) {\n        indentStatus = 1;\n      } else if (state.lineIndent === parentIndent) {\n        indentStatus = 0;\n      } else if (state.lineIndent < parentIndent) {\n        indentStatus = -1;\n      }\n    }\n  }\n\n  if (indentStatus === 1) {\n    while (readTagProperty(state) || readAnchorProperty(state)) {\n      if (skipSeparationSpace(state, true, -1)) {\n        atNewLine = true;\n        allowBlockCollections = allowBlockStyles;\n\n        if (state.lineIndent > parentIndent) {\n          indentStatus = 1;\n        } else if (state.lineIndent === parentIndent) {\n          indentStatus = 0;\n        } else if (state.lineIndent < parentIndent) {\n          indentStatus = -1;\n        }\n      } else {\n        allowBlockCollections = false;\n      }\n    }\n  }\n\n  if (allowBlockCollections) {\n    allowBlockCollections = atNewLine || allowCompact;\n  }\n\n  if (indentStatus === 1 || CONTEXT_BLOCK_OUT === nodeContext) {\n    if (CONTEXT_FLOW_IN === nodeContext || CONTEXT_FLOW_OUT === nodeContext) {\n      flowIndent = parentIndent;\n    } else {\n      flowIndent = parentIndent + 1;\n    }\n\n    blockIndent = state.position - state.lineStart;\n\n    if (indentStatus === 1) {\n      if (allowBlockCollections && (readBlockSequence(state, blockIndent) || readBlockMapping(state, blockIndent, flowIndent)) || readFlowCollection(state, flowIndent)) {\n        hasContent = true;\n      } else {\n        if (allowBlockScalars && readBlockScalar(state, flowIndent) || readSingleQuotedScalar(state, flowIndent) || readDoubleQuotedScalar(state, flowIndent)) {\n          hasContent = true;\n        } else if (readAlias(state)) {\n          hasContent = true;\n\n          if (state.tag !== null || state.anchor !== null) {\n            throwError(state, 'alias node should not have any properties');\n          }\n        } else if (readPlainScalar(state, flowIndent, CONTEXT_FLOW_IN === nodeContext)) {\n          hasContent = true;\n\n          if (state.tag === null) {\n            state.tag = '?';\n          }\n        }\n\n        if (state.anchor !== null) {\n          state.anchorMap[state.anchor] = state.result;\n        }\n      }\n    } else if (indentStatus === 0) {\n      // Special case: block sequences are allowed to have same indentation level as the parent.\n      // http://www.yaml.org/spec/1.2/spec.html#id2799784\n      hasContent = allowBlockCollections && readBlockSequence(state, blockIndent);\n    }\n  }\n\n  if (state.tag === null) {\n    if (state.anchor !== null) {\n      state.anchorMap[state.anchor] = state.result;\n    }\n  } else if (state.tag === '?') {\n    // Implicit resolving is not allowed for non-scalar types, and '?'\n    // non-specific tag is only automatically assigned to plain scalars.\n    //\n    // We only need to check kind conformity in case user explicitly assigns '?'\n    // tag, for example like this: \"!<?> [0]\"\n    //\n    if (state.result !== null && state.kind !== 'scalar') {\n      throwError(state, 'unacceptable node kind for !<?> tag; it should be \"scalar\", not \"' + state.kind + '\"');\n    }\n\n    for (typeIndex = 0, typeQuantity = state.implicitTypes.length; typeIndex < typeQuantity; typeIndex += 1) {\n      type = state.implicitTypes[typeIndex];\n\n      if (type.resolve(state.result)) {\n        // `state.result` updated in resolver if matched\n        state.result = type.construct(state.result);\n        state.tag = type.tag;\n\n        if (state.anchor !== null) {\n          state.anchorMap[state.anchor] = state.result;\n        }\n\n        break;\n      }\n    }\n  } else if (state.tag !== '!') {\n    if (_hasOwnProperty.call(state.typeMap[state.kind || 'fallback'], state.tag)) {\n      type = state.typeMap[state.kind || 'fallback'][state.tag];\n    } else {\n      // looking for multi type\n      type = null;\n      typeList = state.typeMap.multi[state.kind || 'fallback'];\n\n      for (typeIndex = 0, typeQuantity = typeList.length; typeIndex < typeQuantity; typeIndex += 1) {\n        if (state.tag.slice(0, typeList[typeIndex].tag.length) === typeList[typeIndex].tag) {\n          type = typeList[typeIndex];\n          break;\n        }\n      }\n    }\n\n    if (!type) {\n      throwError(state, 'unknown tag !<' + state.tag + '>');\n    }\n\n    if (state.result !== null && type.kind !== state.kind) {\n      throwError(state, 'unacceptable node kind for !<' + state.tag + '> tag; it should be \"' + type.kind + '\", not \"' + state.kind + '\"');\n    }\n\n    if (!type.resolve(state.result, state.tag)) {\n      // `state.result` updated in resolver if matched\n      throwError(state, 'cannot resolve a node with !<' + state.tag + '> explicit tag');\n    } else {\n      state.result = type.construct(state.result, state.tag);\n\n      if (state.anchor !== null) {\n        state.anchorMap[state.anchor] = state.result;\n      }\n    }\n  }\n\n  if (state.listener !== null) {\n    state.listener('close', state);\n  }\n\n  return state.tag !== null || state.anchor !== null || hasContent;\n}\n\nfunction readDocument(state) {\n  var documentStart = state.position,\n      _position,\n      directiveName,\n      directiveArgs,\n      hasDirectives = false,\n      ch;\n\n  state.version = null;\n  state.checkLineBreaks = state.legacy;\n  state.tagMap = Object.create(null);\n  state.anchorMap = Object.create(null);\n\n  while ((ch = state.input.charCodeAt(state.position)) !== 0) {\n    skipSeparationSpace(state, true, -1);\n    ch = state.input.charCodeAt(state.position);\n\n    if (state.lineIndent > 0 || ch !== 0x25\n    /* % */\n    ) {\n      break;\n    }\n\n    hasDirectives = true;\n    ch = state.input.charCodeAt(++state.position);\n    _position = state.position;\n\n    while (ch !== 0 && !is_WS_OR_EOL(ch)) {\n      ch = state.input.charCodeAt(++state.position);\n    }\n\n    directiveName = state.input.slice(_position, state.position);\n    directiveArgs = [];\n\n    if (directiveName.length < 1) {\n      throwError(state, 'directive name must not be less than one character in length');\n    }\n\n    while (ch !== 0) {\n      while (is_WHITE_SPACE(ch)) {\n        ch = state.input.charCodeAt(++state.position);\n      }\n\n      if (ch === 0x23\n      /* # */\n      ) {\n        do {\n          ch = state.input.charCodeAt(++state.position);\n        } while (ch !== 0 && !is_EOL(ch));\n\n        break;\n      }\n\n      if (is_EOL(ch)) break;\n      _position = state.position;\n\n      while (ch !== 0 && !is_WS_OR_EOL(ch)) {\n        ch = state.input.charCodeAt(++state.position);\n      }\n\n      directiveArgs.push(state.input.slice(_position, state.position));\n    }\n\n    if (ch !== 0) readLineBreak(state);\n\n    if (_hasOwnProperty.call(directiveHandlers, directiveName)) {\n      directiveHandlers[directiveName](state, directiveName, directiveArgs);\n    } else {\n      throwWarning(state, 'unknown document directive \"' + directiveName + '\"');\n    }\n  }\n\n  skipSeparationSpace(state, true, -1);\n\n  if (state.lineIndent === 0 && state.input.charCodeAt(state.position) === 0x2D\n  /* - */\n  && state.input.charCodeAt(state.position + 1) === 0x2D\n  /* - */\n  && state.input.charCodeAt(state.position + 2) === 0x2D\n  /* - */\n  ) {\n    state.position += 3;\n    skipSeparationSpace(state, true, -1);\n  } else if (hasDirectives) {\n    throwError(state, 'directives end mark is expected');\n  }\n\n  composeNode(state, state.lineIndent - 1, CONTEXT_BLOCK_OUT, false, true);\n  skipSeparationSpace(state, true, -1);\n\n  if (state.checkLineBreaks && PATTERN_NON_ASCII_LINE_BREAKS.test(state.input.slice(documentStart, state.position))) {\n    throwWarning(state, 'non-ASCII line breaks are interpreted as content');\n  }\n\n  state.documents.push(state.result);\n\n  if (state.position === state.lineStart && testDocumentSeparator(state)) {\n    if (state.input.charCodeAt(state.position) === 0x2E\n    /* . */\n    ) {\n      state.position += 3;\n      skipSeparationSpace(state, true, -1);\n    }\n\n    return;\n  }\n\n  if (state.position < state.length - 1) {\n    throwError(state, 'end of the stream or a document separator is expected');\n  } else {\n    return;\n  }\n}\n\nfunction loadDocuments(input, options) {\n  input = String(input);\n  options = options || {};\n\n  if (input.length !== 0) {\n    // Add tailing `\\n` if not exists\n    if (input.charCodeAt(input.length - 1) !== 0x0A\n    /* LF */\n    && input.charCodeAt(input.length - 1) !== 0x0D\n    /* CR */\n    ) {\n      input += '\\n';\n    } // Strip BOM\n\n\n    if (input.charCodeAt(0) === 0xFEFF) {\n      input = input.slice(1);\n    }\n  }\n\n  var state = new State(input, options);\n  var nullpos = input.indexOf('\\0');\n\n  if (nullpos !== -1) {\n    state.position = nullpos;\n    throwError(state, 'null byte is not allowed in input');\n  } // Use 0 as string terminator. That significantly simplifies bounds check.\n\n\n  state.input += '\\0';\n\n  while (state.input.charCodeAt(state.position) === 0x20\n  /* Space */\n  ) {\n    state.lineIndent += 1;\n    state.position += 1;\n  }\n\n  while (state.position < state.length - 1) {\n    readDocument(state);\n  }\n\n  return state.documents;\n}\n\nfunction loadAll(input, iterator, options) {\n  if (iterator !== null && _typeof(iterator) === 'object' && typeof options === 'undefined') {\n    options = iterator;\n    iterator = null;\n  }\n\n  var documents = loadDocuments(input, options);\n\n  if (typeof iterator !== 'function') {\n    return documents;\n  }\n\n  for (var index = 0, length = documents.length; index < length; index += 1) {\n    iterator(documents[index]);\n  }\n}\n\nfunction load(input, options) {\n  var documents = loadDocuments(input, options);\n\n  if (documents.length === 0) {\n    /*eslint-disable no-undefined*/\n    return undefined;\n  } else if (documents.length === 1) {\n    return documents[0];\n  }\n\n  throw new YAMLException('expected a single document in the stream, but found more');\n}\n\nmodule.exports.loadAll = loadAll;\nmodule.exports.load = load;\n\n//# sourceURL=webpack://lai-cmd/./node_modules/js-yaml/lib/loader.js?");

/***/ }),

/***/ "./node_modules/js-yaml/lib/schema.js":
/*!********************************************!*\
  !*** ./node_modules/js-yaml/lib/schema.js ***!
  \********************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("\n/*eslint-disable max-len*/\n\nvar YAMLException = __webpack_require__(/*! ./exception */ \"./node_modules/js-yaml/lib/exception.js\");\n\nvar Type = __webpack_require__(/*! ./type */ \"./node_modules/js-yaml/lib/type.js\");\n\nfunction compileList(schema, name) {\n  var result = [];\n  schema[name].forEach(function (currentType) {\n    var newIndex = result.length;\n    result.forEach(function (previousType, previousIndex) {\n      if (previousType.tag === currentType.tag && previousType.kind === currentType.kind && previousType.multi === currentType.multi) {\n        newIndex = previousIndex;\n      }\n    });\n    result[newIndex] = currentType;\n  });\n  return result;\n}\n\nfunction\n  /* lists... */\ncompileMap() {\n  var result = {\n    scalar: {},\n    sequence: {},\n    mapping: {},\n    fallback: {},\n    multi: {\n      scalar: [],\n      sequence: [],\n      mapping: [],\n      fallback: []\n    }\n  },\n      index,\n      length;\n\n  function collectType(type) {\n    if (type.multi) {\n      result.multi[type.kind].push(type);\n      result.multi['fallback'].push(type);\n    } else {\n      result[type.kind][type.tag] = result['fallback'][type.tag] = type;\n    }\n  }\n\n  for (index = 0, length = arguments.length; index < length; index += 1) {\n    arguments[index].forEach(collectType);\n  }\n\n  return result;\n}\n\nfunction Schema(definition) {\n  return this.extend(definition);\n}\n\nSchema.prototype.extend = function extend(definition) {\n  var implicit = [];\n  var explicit = [];\n\n  if (definition instanceof Type) {\n    // Schema.extend(type)\n    explicit.push(definition);\n  } else if (Array.isArray(definition)) {\n    // Schema.extend([ type1, type2, ... ])\n    explicit = explicit.concat(definition);\n  } else if (definition && (Array.isArray(definition.implicit) || Array.isArray(definition.explicit))) {\n    // Schema.extend({ explicit: [ type1, type2, ... ], implicit: [ type1, type2, ... ] })\n    if (definition.implicit) implicit = implicit.concat(definition.implicit);\n    if (definition.explicit) explicit = explicit.concat(definition.explicit);\n  } else {\n    throw new YAMLException('Schema.extend argument should be a Type, [ Type ], ' + 'or a schema definition ({ implicit: [...], explicit: [...] })');\n  }\n\n  implicit.forEach(function (type) {\n    if (!(type instanceof Type)) {\n      throw new YAMLException('Specified list of YAML types (or a single Type object) contains a non-Type object.');\n    }\n\n    if (type.loadKind && type.loadKind !== 'scalar') {\n      throw new YAMLException('There is a non-scalar type in the implicit list of a schema. Implicit resolving of such types is not supported.');\n    }\n\n    if (type.multi) {\n      throw new YAMLException('There is a multi type in the implicit list of a schema. Multi tags can only be listed as explicit.');\n    }\n  });\n  explicit.forEach(function (type) {\n    if (!(type instanceof Type)) {\n      throw new YAMLException('Specified list of YAML types (or a single Type object) contains a non-Type object.');\n    }\n  });\n  var result = Object.create(Schema.prototype);\n  result.implicit = (this.implicit || []).concat(implicit);\n  result.explicit = (this.explicit || []).concat(explicit);\n  result.compiledImplicit = compileList(result, 'implicit');\n  result.compiledExplicit = compileList(result, 'explicit');\n  result.compiledTypeMap = compileMap(result.compiledImplicit, result.compiledExplicit);\n  return result;\n};\n\nmodule.exports = Schema;\n\n//# sourceURL=webpack://lai-cmd/./node_modules/js-yaml/lib/schema.js?");

/***/ }),

/***/ "./node_modules/js-yaml/lib/schema/core.js":
/*!*************************************************!*\
  !*** ./node_modules/js-yaml/lib/schema/core.js ***!
  \*************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("// Standard YAML's Core schema.\n// http://www.yaml.org/spec/1.2/spec.html#id2804923\n//\n// NOTE: JS-YAML does not support schema-specific tag resolution restrictions.\n// So, Core schema has no distinctions from JSON schema is JS-YAML.\n\n\nmodule.exports = __webpack_require__(/*! ./json */ \"./node_modules/js-yaml/lib/schema/json.js\");\n\n//# sourceURL=webpack://lai-cmd/./node_modules/js-yaml/lib/schema/core.js?");

/***/ }),

/***/ "./node_modules/js-yaml/lib/schema/default.js":
/*!****************************************************!*\
  !*** ./node_modules/js-yaml/lib/schema/default.js ***!
  \****************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("// JS-YAML's default schema for `safeLoad` function.\n// It is not described in the YAML specification.\n//\n// This schema is based on standard YAML's Core schema and includes most of\n// extra types described at YAML tag repository. (http://yaml.org/type/)\n\n\nmodule.exports = (__webpack_require__(/*! ./core */ \"./node_modules/js-yaml/lib/schema/core.js\").extend)({\n  implicit: [__webpack_require__(/*! ../type/timestamp */ \"./node_modules/js-yaml/lib/type/timestamp.js\"), __webpack_require__(/*! ../type/merge */ \"./node_modules/js-yaml/lib/type/merge.js\")],\n  explicit: [__webpack_require__(/*! ../type/binary */ \"./node_modules/js-yaml/lib/type/binary.js\"), __webpack_require__(/*! ../type/omap */ \"./node_modules/js-yaml/lib/type/omap.js\"), __webpack_require__(/*! ../type/pairs */ \"./node_modules/js-yaml/lib/type/pairs.js\"), __webpack_require__(/*! ../type/set */ \"./node_modules/js-yaml/lib/type/set.js\")]\n});\n\n//# sourceURL=webpack://lai-cmd/./node_modules/js-yaml/lib/schema/default.js?");

/***/ }),

/***/ "./node_modules/js-yaml/lib/schema/failsafe.js":
/*!*****************************************************!*\
  !*** ./node_modules/js-yaml/lib/schema/failsafe.js ***!
  \*****************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("// Standard YAML's Failsafe schema.\n// http://www.yaml.org/spec/1.2/spec.html#id2802346\n\n\nvar Schema = __webpack_require__(/*! ../schema */ \"./node_modules/js-yaml/lib/schema.js\");\n\nmodule.exports = new Schema({\n  explicit: [__webpack_require__(/*! ../type/str */ \"./node_modules/js-yaml/lib/type/str.js\"), __webpack_require__(/*! ../type/seq */ \"./node_modules/js-yaml/lib/type/seq.js\"), __webpack_require__(/*! ../type/map */ \"./node_modules/js-yaml/lib/type/map.js\")]\n});\n\n//# sourceURL=webpack://lai-cmd/./node_modules/js-yaml/lib/schema/failsafe.js?");

/***/ }),

/***/ "./node_modules/js-yaml/lib/schema/json.js":
/*!*************************************************!*\
  !*** ./node_modules/js-yaml/lib/schema/json.js ***!
  \*************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("// Standard YAML's JSON schema.\n// http://www.yaml.org/spec/1.2/spec.html#id2803231\n//\n// NOTE: JS-YAML does not support schema-specific tag resolution restrictions.\n// So, this schema is not such strict as defined in the YAML specification.\n// It allows numbers in binary notaion, use `Null` and `NULL` as `null`, etc.\n\n\nmodule.exports = (__webpack_require__(/*! ./failsafe */ \"./node_modules/js-yaml/lib/schema/failsafe.js\").extend)({\n  implicit: [__webpack_require__(/*! ../type/null */ \"./node_modules/js-yaml/lib/type/null.js\"), __webpack_require__(/*! ../type/bool */ \"./node_modules/js-yaml/lib/type/bool.js\"), __webpack_require__(/*! ../type/int */ \"./node_modules/js-yaml/lib/type/int.js\"), __webpack_require__(/*! ../type/float */ \"./node_modules/js-yaml/lib/type/float.js\")]\n});\n\n//# sourceURL=webpack://lai-cmd/./node_modules/js-yaml/lib/schema/json.js?");

/***/ }),

/***/ "./node_modules/js-yaml/lib/snippet.js":
/*!*********************************************!*\
  !*** ./node_modules/js-yaml/lib/snippet.js ***!
  \*********************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("\n\nvar common = __webpack_require__(/*! ./common */ \"./node_modules/js-yaml/lib/common.js\"); // get snippet for a single line, respecting maxLength\n\n\nfunction getLine(buffer, lineStart, lineEnd, position, maxLineLength) {\n  var head = '';\n  var tail = '';\n  var maxHalfLength = Math.floor(maxLineLength / 2) - 1;\n\n  if (position - lineStart > maxHalfLength) {\n    head = ' ... ';\n    lineStart = position - maxHalfLength + head.length;\n  }\n\n  if (lineEnd - position > maxHalfLength) {\n    tail = ' ...';\n    lineEnd = position + maxHalfLength - tail.length;\n  }\n\n  return {\n    str: head + buffer.slice(lineStart, lineEnd).replace(/\\t/g, '→') + tail,\n    pos: position - lineStart + head.length // relative position\n\n  };\n}\n\nfunction padStart(string, max) {\n  return common.repeat(' ', max - string.length) + string;\n}\n\nfunction makeSnippet(mark, options) {\n  options = Object.create(options || null);\n  if (!mark.buffer) return null;\n  if (!options.maxLength) options.maxLength = 79;\n  if (typeof options.indent !== 'number') options.indent = 1;\n  if (typeof options.linesBefore !== 'number') options.linesBefore = 3;\n  if (typeof options.linesAfter !== 'number') options.linesAfter = 2;\n  var re = /\\r?\\n|\\r|\\0/g;\n  var lineStarts = [0];\n  var lineEnds = [];\n  var match;\n  var foundLineNo = -1;\n\n  while (match = re.exec(mark.buffer)) {\n    lineEnds.push(match.index);\n    lineStarts.push(match.index + match[0].length);\n\n    if (mark.position <= match.index && foundLineNo < 0) {\n      foundLineNo = lineStarts.length - 2;\n    }\n  }\n\n  if (foundLineNo < 0) foundLineNo = lineStarts.length - 1;\n  var result = '',\n      i,\n      line;\n  var lineNoLength = Math.min(mark.line + options.linesAfter, lineEnds.length).toString().length;\n  var maxLineLength = options.maxLength - (options.indent + lineNoLength + 3);\n\n  for (i = 1; i <= options.linesBefore; i++) {\n    if (foundLineNo - i < 0) break;\n    line = getLine(mark.buffer, lineStarts[foundLineNo - i], lineEnds[foundLineNo - i], mark.position - (lineStarts[foundLineNo] - lineStarts[foundLineNo - i]), maxLineLength);\n    result = common.repeat(' ', options.indent) + padStart((mark.line - i + 1).toString(), lineNoLength) + ' | ' + line.str + '\\n' + result;\n  }\n\n  line = getLine(mark.buffer, lineStarts[foundLineNo], lineEnds[foundLineNo], mark.position, maxLineLength);\n  result += common.repeat(' ', options.indent) + padStart((mark.line + 1).toString(), lineNoLength) + ' | ' + line.str + '\\n';\n  result += common.repeat('-', options.indent + lineNoLength + 3 + line.pos) + '^' + '\\n';\n\n  for (i = 1; i <= options.linesAfter; i++) {\n    if (foundLineNo + i >= lineEnds.length) break;\n    line = getLine(mark.buffer, lineStarts[foundLineNo + i], lineEnds[foundLineNo + i], mark.position - (lineStarts[foundLineNo] - lineStarts[foundLineNo + i]), maxLineLength);\n    result += common.repeat(' ', options.indent) + padStart((mark.line + i + 1).toString(), lineNoLength) + ' | ' + line.str + '\\n';\n  }\n\n  return result.replace(/\\n$/, '');\n}\n\nmodule.exports = makeSnippet;\n\n//# sourceURL=webpack://lai-cmd/./node_modules/js-yaml/lib/snippet.js?");

/***/ }),

/***/ "./node_modules/js-yaml/lib/type.js":
/*!******************************************!*\
  !*** ./node_modules/js-yaml/lib/type.js ***!
  \******************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("\n\nvar YAMLException = __webpack_require__(/*! ./exception */ \"./node_modules/js-yaml/lib/exception.js\");\n\nvar TYPE_CONSTRUCTOR_OPTIONS = ['kind', 'multi', 'resolve', 'construct', 'instanceOf', 'predicate', 'represent', 'representName', 'defaultStyle', 'styleAliases'];\nvar YAML_NODE_KINDS = ['scalar', 'sequence', 'mapping'];\n\nfunction compileStyleAliases(map) {\n  var result = {};\n\n  if (map !== null) {\n    Object.keys(map).forEach(function (style) {\n      map[style].forEach(function (alias) {\n        result[String(alias)] = style;\n      });\n    });\n  }\n\n  return result;\n}\n\nfunction Type(tag, options) {\n  options = options || {};\n  Object.keys(options).forEach(function (name) {\n    if (TYPE_CONSTRUCTOR_OPTIONS.indexOf(name) === -1) {\n      throw new YAMLException('Unknown option \"' + name + '\" is met in definition of \"' + tag + '\" YAML type.');\n    }\n  }); // TODO: Add tag format check.\n\n  this.options = options; // keep original options in case user wants to extend this type later\n\n  this.tag = tag;\n  this.kind = options['kind'] || null;\n\n  this.resolve = options['resolve'] || function () {\n    return true;\n  };\n\n  this.construct = options['construct'] || function (data) {\n    return data;\n  };\n\n  this.instanceOf = options['instanceOf'] || null;\n  this.predicate = options['predicate'] || null;\n  this.represent = options['represent'] || null;\n  this.representName = options['representName'] || null;\n  this.defaultStyle = options['defaultStyle'] || null;\n  this.multi = options['multi'] || false;\n  this.styleAliases = compileStyleAliases(options['styleAliases'] || null);\n\n  if (YAML_NODE_KINDS.indexOf(this.kind) === -1) {\n    throw new YAMLException('Unknown kind \"' + this.kind + '\" is specified for \"' + tag + '\" YAML type.');\n  }\n}\n\nmodule.exports = Type;\n\n//# sourceURL=webpack://lai-cmd/./node_modules/js-yaml/lib/type.js?");

/***/ }),

/***/ "./node_modules/js-yaml/lib/type/binary.js":
/*!*************************************************!*\
  !*** ./node_modules/js-yaml/lib/type/binary.js ***!
  \*************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("\n/*eslint-disable no-bitwise*/\n\nvar Type = __webpack_require__(/*! ../type */ \"./node_modules/js-yaml/lib/type.js\"); // [ 64, 65, 66 ] -> [ padding, CR, LF ]\n\n\nvar BASE64_MAP = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=\\n\\r';\n\nfunction resolveYamlBinary(data) {\n  if (data === null) return false;\n  var code,\n      idx,\n      bitlen = 0,\n      max = data.length,\n      map = BASE64_MAP; // Convert one by one.\n\n  for (idx = 0; idx < max; idx++) {\n    code = map.indexOf(data.charAt(idx)); // Skip CR/LF\n\n    if (code > 64) continue; // Fail on illegal characters\n\n    if (code < 0) return false;\n    bitlen += 6;\n  } // If there are any bits left, source was corrupted\n\n\n  return bitlen % 8 === 0;\n}\n\nfunction constructYamlBinary(data) {\n  var idx,\n      tailbits,\n      input = data.replace(/[\\r\\n=]/g, ''),\n      // remove CR/LF & padding to simplify scan\n  max = input.length,\n      map = BASE64_MAP,\n      bits = 0,\n      result = []; // Collect by 6*4 bits (3 bytes)\n\n  for (idx = 0; idx < max; idx++) {\n    if (idx % 4 === 0 && idx) {\n      result.push(bits >> 16 & 0xFF);\n      result.push(bits >> 8 & 0xFF);\n      result.push(bits & 0xFF);\n    }\n\n    bits = bits << 6 | map.indexOf(input.charAt(idx));\n  } // Dump tail\n\n\n  tailbits = max % 4 * 6;\n\n  if (tailbits === 0) {\n    result.push(bits >> 16 & 0xFF);\n    result.push(bits >> 8 & 0xFF);\n    result.push(bits & 0xFF);\n  } else if (tailbits === 18) {\n    result.push(bits >> 10 & 0xFF);\n    result.push(bits >> 2 & 0xFF);\n  } else if (tailbits === 12) {\n    result.push(bits >> 4 & 0xFF);\n  }\n\n  return new Uint8Array(result);\n}\n\nfunction representYamlBinary(object\n/*, style*/\n) {\n  var result = '',\n      bits = 0,\n      idx,\n      tail,\n      max = object.length,\n      map = BASE64_MAP; // Convert every three bytes to 4 ASCII characters.\n\n  for (idx = 0; idx < max; idx++) {\n    if (idx % 3 === 0 && idx) {\n      result += map[bits >> 18 & 0x3F];\n      result += map[bits >> 12 & 0x3F];\n      result += map[bits >> 6 & 0x3F];\n      result += map[bits & 0x3F];\n    }\n\n    bits = (bits << 8) + object[idx];\n  } // Dump tail\n\n\n  tail = max % 3;\n\n  if (tail === 0) {\n    result += map[bits >> 18 & 0x3F];\n    result += map[bits >> 12 & 0x3F];\n    result += map[bits >> 6 & 0x3F];\n    result += map[bits & 0x3F];\n  } else if (tail === 2) {\n    result += map[bits >> 10 & 0x3F];\n    result += map[bits >> 4 & 0x3F];\n    result += map[bits << 2 & 0x3F];\n    result += map[64];\n  } else if (tail === 1) {\n    result += map[bits >> 2 & 0x3F];\n    result += map[bits << 4 & 0x3F];\n    result += map[64];\n    result += map[64];\n  }\n\n  return result;\n}\n\nfunction isBinary(obj) {\n  return Object.prototype.toString.call(obj) === '[object Uint8Array]';\n}\n\nmodule.exports = new Type('tag:yaml.org,2002:binary', {\n  kind: 'scalar',\n  resolve: resolveYamlBinary,\n  construct: constructYamlBinary,\n  predicate: isBinary,\n  represent: representYamlBinary\n});\n\n//# sourceURL=webpack://lai-cmd/./node_modules/js-yaml/lib/type/binary.js?");

/***/ }),

/***/ "./node_modules/js-yaml/lib/type/bool.js":
/*!***********************************************!*\
  !*** ./node_modules/js-yaml/lib/type/bool.js ***!
  \***********************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("\n\nvar Type = __webpack_require__(/*! ../type */ \"./node_modules/js-yaml/lib/type.js\");\n\nfunction resolveYamlBoolean(data) {\n  if (data === null) return false;\n  var max = data.length;\n  return max === 4 && (data === 'true' || data === 'True' || data === 'TRUE') || max === 5 && (data === 'false' || data === 'False' || data === 'FALSE');\n}\n\nfunction constructYamlBoolean(data) {\n  return data === 'true' || data === 'True' || data === 'TRUE';\n}\n\nfunction isBoolean(object) {\n  return Object.prototype.toString.call(object) === '[object Boolean]';\n}\n\nmodule.exports = new Type('tag:yaml.org,2002:bool', {\n  kind: 'scalar',\n  resolve: resolveYamlBoolean,\n  construct: constructYamlBoolean,\n  predicate: isBoolean,\n  represent: {\n    lowercase: function lowercase(object) {\n      return object ? 'true' : 'false';\n    },\n    uppercase: function uppercase(object) {\n      return object ? 'TRUE' : 'FALSE';\n    },\n    camelcase: function camelcase(object) {\n      return object ? 'True' : 'False';\n    }\n  },\n  defaultStyle: 'lowercase'\n});\n\n//# sourceURL=webpack://lai-cmd/./node_modules/js-yaml/lib/type/bool.js?");

/***/ }),

/***/ "./node_modules/js-yaml/lib/type/float.js":
/*!************************************************!*\
  !*** ./node_modules/js-yaml/lib/type/float.js ***!
  \************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("\n\nvar common = __webpack_require__(/*! ../common */ \"./node_modules/js-yaml/lib/common.js\");\n\nvar Type = __webpack_require__(/*! ../type */ \"./node_modules/js-yaml/lib/type.js\");\n\nvar YAML_FLOAT_PATTERN = new RegExp( // 2.5e4, 2.5 and integers\n'^(?:[-+]?(?:[0-9][0-9_]*)(?:\\\\.[0-9_]*)?(?:[eE][-+]?[0-9]+)?' + // .2e4, .2\n// special case, seems not from spec\n'|\\\\.[0-9_]+(?:[eE][-+]?[0-9]+)?' + // .inf\n'|[-+]?\\\\.(?:inf|Inf|INF)' + // .nan\n'|\\\\.(?:nan|NaN|NAN))$');\n\nfunction resolveYamlFloat(data) {\n  if (data === null) return false;\n\n  if (!YAML_FLOAT_PATTERN.test(data) || // Quick hack to not allow integers end with `_`\n  // Probably should update regexp & check speed\n  data[data.length - 1] === '_') {\n    return false;\n  }\n\n  return true;\n}\n\nfunction constructYamlFloat(data) {\n  var value, sign;\n  value = data.replace(/_/g, '').toLowerCase();\n  sign = value[0] === '-' ? -1 : 1;\n\n  if ('+-'.indexOf(value[0]) >= 0) {\n    value = value.slice(1);\n  }\n\n  if (value === '.inf') {\n    return sign === 1 ? Number.POSITIVE_INFINITY : Number.NEGATIVE_INFINITY;\n  } else if (value === '.nan') {\n    return NaN;\n  }\n\n  return sign * parseFloat(value, 10);\n}\n\nvar SCIENTIFIC_WITHOUT_DOT = /^[-+]?[0-9]+e/;\n\nfunction representYamlFloat(object, style) {\n  var res;\n\n  if (isNaN(object)) {\n    switch (style) {\n      case 'lowercase':\n        return '.nan';\n\n      case 'uppercase':\n        return '.NAN';\n\n      case 'camelcase':\n        return '.NaN';\n    }\n  } else if (Number.POSITIVE_INFINITY === object) {\n    switch (style) {\n      case 'lowercase':\n        return '.inf';\n\n      case 'uppercase':\n        return '.INF';\n\n      case 'camelcase':\n        return '.Inf';\n    }\n  } else if (Number.NEGATIVE_INFINITY === object) {\n    switch (style) {\n      case 'lowercase':\n        return '-.inf';\n\n      case 'uppercase':\n        return '-.INF';\n\n      case 'camelcase':\n        return '-.Inf';\n    }\n  } else if (common.isNegativeZero(object)) {\n    return '-0.0';\n  }\n\n  res = object.toString(10); // JS stringifier can build scientific format without dots: 5e-100,\n  // while YAML requres dot: 5.e-100. Fix it with simple hack\n\n  return SCIENTIFIC_WITHOUT_DOT.test(res) ? res.replace('e', '.e') : res;\n}\n\nfunction isFloat(object) {\n  return Object.prototype.toString.call(object) === '[object Number]' && (object % 1 !== 0 || common.isNegativeZero(object));\n}\n\nmodule.exports = new Type('tag:yaml.org,2002:float', {\n  kind: 'scalar',\n  resolve: resolveYamlFloat,\n  construct: constructYamlFloat,\n  predicate: isFloat,\n  represent: representYamlFloat,\n  defaultStyle: 'lowercase'\n});\n\n//# sourceURL=webpack://lai-cmd/./node_modules/js-yaml/lib/type/float.js?");

/***/ }),

/***/ "./node_modules/js-yaml/lib/type/int.js":
/*!**********************************************!*\
  !*** ./node_modules/js-yaml/lib/type/int.js ***!
  \**********************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("\n\nvar common = __webpack_require__(/*! ../common */ \"./node_modules/js-yaml/lib/common.js\");\n\nvar Type = __webpack_require__(/*! ../type */ \"./node_modules/js-yaml/lib/type.js\");\n\nfunction isHexCode(c) {\n  return 0x30\n  /* 0 */\n  <= c && c <= 0x39\n  /* 9 */\n  || 0x41\n  /* A */\n  <= c && c <= 0x46\n  /* F */\n  || 0x61\n  /* a */\n  <= c && c <= 0x66\n  /* f */\n  ;\n}\n\nfunction isOctCode(c) {\n  return 0x30\n  /* 0 */\n  <= c && c <= 0x37\n  /* 7 */\n  ;\n}\n\nfunction isDecCode(c) {\n  return 0x30\n  /* 0 */\n  <= c && c <= 0x39\n  /* 9 */\n  ;\n}\n\nfunction resolveYamlInteger(data) {\n  if (data === null) return false;\n  var max = data.length,\n      index = 0,\n      hasDigits = false,\n      ch;\n  if (!max) return false;\n  ch = data[index]; // sign\n\n  if (ch === '-' || ch === '+') {\n    ch = data[++index];\n  }\n\n  if (ch === '0') {\n    // 0\n    if (index + 1 === max) return true;\n    ch = data[++index]; // base 2, base 8, base 16\n\n    if (ch === 'b') {\n      // base 2\n      index++;\n\n      for (; index < max; index++) {\n        ch = data[index];\n        if (ch === '_') continue;\n        if (ch !== '0' && ch !== '1') return false;\n        hasDigits = true;\n      }\n\n      return hasDigits && ch !== '_';\n    }\n\n    if (ch === 'x') {\n      // base 16\n      index++;\n\n      for (; index < max; index++) {\n        ch = data[index];\n        if (ch === '_') continue;\n        if (!isHexCode(data.charCodeAt(index))) return false;\n        hasDigits = true;\n      }\n\n      return hasDigits && ch !== '_';\n    }\n\n    if (ch === 'o') {\n      // base 8\n      index++;\n\n      for (; index < max; index++) {\n        ch = data[index];\n        if (ch === '_') continue;\n        if (!isOctCode(data.charCodeAt(index))) return false;\n        hasDigits = true;\n      }\n\n      return hasDigits && ch !== '_';\n    }\n  } // base 10 (except 0)\n  // value should not start with `_`;\n\n\n  if (ch === '_') return false;\n\n  for (; index < max; index++) {\n    ch = data[index];\n    if (ch === '_') continue;\n\n    if (!isDecCode(data.charCodeAt(index))) {\n      return false;\n    }\n\n    hasDigits = true;\n  } // Should have digits and should not end with `_`\n\n\n  if (!hasDigits || ch === '_') return false;\n  return true;\n}\n\nfunction constructYamlInteger(data) {\n  var value = data,\n      sign = 1,\n      ch;\n\n  if (value.indexOf('_') !== -1) {\n    value = value.replace(/_/g, '');\n  }\n\n  ch = value[0];\n\n  if (ch === '-' || ch === '+') {\n    if (ch === '-') sign = -1;\n    value = value.slice(1);\n    ch = value[0];\n  }\n\n  if (value === '0') return 0;\n\n  if (ch === '0') {\n    if (value[1] === 'b') return sign * parseInt(value.slice(2), 2);\n    if (value[1] === 'x') return sign * parseInt(value.slice(2), 16);\n    if (value[1] === 'o') return sign * parseInt(value.slice(2), 8);\n  }\n\n  return sign * parseInt(value, 10);\n}\n\nfunction isInteger(object) {\n  return Object.prototype.toString.call(object) === '[object Number]' && object % 1 === 0 && !common.isNegativeZero(object);\n}\n\nmodule.exports = new Type('tag:yaml.org,2002:int', {\n  kind: 'scalar',\n  resolve: resolveYamlInteger,\n  construct: constructYamlInteger,\n  predicate: isInteger,\n  represent: {\n    binary: function binary(obj) {\n      return obj >= 0 ? '0b' + obj.toString(2) : '-0b' + obj.toString(2).slice(1);\n    },\n    octal: function octal(obj) {\n      return obj >= 0 ? '0o' + obj.toString(8) : '-0o' + obj.toString(8).slice(1);\n    },\n    decimal: function decimal(obj) {\n      return obj.toString(10);\n    },\n\n    /* eslint-disable max-len */\n    hexadecimal: function hexadecimal(obj) {\n      return obj >= 0 ? '0x' + obj.toString(16).toUpperCase() : '-0x' + obj.toString(16).toUpperCase().slice(1);\n    }\n  },\n  defaultStyle: 'decimal',\n  styleAliases: {\n    binary: [2, 'bin'],\n    octal: [8, 'oct'],\n    decimal: [10, 'dec'],\n    hexadecimal: [16, 'hex']\n  }\n});\n\n//# sourceURL=webpack://lai-cmd/./node_modules/js-yaml/lib/type/int.js?");

/***/ }),

/***/ "./node_modules/js-yaml/lib/type/map.js":
/*!**********************************************!*\
  !*** ./node_modules/js-yaml/lib/type/map.js ***!
  \**********************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("\n\nvar Type = __webpack_require__(/*! ../type */ \"./node_modules/js-yaml/lib/type.js\");\n\nmodule.exports = new Type('tag:yaml.org,2002:map', {\n  kind: 'mapping',\n  construct: function construct(data) {\n    return data !== null ? data : {};\n  }\n});\n\n//# sourceURL=webpack://lai-cmd/./node_modules/js-yaml/lib/type/map.js?");

/***/ }),

/***/ "./node_modules/js-yaml/lib/type/merge.js":
/*!************************************************!*\
  !*** ./node_modules/js-yaml/lib/type/merge.js ***!
  \************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("\n\nvar Type = __webpack_require__(/*! ../type */ \"./node_modules/js-yaml/lib/type.js\");\n\nfunction resolveYamlMerge(data) {\n  return data === '<<' || data === null;\n}\n\nmodule.exports = new Type('tag:yaml.org,2002:merge', {\n  kind: 'scalar',\n  resolve: resolveYamlMerge\n});\n\n//# sourceURL=webpack://lai-cmd/./node_modules/js-yaml/lib/type/merge.js?");

/***/ }),

/***/ "./node_modules/js-yaml/lib/type/null.js":
/*!***********************************************!*\
  !*** ./node_modules/js-yaml/lib/type/null.js ***!
  \***********************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("\n\nvar Type = __webpack_require__(/*! ../type */ \"./node_modules/js-yaml/lib/type.js\");\n\nfunction resolveYamlNull(data) {\n  if (data === null) return true;\n  var max = data.length;\n  return max === 1 && data === '~' || max === 4 && (data === 'null' || data === 'Null' || data === 'NULL');\n}\n\nfunction constructYamlNull() {\n  return null;\n}\n\nfunction isNull(object) {\n  return object === null;\n}\n\nmodule.exports = new Type('tag:yaml.org,2002:null', {\n  kind: 'scalar',\n  resolve: resolveYamlNull,\n  construct: constructYamlNull,\n  predicate: isNull,\n  represent: {\n    canonical: function canonical() {\n      return '~';\n    },\n    lowercase: function lowercase() {\n      return 'null';\n    },\n    uppercase: function uppercase() {\n      return 'NULL';\n    },\n    camelcase: function camelcase() {\n      return 'Null';\n    },\n    empty: function empty() {\n      return '';\n    }\n  },\n  defaultStyle: 'lowercase'\n});\n\n//# sourceURL=webpack://lai-cmd/./node_modules/js-yaml/lib/type/null.js?");

/***/ }),

/***/ "./node_modules/js-yaml/lib/type/omap.js":
/*!***********************************************!*\
  !*** ./node_modules/js-yaml/lib/type/omap.js ***!
  \***********************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("\n\nvar Type = __webpack_require__(/*! ../type */ \"./node_modules/js-yaml/lib/type.js\");\n\nvar _hasOwnProperty = Object.prototype.hasOwnProperty;\nvar _toString = Object.prototype.toString;\n\nfunction resolveYamlOmap(data) {\n  if (data === null) return true;\n  var objectKeys = [],\n      index,\n      length,\n      pair,\n      pairKey,\n      pairHasKey,\n      object = data;\n\n  for (index = 0, length = object.length; index < length; index += 1) {\n    pair = object[index];\n    pairHasKey = false;\n    if (_toString.call(pair) !== '[object Object]') return false;\n\n    for (pairKey in pair) {\n      if (_hasOwnProperty.call(pair, pairKey)) {\n        if (!pairHasKey) pairHasKey = true;else return false;\n      }\n    }\n\n    if (!pairHasKey) return false;\n    if (objectKeys.indexOf(pairKey) === -1) objectKeys.push(pairKey);else return false;\n  }\n\n  return true;\n}\n\nfunction constructYamlOmap(data) {\n  return data !== null ? data : [];\n}\n\nmodule.exports = new Type('tag:yaml.org,2002:omap', {\n  kind: 'sequence',\n  resolve: resolveYamlOmap,\n  construct: constructYamlOmap\n});\n\n//# sourceURL=webpack://lai-cmd/./node_modules/js-yaml/lib/type/omap.js?");

/***/ }),

/***/ "./node_modules/js-yaml/lib/type/pairs.js":
/*!************************************************!*\
  !*** ./node_modules/js-yaml/lib/type/pairs.js ***!
  \************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("\n\nvar Type = __webpack_require__(/*! ../type */ \"./node_modules/js-yaml/lib/type.js\");\n\nvar _toString = Object.prototype.toString;\n\nfunction resolveYamlPairs(data) {\n  if (data === null) return true;\n  var index,\n      length,\n      pair,\n      keys,\n      result,\n      object = data;\n  result = new Array(object.length);\n\n  for (index = 0, length = object.length; index < length; index += 1) {\n    pair = object[index];\n    if (_toString.call(pair) !== '[object Object]') return false;\n    keys = Object.keys(pair);\n    if (keys.length !== 1) return false;\n    result[index] = [keys[0], pair[keys[0]]];\n  }\n\n  return true;\n}\n\nfunction constructYamlPairs(data) {\n  if (data === null) return [];\n  var index,\n      length,\n      pair,\n      keys,\n      result,\n      object = data;\n  result = new Array(object.length);\n\n  for (index = 0, length = object.length; index < length; index += 1) {\n    pair = object[index];\n    keys = Object.keys(pair);\n    result[index] = [keys[0], pair[keys[0]]];\n  }\n\n  return result;\n}\n\nmodule.exports = new Type('tag:yaml.org,2002:pairs', {\n  kind: 'sequence',\n  resolve: resolveYamlPairs,\n  construct: constructYamlPairs\n});\n\n//# sourceURL=webpack://lai-cmd/./node_modules/js-yaml/lib/type/pairs.js?");

/***/ }),

/***/ "./node_modules/js-yaml/lib/type/seq.js":
/*!**********************************************!*\
  !*** ./node_modules/js-yaml/lib/type/seq.js ***!
  \**********************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("\n\nvar Type = __webpack_require__(/*! ../type */ \"./node_modules/js-yaml/lib/type.js\");\n\nmodule.exports = new Type('tag:yaml.org,2002:seq', {\n  kind: 'sequence',\n  construct: function construct(data) {\n    return data !== null ? data : [];\n  }\n});\n\n//# sourceURL=webpack://lai-cmd/./node_modules/js-yaml/lib/type/seq.js?");

/***/ }),

/***/ "./node_modules/js-yaml/lib/type/set.js":
/*!**********************************************!*\
  !*** ./node_modules/js-yaml/lib/type/set.js ***!
  \**********************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("\n\nvar Type = __webpack_require__(/*! ../type */ \"./node_modules/js-yaml/lib/type.js\");\n\nvar _hasOwnProperty = Object.prototype.hasOwnProperty;\n\nfunction resolveYamlSet(data) {\n  if (data === null) return true;\n  var key,\n      object = data;\n\n  for (key in object) {\n    if (_hasOwnProperty.call(object, key)) {\n      if (object[key] !== null) return false;\n    }\n  }\n\n  return true;\n}\n\nfunction constructYamlSet(data) {\n  return data !== null ? data : {};\n}\n\nmodule.exports = new Type('tag:yaml.org,2002:set', {\n  kind: 'mapping',\n  resolve: resolveYamlSet,\n  construct: constructYamlSet\n});\n\n//# sourceURL=webpack://lai-cmd/./node_modules/js-yaml/lib/type/set.js?");

/***/ }),

/***/ "./node_modules/js-yaml/lib/type/str.js":
/*!**********************************************!*\
  !*** ./node_modules/js-yaml/lib/type/str.js ***!
  \**********************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("\n\nvar Type = __webpack_require__(/*! ../type */ \"./node_modules/js-yaml/lib/type.js\");\n\nmodule.exports = new Type('tag:yaml.org,2002:str', {\n  kind: 'scalar',\n  construct: function construct(data) {\n    return data !== null ? data : '';\n  }\n});\n\n//# sourceURL=webpack://lai-cmd/./node_modules/js-yaml/lib/type/str.js?");

/***/ }),

/***/ "./node_modules/js-yaml/lib/type/timestamp.js":
/*!****************************************************!*\
  !*** ./node_modules/js-yaml/lib/type/timestamp.js ***!
  \****************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("\n\nvar Type = __webpack_require__(/*! ../type */ \"./node_modules/js-yaml/lib/type.js\");\n\nvar YAML_DATE_REGEXP = new RegExp('^([0-9][0-9][0-9][0-9])' + // [1] year\n'-([0-9][0-9])' + // [2] month\n'-([0-9][0-9])$'); // [3] day\n\nvar YAML_TIMESTAMP_REGEXP = new RegExp('^([0-9][0-9][0-9][0-9])' + // [1] year\n'-([0-9][0-9]?)' + // [2] month\n'-([0-9][0-9]?)' + // [3] day\n'(?:[Tt]|[ \\\\t]+)' + // ...\n'([0-9][0-9]?)' + // [4] hour\n':([0-9][0-9])' + // [5] minute\n':([0-9][0-9])' + // [6] second\n'(?:\\\\.([0-9]*))?' + // [7] fraction\n'(?:[ \\\\t]*(Z|([-+])([0-9][0-9]?)' + // [8] tz [9] tz_sign [10] tz_hour\n'(?::([0-9][0-9]))?))?$'); // [11] tz_minute\n\nfunction resolveYamlTimestamp(data) {\n  if (data === null) return false;\n  if (YAML_DATE_REGEXP.exec(data) !== null) return true;\n  if (YAML_TIMESTAMP_REGEXP.exec(data) !== null) return true;\n  return false;\n}\n\nfunction constructYamlTimestamp(data) {\n  var match,\n      year,\n      month,\n      day,\n      hour,\n      minute,\n      second,\n      fraction = 0,\n      delta = null,\n      tz_hour,\n      tz_minute,\n      date;\n  match = YAML_DATE_REGEXP.exec(data);\n  if (match === null) match = YAML_TIMESTAMP_REGEXP.exec(data);\n  if (match === null) throw new Error('Date resolve error'); // match: [1] year [2] month [3] day\n\n  year = +match[1];\n  month = +match[2] - 1; // JS month starts with 0\n\n  day = +match[3];\n\n  if (!match[4]) {\n    // no hour\n    return new Date(Date.UTC(year, month, day));\n  } // match: [4] hour [5] minute [6] second [7] fraction\n\n\n  hour = +match[4];\n  minute = +match[5];\n  second = +match[6];\n\n  if (match[7]) {\n    fraction = match[7].slice(0, 3);\n\n    while (fraction.length < 3) {\n      // milli-seconds\n      fraction += '0';\n    }\n\n    fraction = +fraction;\n  } // match: [8] tz [9] tz_sign [10] tz_hour [11] tz_minute\n\n\n  if (match[9]) {\n    tz_hour = +match[10];\n    tz_minute = +(match[11] || 0);\n    delta = (tz_hour * 60 + tz_minute) * 60000; // delta in mili-seconds\n\n    if (match[9] === '-') delta = -delta;\n  }\n\n  date = new Date(Date.UTC(year, month, day, hour, minute, second, fraction));\n  if (delta) date.setTime(date.getTime() - delta);\n  return date;\n}\n\nfunction representYamlTimestamp(object\n/*, style*/\n) {\n  return object.toISOString();\n}\n\nmodule.exports = new Type('tag:yaml.org,2002:timestamp', {\n  kind: 'scalar',\n  resolve: resolveYamlTimestamp,\n  construct: constructYamlTimestamp,\n  instanceOf: Date,\n  represent: representYamlTimestamp\n});\n\n//# sourceURL=webpack://lai-cmd/./node_modules/js-yaml/lib/type/timestamp.js?");

/***/ }),

/***/ "./node_modules/mute-stream/mute.js":
/*!******************************************!*\
  !*** ./node_modules/mute-stream/mute.js ***!
  \******************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("var Stream = __webpack_require__(/*! stream */ \"stream\");\n\nmodule.exports = MuteStream; // var out = new MuteStream(process.stdout)\n// argument auto-pipes\n\nfunction MuteStream(opts) {\n  Stream.apply(this);\n  opts = opts || {};\n  this.writable = this.readable = true;\n  this.muted = false;\n  this.on('pipe', this._onpipe);\n  this.replace = opts.replace; // For readline-type situations\n  // This much at the start of a line being redrawn after a ctrl char\n  // is seen (such as backspace) won't be redrawn as the replacement\n\n  this._prompt = opts.prompt || null;\n  this._hadControl = false;\n}\n\nMuteStream.prototype = Object.create(Stream.prototype);\nObject.defineProperty(MuteStream.prototype, 'constructor', {\n  value: MuteStream,\n  enumerable: false\n});\n\nMuteStream.prototype.mute = function () {\n  this.muted = true;\n};\n\nMuteStream.prototype.unmute = function () {\n  this.muted = false;\n};\n\nObject.defineProperty(MuteStream.prototype, '_onpipe', {\n  value: onPipe,\n  enumerable: false,\n  writable: true,\n  configurable: true\n});\n\nfunction onPipe(src) {\n  this._src = src;\n}\n\nObject.defineProperty(MuteStream.prototype, 'isTTY', {\n  get: getIsTTY,\n  set: setIsTTY,\n  enumerable: true,\n  configurable: true\n});\n\nfunction getIsTTY() {\n  return this._dest ? this._dest.isTTY : this._src ? this._src.isTTY : false;\n} // basically just get replace the getter/setter with a regular value\n\n\nfunction setIsTTY(isTTY) {\n  Object.defineProperty(this, 'isTTY', {\n    value: isTTY,\n    enumerable: true,\n    writable: true,\n    configurable: true\n  });\n}\n\nObject.defineProperty(MuteStream.prototype, 'rows', {\n  get: function get() {\n    return this._dest ? this._dest.rows : this._src ? this._src.rows : undefined;\n  },\n  enumerable: true,\n  configurable: true\n});\nObject.defineProperty(MuteStream.prototype, 'columns', {\n  get: function get() {\n    return this._dest ? this._dest.columns : this._src ? this._src.columns : undefined;\n  },\n  enumerable: true,\n  configurable: true\n});\n\nMuteStream.prototype.pipe = function (dest, options) {\n  this._dest = dest;\n  return Stream.prototype.pipe.call(this, dest, options);\n};\n\nMuteStream.prototype.pause = function () {\n  if (this._src) return this._src.pause();\n};\n\nMuteStream.prototype.resume = function () {\n  if (this._src) return this._src.resume();\n};\n\nMuteStream.prototype.write = function (c) {\n  if (this.muted) {\n    if (!this.replace) return true;\n\n    if (c.match(/^\\u001b/)) {\n      if (c.indexOf(this._prompt) === 0) {\n        c = c.substr(this._prompt.length);\n        c = c.replace(/./g, this.replace);\n        c = this._prompt + c;\n      }\n\n      this._hadControl = true;\n      return this.emit('data', c);\n    } else {\n      if (this._prompt && this._hadControl && c.indexOf(this._prompt) === 0) {\n        this._hadControl = false;\n        this.emit('data', this._prompt);\n        c = c.substr(this._prompt.length);\n      }\n\n      c = c.toString().replace(/./g, this.replace);\n    }\n  }\n\n  this.emit('data', c);\n};\n\nMuteStream.prototype.end = function (c) {\n  if (this.muted) {\n    if (c && this.replace) {\n      c = c.toString().replace(/./g, this.replace);\n    } else {\n      c = null;\n    }\n  }\n\n  if (c) this.emit('data', c);\n  this.emit('end');\n};\n\nfunction proxy(fn) {\n  return function () {\n    var d = this._dest;\n    var s = this._src;\n    if (d && d[fn]) d[fn].apply(d, arguments);\n    if (s && s[fn]) s[fn].apply(s, arguments);\n  };\n}\n\nMuteStream.prototype.destroy = proxy('destroy');\nMuteStream.prototype.destroySoon = proxy('destroySoon');\nMuteStream.prototype.close = proxy('close');\n\n//# sourceURL=webpack://lai-cmd/./node_modules/mute-stream/mute.js?");

/***/ }),

/***/ "./node_modules/promptly/index.js":
/*!****************************************!*\
  !*** ./node_modules/promptly/index.js ***!
  \****************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nvar prompt = __webpack_require__(/*! ./lib/prompt */ \"./node_modules/promptly/lib/prompt.js\");\n\nvar getOptions = __webpack_require__(/*! ./lib/getOptions */ \"./node_modules/promptly/lib/getOptions.js\");\n\nvar promptly = module.exports;\n\npromptly.prompt = function (message, options) {\n  options = getOptions(options);\n  return prompt(message, options);\n};\n\npromptly.password = function (message, options) {\n  options = getOptions(_objectSpread({\n    silent: true,\n    // Hide password chars\n    trim: false,\n    // Do not trim so that spaces can be part of the password\n    \"default\": ''\n  }, options));\n  return prompt(message, options);\n};\n\npromptly.confirm = function (message, options) {\n  options = getOptions(_objectSpread({\n    trim: false\n  }, options)); // Unshift the validator that will coerse boolean values\n\n  options.validator.unshift(function (value) {\n    value = value.toLowerCase();\n\n    switch (value) {\n      case 'y':\n      case 'yes':\n      case '1':\n        return true;\n\n      case 'n':\n      case 'no':\n      case '0':\n        return false;\n\n      default:\n        throw new Error(\"Invalid choice: \".concat(value));\n    }\n  });\n  return prompt(message, options);\n};\n\npromptly.choose = function (message, choices, options) {\n  options = getOptions(_objectSpread({\n    trim: false\n  }, options)); // Unshift the validator that will validate the data against the choices\n\n  options.validator.unshift(function (value) {\n    // Check if the value exists by comparing values loosely\n    // Additionally, use the coorced value\n    var index = choices.findIndex(function (choice) {\n      return value == choice;\n    }); // eslint-disable-line eqeqeq\n\n    if (index === -1) {\n      throw new Error(\"Invalid choice: \".concat(value));\n    }\n\n    return choices[index];\n  });\n  return prompt(message, options);\n};\n\n//# sourceURL=webpack://lai-cmd/./node_modules/promptly/index.js?");

/***/ }),

/***/ "./node_modules/promptly/lib/getOptions.js":
/*!*************************************************!*\
  !*** ./node_modules/promptly/lib/getOptions.js ***!
  \*************************************************/
/***/ ((module) => {

"use strict";
eval("\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nfunction getOptions(options) {\n  options = _objectSpread({\n    // Own options\n    validator: undefined,\n    retry: true,\n    trim: true,\n    \"default\": undefined,\n    useDefaultOnTimeout: false,\n    // `read` package options\n    silent: false,\n    replace: '',\n    input: process.stdin,\n    output: process.stdout,\n    timeout: 0\n  }, options); // Validate that default is a string\n\n  if (options[\"default\"] !== undefined && typeof options[\"default\"] !== 'string') {\n    throw new Error('The default option value must be a string');\n  } // Normalize validator to an array\n\n\n  if (!Array.isArray(options.validator)) {\n    options.validator = options.validator ? [options.validator] : [];\n  }\n\n  return options;\n}\n\nmodule.exports = getOptions;\n\n//# sourceURL=webpack://lai-cmd/./node_modules/promptly/lib/getOptions.js?");

/***/ }),

/***/ "./node_modules/promptly/lib/prompt.js":
/*!*********************************************!*\
  !*** ./node_modules/promptly/lib/prompt.js ***!
  \*********************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("\n\nfunction asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }\n\nfunction _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err); } _next(undefined); }); }; }\n\nvar _require = __webpack_require__(/*! os */ \"os\"),\n    EOL = _require.EOL;\n\nvar _require2 = __webpack_require__(/*! util */ \"util\"),\n    promisify = _require2.promisify;\n\nvar read = promisify(__webpack_require__(/*! read */ \"./node_modules/read/lib/read.js\"));\n\nfunction prompt(_x, _x2) {\n  return _prompt.apply(this, arguments);\n}\n\nfunction _prompt() {\n  _prompt = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee(message, options) {\n    var value, i;\n    return regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            _context.prev = 0;\n            _context.next = 3;\n            return read({\n              prompt: message,\n              silent: options.silent,\n              replace: options.replace,\n              input: options.input,\n              output: options.output,\n              timeout: options.timeout\n            });\n\n          case 3:\n            value = _context.sent;\n            _context.next = 11;\n            break;\n\n          case 6:\n            _context.prev = 6;\n            _context.t0 = _context[\"catch\"](0);\n\n            if (!(_context.t0.message !== 'timed out' || options[\"default\"] === undefined || !options.useDefaultOnTimeout)) {\n              _context.next = 10;\n              break;\n            }\n\n            throw Object.assign(new Error(_context.t0.message), {\n              code: 'TIMEDOUT'\n            });\n\n          case 10:\n            value = options[\"default\"];\n\n          case 11:\n            // Trim?\n            if (options.trim) {\n              value = value.trim();\n            } // Prompt again if there's no data or use the default value\n\n\n            if (value) {\n              _context.next = 16;\n              break;\n            }\n\n            if (!(options[\"default\"] === undefined)) {\n              _context.next = 15;\n              break;\n            }\n\n            return _context.abrupt(\"return\", prompt(message, options));\n\n          case 15:\n            value = options[\"default\"];\n\n          case 16:\n            _context.prev = 16;\n            _context.t1 = regeneratorRuntime.keys(options.validator);\n\n          case 18:\n            if ((_context.t2 = _context.t1()).done) {\n              _context.next = 25;\n              break;\n            }\n\n            i = _context.t2.value;\n            _context.next = 22;\n            return options.validator[i](value);\n\n          case 22:\n            value = _context.sent;\n            _context.next = 18;\n            break;\n\n          case 25:\n            _context.next = 33;\n            break;\n\n          case 27:\n            _context.prev = 27;\n            _context.t3 = _context[\"catch\"](16);\n\n            if (!options.retry) {\n              _context.next = 32;\n              break;\n            }\n\n            _context.t3.message && options.output.write(_context.t3.message + EOL);\n            return _context.abrupt(\"return\", prompt(message, options));\n\n          case 32:\n            throw _context.t3;\n\n          case 33:\n            return _context.abrupt(\"return\", value);\n\n          case 34:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee, null, [[0, 6], [16, 27]]);\n  }));\n  return _prompt.apply(this, arguments);\n}\n\nmodule.exports = prompt;\n\n//# sourceURL=webpack://lai-cmd/./node_modules/promptly/lib/prompt.js?");

/***/ }),

/***/ "./node_modules/read/lib/read.js":
/*!***************************************!*\
  !*** ./node_modules/read/lib/read.js ***!
  \***************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("module.exports = read;\n\nvar readline = __webpack_require__(/*! readline */ \"readline\");\n\nvar Mute = __webpack_require__(/*! mute-stream */ \"./node_modules/mute-stream/mute.js\");\n\nfunction read(opts, cb) {\n  if (opts.num) {\n    throw new Error('read() no longer accepts a char number limit');\n  }\n\n  if (typeof opts[\"default\"] !== 'undefined' && typeof opts[\"default\"] !== 'string' && typeof opts[\"default\"] !== 'number') {\n    throw new Error('default value must be string or number');\n  }\n\n  var input = opts.input || process.stdin;\n  var output = opts.output || process.stdout;\n  var prompt = (opts.prompt || '').trim() + ' ';\n  var silent = opts.silent;\n  var editDef = false;\n  var timeout = opts.timeout;\n  var def = opts[\"default\"] || '';\n\n  if (def) {\n    if (silent) {\n      prompt += '(<default hidden>) ';\n    } else if (opts.edit) {\n      editDef = true;\n    } else {\n      prompt += '(' + def + ') ';\n    }\n  }\n\n  var terminal = !!(opts.terminal || output.isTTY);\n  var m = new Mute({\n    replace: opts.replace,\n    prompt: prompt\n  });\n  m.pipe(output, {\n    end: false\n  });\n  output = m;\n  var rlOpts = {\n    input: input,\n    output: output,\n    terminal: terminal\n  };\n\n  if (process.version.match(/^v0\\.6/)) {\n    var rl = readline.createInterface(rlOpts.input, rlOpts.output);\n  } else {\n    var rl = readline.createInterface(rlOpts);\n  }\n\n  output.unmute();\n  rl.setPrompt(prompt);\n  rl.prompt();\n\n  if (silent) {\n    output.mute();\n  } else if (editDef) {\n    rl.line = def;\n    rl.cursor = def.length;\n\n    rl._refreshLine();\n  }\n\n  var called = false;\n  rl.on('line', onLine);\n  rl.on('error', onError);\n  rl.on('SIGINT', function () {\n    rl.close();\n    onError(new Error('canceled'));\n  });\n  var timer;\n\n  if (timeout) {\n    timer = setTimeout(function () {\n      onError(new Error('timed out'));\n    }, timeout);\n  }\n\n  function done() {\n    called = true;\n    rl.close();\n\n    if (process.version.match(/^v0\\.6/)) {\n      rl.input.removeAllListeners('data');\n      rl.input.removeAllListeners('keypress');\n      rl.input.pause();\n    }\n\n    clearTimeout(timer);\n    output.mute();\n    output.end();\n  }\n\n  function onError(er) {\n    if (called) return;\n    done();\n    return cb(er);\n  }\n\n  function onLine(line) {\n    if (called) return;\n\n    if (silent && terminal) {\n      output.unmute();\n      output.write('\\r\\n');\n    }\n\n    done(); // truncate the \\n at the end.\n\n    line = line.replace(/\\r?\\n$/, '');\n    var isDefault = !!(editDef && line === def);\n\n    if (def && !line) {\n      isDefault = true;\n      line = def;\n    }\n\n    cb(null, line, isDefault);\n  }\n}\n\n//# sourceURL=webpack://lai-cmd/./node_modules/read/lib/read.js?");

/***/ }),

/***/ "./node_modules/regenerator-runtime/runtime.js":
/*!*****************************************************!*\
  !*** ./node_modules/regenerator-runtime/runtime.js ***!
  \*****************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("/* module decorator */ module = __webpack_require__.nmd(module);\nfunction _typeof(obj) { \"@babel/helpers - typeof\"; return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && \"function\" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }, _typeof(obj); }\n\n/**\n * Copyright (c) 2014-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\nvar runtime = function (exports) {\n  \"use strict\";\n\n  var Op = Object.prototype;\n  var hasOwn = Op.hasOwnProperty;\n  var undefined; // More compressible than void 0.\n\n  var $Symbol = typeof Symbol === \"function\" ? Symbol : {};\n  var iteratorSymbol = $Symbol.iterator || \"@@iterator\";\n  var asyncIteratorSymbol = $Symbol.asyncIterator || \"@@asyncIterator\";\n  var toStringTagSymbol = $Symbol.toStringTag || \"@@toStringTag\";\n\n  function define(obj, key, value) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n    return obj[key];\n  }\n\n  try {\n    // IE 8 has a broken Object.defineProperty that only works on DOM objects.\n    define({}, \"\");\n  } catch (err) {\n    define = function define(obj, key, value) {\n      return obj[key] = value;\n    };\n  }\n\n  function wrap(innerFn, outerFn, self, tryLocsList) {\n    // If outerFn provided and outerFn.prototype is a Generator, then outerFn.prototype instanceof Generator.\n    var protoGenerator = outerFn && outerFn.prototype instanceof Generator ? outerFn : Generator;\n    var generator = Object.create(protoGenerator.prototype);\n    var context = new Context(tryLocsList || []); // The ._invoke method unifies the implementations of the .next,\n    // .throw, and .return methods.\n\n    generator._invoke = makeInvokeMethod(innerFn, self, context);\n    return generator;\n  }\n\n  exports.wrap = wrap; // Try/catch helper to minimize deoptimizations. Returns a completion\n  // record like context.tryEntries[i].completion. This interface could\n  // have been (and was previously) designed to take a closure to be\n  // invoked without arguments, but in all the cases we care about we\n  // already have an existing method we want to call, so there's no need\n  // to create a new function object. We can even get away with assuming\n  // the method takes exactly one argument, since that happens to be true\n  // in every case, so we don't have to touch the arguments object. The\n  // only additional allocation required is the completion record, which\n  // has a stable shape and so hopefully should be cheap to allocate.\n\n  function tryCatch(fn, obj, arg) {\n    try {\n      return {\n        type: \"normal\",\n        arg: fn.call(obj, arg)\n      };\n    } catch (err) {\n      return {\n        type: \"throw\",\n        arg: err\n      };\n    }\n  }\n\n  var GenStateSuspendedStart = \"suspendedStart\";\n  var GenStateSuspendedYield = \"suspendedYield\";\n  var GenStateExecuting = \"executing\";\n  var GenStateCompleted = \"completed\"; // Returning this object from the innerFn has the same effect as\n  // breaking out of the dispatch switch statement.\n\n  var ContinueSentinel = {}; // Dummy constructor functions that we use as the .constructor and\n  // .constructor.prototype properties for functions that return Generator\n  // objects. For full spec compliance, you may wish to configure your\n  // minifier not to mangle the names of these two functions.\n\n  function Generator() {}\n\n  function GeneratorFunction() {}\n\n  function GeneratorFunctionPrototype() {} // This is a polyfill for %IteratorPrototype% for environments that\n  // don't natively support it.\n\n\n  var IteratorPrototype = {};\n  define(IteratorPrototype, iteratorSymbol, function () {\n    return this;\n  });\n  var getProto = Object.getPrototypeOf;\n  var NativeIteratorPrototype = getProto && getProto(getProto(values([])));\n\n  if (NativeIteratorPrototype && NativeIteratorPrototype !== Op && hasOwn.call(NativeIteratorPrototype, iteratorSymbol)) {\n    // This environment has a native %IteratorPrototype%; use it instead\n    // of the polyfill.\n    IteratorPrototype = NativeIteratorPrototype;\n  }\n\n  var Gp = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(IteratorPrototype);\n  GeneratorFunction.prototype = GeneratorFunctionPrototype;\n  define(Gp, \"constructor\", GeneratorFunctionPrototype);\n  define(GeneratorFunctionPrototype, \"constructor\", GeneratorFunction);\n  GeneratorFunction.displayName = define(GeneratorFunctionPrototype, toStringTagSymbol, \"GeneratorFunction\"); // Helper for defining the .next, .throw, and .return methods of the\n  // Iterator interface in terms of a single ._invoke method.\n\n  function defineIteratorMethods(prototype) {\n    [\"next\", \"throw\", \"return\"].forEach(function (method) {\n      define(prototype, method, function (arg) {\n        return this._invoke(method, arg);\n      });\n    });\n  }\n\n  exports.isGeneratorFunction = function (genFun) {\n    var ctor = typeof genFun === \"function\" && genFun.constructor;\n    return ctor ? ctor === GeneratorFunction || // For the native GeneratorFunction constructor, the best we can\n    // do is to check its .name property.\n    (ctor.displayName || ctor.name) === \"GeneratorFunction\" : false;\n  };\n\n  exports.mark = function (genFun) {\n    if (Object.setPrototypeOf) {\n      Object.setPrototypeOf(genFun, GeneratorFunctionPrototype);\n    } else {\n      genFun.__proto__ = GeneratorFunctionPrototype;\n      define(genFun, toStringTagSymbol, \"GeneratorFunction\");\n    }\n\n    genFun.prototype = Object.create(Gp);\n    return genFun;\n  }; // Within the body of any async function, `await x` is transformed to\n  // `yield regeneratorRuntime.awrap(x)`, so that the runtime can test\n  // `hasOwn.call(value, \"__await\")` to determine if the yielded value is\n  // meant to be awaited.\n\n\n  exports.awrap = function (arg) {\n    return {\n      __await: arg\n    };\n  };\n\n  function AsyncIterator(generator, PromiseImpl) {\n    function invoke(method, arg, resolve, reject) {\n      var record = tryCatch(generator[method], generator, arg);\n\n      if (record.type === \"throw\") {\n        reject(record.arg);\n      } else {\n        var result = record.arg;\n        var value = result.value;\n\n        if (value && _typeof(value) === \"object\" && hasOwn.call(value, \"__await\")) {\n          return PromiseImpl.resolve(value.__await).then(function (value) {\n            invoke(\"next\", value, resolve, reject);\n          }, function (err) {\n            invoke(\"throw\", err, resolve, reject);\n          });\n        }\n\n        return PromiseImpl.resolve(value).then(function (unwrapped) {\n          // When a yielded Promise is resolved, its final value becomes\n          // the .value of the Promise<{value,done}> result for the\n          // current iteration.\n          result.value = unwrapped;\n          resolve(result);\n        }, function (error) {\n          // If a rejected Promise was yielded, throw the rejection back\n          // into the async generator function so it can be handled there.\n          return invoke(\"throw\", error, resolve, reject);\n        });\n      }\n    }\n\n    var previousPromise;\n\n    function enqueue(method, arg) {\n      function callInvokeWithMethodAndArg() {\n        return new PromiseImpl(function (resolve, reject) {\n          invoke(method, arg, resolve, reject);\n        });\n      }\n\n      return previousPromise = // If enqueue has been called before, then we want to wait until\n      // all previous Promises have been resolved before calling invoke,\n      // so that results are always delivered in the correct order. If\n      // enqueue has not been called before, then it is important to\n      // call invoke immediately, without waiting on a callback to fire,\n      // so that the async generator function has the opportunity to do\n      // any necessary setup in a predictable way. This predictability\n      // is why the Promise constructor synchronously invokes its\n      // executor callback, and why async functions synchronously\n      // execute code before the first await. Since we implement simple\n      // async functions in terms of async generators, it is especially\n      // important to get this right, even though it requires care.\n      previousPromise ? previousPromise.then(callInvokeWithMethodAndArg, // Avoid propagating failures to Promises returned by later\n      // invocations of the iterator.\n      callInvokeWithMethodAndArg) : callInvokeWithMethodAndArg();\n    } // Define the unified helper method that is used to implement .next,\n    // .throw, and .return (see defineIteratorMethods).\n\n\n    this._invoke = enqueue;\n  }\n\n  defineIteratorMethods(AsyncIterator.prototype);\n  define(AsyncIterator.prototype, asyncIteratorSymbol, function () {\n    return this;\n  });\n  exports.AsyncIterator = AsyncIterator; // Note that simple async functions are implemented on top of\n  // AsyncIterator objects; they just return a Promise for the value of\n  // the final result produced by the iterator.\n\n  exports.async = function (innerFn, outerFn, self, tryLocsList, PromiseImpl) {\n    if (PromiseImpl === void 0) PromiseImpl = Promise;\n    var iter = new AsyncIterator(wrap(innerFn, outerFn, self, tryLocsList), PromiseImpl);\n    return exports.isGeneratorFunction(outerFn) ? iter // If outerFn is a generator, return the full iterator.\n    : iter.next().then(function (result) {\n      return result.done ? result.value : iter.next();\n    });\n  };\n\n  function makeInvokeMethod(innerFn, self, context) {\n    var state = GenStateSuspendedStart;\n    return function invoke(method, arg) {\n      if (state === GenStateExecuting) {\n        throw new Error(\"Generator is already running\");\n      }\n\n      if (state === GenStateCompleted) {\n        if (method === \"throw\") {\n          throw arg;\n        } // Be forgiving, per 25.3.3.3.3 of the spec:\n        // https://people.mozilla.org/~jorendorff/es6-draft.html#sec-generatorresume\n\n\n        return doneResult();\n      }\n\n      context.method = method;\n      context.arg = arg;\n\n      while (true) {\n        var delegate = context.delegate;\n\n        if (delegate) {\n          var delegateResult = maybeInvokeDelegate(delegate, context);\n\n          if (delegateResult) {\n            if (delegateResult === ContinueSentinel) continue;\n            return delegateResult;\n          }\n        }\n\n        if (context.method === \"next\") {\n          // Setting context._sent for legacy support of Babel's\n          // function.sent implementation.\n          context.sent = context._sent = context.arg;\n        } else if (context.method === \"throw\") {\n          if (state === GenStateSuspendedStart) {\n            state = GenStateCompleted;\n            throw context.arg;\n          }\n\n          context.dispatchException(context.arg);\n        } else if (context.method === \"return\") {\n          context.abrupt(\"return\", context.arg);\n        }\n\n        state = GenStateExecuting;\n        var record = tryCatch(innerFn, self, context);\n\n        if (record.type === \"normal\") {\n          // If an exception is thrown from innerFn, we leave state ===\n          // GenStateExecuting and loop back for another invocation.\n          state = context.done ? GenStateCompleted : GenStateSuspendedYield;\n\n          if (record.arg === ContinueSentinel) {\n            continue;\n          }\n\n          return {\n            value: record.arg,\n            done: context.done\n          };\n        } else if (record.type === \"throw\") {\n          state = GenStateCompleted; // Dispatch the exception by looping back around to the\n          // context.dispatchException(context.arg) call above.\n\n          context.method = \"throw\";\n          context.arg = record.arg;\n        }\n      }\n    };\n  } // Call delegate.iterator[context.method](context.arg) and handle the\n  // result, either by returning a { value, done } result from the\n  // delegate iterator, or by modifying context.method and context.arg,\n  // setting context.delegate to null, and returning the ContinueSentinel.\n\n\n  function maybeInvokeDelegate(delegate, context) {\n    var method = delegate.iterator[context.method];\n\n    if (method === undefined) {\n      // A .throw or .return when the delegate iterator has no .throw\n      // method always terminates the yield* loop.\n      context.delegate = null;\n\n      if (context.method === \"throw\") {\n        // Note: [\"return\"] must be used for ES3 parsing compatibility.\n        if (delegate.iterator[\"return\"]) {\n          // If the delegate iterator has a return method, give it a\n          // chance to clean up.\n          context.method = \"return\";\n          context.arg = undefined;\n          maybeInvokeDelegate(delegate, context);\n\n          if (context.method === \"throw\") {\n            // If maybeInvokeDelegate(context) changed context.method from\n            // \"return\" to \"throw\", let that override the TypeError below.\n            return ContinueSentinel;\n          }\n        }\n\n        context.method = \"throw\";\n        context.arg = new TypeError(\"The iterator does not provide a 'throw' method\");\n      }\n\n      return ContinueSentinel;\n    }\n\n    var record = tryCatch(method, delegate.iterator, context.arg);\n\n    if (record.type === \"throw\") {\n      context.method = \"throw\";\n      context.arg = record.arg;\n      context.delegate = null;\n      return ContinueSentinel;\n    }\n\n    var info = record.arg;\n\n    if (!info) {\n      context.method = \"throw\";\n      context.arg = new TypeError(\"iterator result is not an object\");\n      context.delegate = null;\n      return ContinueSentinel;\n    }\n\n    if (info.done) {\n      // Assign the result of the finished delegate to the temporary\n      // variable specified by delegate.resultName (see delegateYield).\n      context[delegate.resultName] = info.value; // Resume execution at the desired location (see delegateYield).\n\n      context.next = delegate.nextLoc; // If context.method was \"throw\" but the delegate handled the\n      // exception, let the outer generator proceed normally. If\n      // context.method was \"next\", forget context.arg since it has been\n      // \"consumed\" by the delegate iterator. If context.method was\n      // \"return\", allow the original .return call to continue in the\n      // outer generator.\n\n      if (context.method !== \"return\") {\n        context.method = \"next\";\n        context.arg = undefined;\n      }\n    } else {\n      // Re-yield the result returned by the delegate method.\n      return info;\n    } // The delegate iterator is finished, so forget it and continue with\n    // the outer generator.\n\n\n    context.delegate = null;\n    return ContinueSentinel;\n  } // Define Generator.prototype.{next,throw,return} in terms of the\n  // unified ._invoke helper method.\n\n\n  defineIteratorMethods(Gp);\n  define(Gp, toStringTagSymbol, \"Generator\"); // A Generator should always return itself as the iterator object when the\n  // @@iterator function is called on it. Some browsers' implementations of the\n  // iterator prototype chain incorrectly implement this, causing the Generator\n  // object to not be returned from this call. This ensures that doesn't happen.\n  // See https://github.com/facebook/regenerator/issues/274 for more details.\n\n  define(Gp, iteratorSymbol, function () {\n    return this;\n  });\n  define(Gp, \"toString\", function () {\n    return \"[object Generator]\";\n  });\n\n  function pushTryEntry(locs) {\n    var entry = {\n      tryLoc: locs[0]\n    };\n\n    if (1 in locs) {\n      entry.catchLoc = locs[1];\n    }\n\n    if (2 in locs) {\n      entry.finallyLoc = locs[2];\n      entry.afterLoc = locs[3];\n    }\n\n    this.tryEntries.push(entry);\n  }\n\n  function resetTryEntry(entry) {\n    var record = entry.completion || {};\n    record.type = \"normal\";\n    delete record.arg;\n    entry.completion = record;\n  }\n\n  function Context(tryLocsList) {\n    // The root entry object (effectively a try statement without a catch\n    // or a finally block) gives us a place to store values thrown from\n    // locations where there is no enclosing try statement.\n    this.tryEntries = [{\n      tryLoc: \"root\"\n    }];\n    tryLocsList.forEach(pushTryEntry, this);\n    this.reset(true);\n  }\n\n  exports.keys = function (object) {\n    var keys = [];\n\n    for (var key in object) {\n      keys.push(key);\n    }\n\n    keys.reverse(); // Rather than returning an object with a next method, we keep\n    // things simple and return the next function itself.\n\n    return function next() {\n      while (keys.length) {\n        var key = keys.pop();\n\n        if (key in object) {\n          next.value = key;\n          next.done = false;\n          return next;\n        }\n      } // To avoid creating an additional object, we just hang the .value\n      // and .done properties off the next function object itself. This\n      // also ensures that the minifier will not anonymize the function.\n\n\n      next.done = true;\n      return next;\n    };\n  };\n\n  function values(iterable) {\n    if (iterable) {\n      var iteratorMethod = iterable[iteratorSymbol];\n\n      if (iteratorMethod) {\n        return iteratorMethod.call(iterable);\n      }\n\n      if (typeof iterable.next === \"function\") {\n        return iterable;\n      }\n\n      if (!isNaN(iterable.length)) {\n        var i = -1,\n            next = function next() {\n          while (++i < iterable.length) {\n            if (hasOwn.call(iterable, i)) {\n              next.value = iterable[i];\n              next.done = false;\n              return next;\n            }\n          }\n\n          next.value = undefined;\n          next.done = true;\n          return next;\n        };\n\n        return next.next = next;\n      }\n    } // Return an iterator with no values.\n\n\n    return {\n      next: doneResult\n    };\n  }\n\n  exports.values = values;\n\n  function doneResult() {\n    return {\n      value: undefined,\n      done: true\n    };\n  }\n\n  Context.prototype = {\n    constructor: Context,\n    reset: function reset(skipTempReset) {\n      this.prev = 0;\n      this.next = 0; // Resetting context._sent for legacy support of Babel's\n      // function.sent implementation.\n\n      this.sent = this._sent = undefined;\n      this.done = false;\n      this.delegate = null;\n      this.method = \"next\";\n      this.arg = undefined;\n      this.tryEntries.forEach(resetTryEntry);\n\n      if (!skipTempReset) {\n        for (var name in this) {\n          // Not sure about the optimal order of these conditions:\n          if (name.charAt(0) === \"t\" && hasOwn.call(this, name) && !isNaN(+name.slice(1))) {\n            this[name] = undefined;\n          }\n        }\n      }\n    },\n    stop: function stop() {\n      this.done = true;\n      var rootEntry = this.tryEntries[0];\n      var rootRecord = rootEntry.completion;\n\n      if (rootRecord.type === \"throw\") {\n        throw rootRecord.arg;\n      }\n\n      return this.rval;\n    },\n    dispatchException: function dispatchException(exception) {\n      if (this.done) {\n        throw exception;\n      }\n\n      var context = this;\n\n      function handle(loc, caught) {\n        record.type = \"throw\";\n        record.arg = exception;\n        context.next = loc;\n\n        if (caught) {\n          // If the dispatched exception was caught by a catch block,\n          // then let that catch block handle the exception normally.\n          context.method = \"next\";\n          context.arg = undefined;\n        }\n\n        return !!caught;\n      }\n\n      for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n        var entry = this.tryEntries[i];\n        var record = entry.completion;\n\n        if (entry.tryLoc === \"root\") {\n          // Exception thrown outside of any try block that could handle\n          // it, so set the completion value of the entire function to\n          // throw the exception.\n          return handle(\"end\");\n        }\n\n        if (entry.tryLoc <= this.prev) {\n          var hasCatch = hasOwn.call(entry, \"catchLoc\");\n          var hasFinally = hasOwn.call(entry, \"finallyLoc\");\n\n          if (hasCatch && hasFinally) {\n            if (this.prev < entry.catchLoc) {\n              return handle(entry.catchLoc, true);\n            } else if (this.prev < entry.finallyLoc) {\n              return handle(entry.finallyLoc);\n            }\n          } else if (hasCatch) {\n            if (this.prev < entry.catchLoc) {\n              return handle(entry.catchLoc, true);\n            }\n          } else if (hasFinally) {\n            if (this.prev < entry.finallyLoc) {\n              return handle(entry.finallyLoc);\n            }\n          } else {\n            throw new Error(\"try statement without catch or finally\");\n          }\n        }\n      }\n    },\n    abrupt: function abrupt(type, arg) {\n      for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n        var entry = this.tryEntries[i];\n\n        if (entry.tryLoc <= this.prev && hasOwn.call(entry, \"finallyLoc\") && this.prev < entry.finallyLoc) {\n          var finallyEntry = entry;\n          break;\n        }\n      }\n\n      if (finallyEntry && (type === \"break\" || type === \"continue\") && finallyEntry.tryLoc <= arg && arg <= finallyEntry.finallyLoc) {\n        // Ignore the finally entry if control is not jumping to a\n        // location outside the try/catch block.\n        finallyEntry = null;\n      }\n\n      var record = finallyEntry ? finallyEntry.completion : {};\n      record.type = type;\n      record.arg = arg;\n\n      if (finallyEntry) {\n        this.method = \"next\";\n        this.next = finallyEntry.finallyLoc;\n        return ContinueSentinel;\n      }\n\n      return this.complete(record);\n    },\n    complete: function complete(record, afterLoc) {\n      if (record.type === \"throw\") {\n        throw record.arg;\n      }\n\n      if (record.type === \"break\" || record.type === \"continue\") {\n        this.next = record.arg;\n      } else if (record.type === \"return\") {\n        this.rval = this.arg = record.arg;\n        this.method = \"return\";\n        this.next = \"end\";\n      } else if (record.type === \"normal\" && afterLoc) {\n        this.next = afterLoc;\n      }\n\n      return ContinueSentinel;\n    },\n    finish: function finish(finallyLoc) {\n      for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n        var entry = this.tryEntries[i];\n\n        if (entry.finallyLoc === finallyLoc) {\n          this.complete(entry.completion, entry.afterLoc);\n          resetTryEntry(entry);\n          return ContinueSentinel;\n        }\n      }\n    },\n    \"catch\": function _catch(tryLoc) {\n      for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n        var entry = this.tryEntries[i];\n\n        if (entry.tryLoc === tryLoc) {\n          var record = entry.completion;\n\n          if (record.type === \"throw\") {\n            var thrown = record.arg;\n            resetTryEntry(entry);\n          }\n\n          return thrown;\n        }\n      } // The context.catch method must only be called with a location\n      // argument that corresponds to a known catch block.\n\n\n      throw new Error(\"illegal catch attempt\");\n    },\n    delegateYield: function delegateYield(iterable, resultName, nextLoc) {\n      this.delegate = {\n        iterator: values(iterable),\n        resultName: resultName,\n        nextLoc: nextLoc\n      };\n\n      if (this.method === \"next\") {\n        // Deliberately forget the last sent value so that we don't\n        // accidentally pass it on to the delegate.\n        this.arg = undefined;\n      }\n\n      return ContinueSentinel;\n    }\n  }; // Regardless of whether this script is executing as a CommonJS module\n  // or not, return the runtime object so that we can declare the variable\n  // regeneratorRuntime in the outer scope, which allows this module to be\n  // injected easily by `bin/regenerator --include-runtime script.js`.\n\n  return exports;\n}( // If this script is executing as a CommonJS module, use module.exports\n// as the regeneratorRuntime namespace. Otherwise create a new empty\n// object. Either way, the resulting object will be used to initialize\n// the regeneratorRuntime variable at the top of this file.\n( false ? 0 : _typeof(module)) === \"object\" ? module.exports : {});\n\ntry {\n  regeneratorRuntime = runtime;\n} catch (accidentalStrictMode) {\n  // This module should not be running in strict mode, so the above\n  // assignment should always work unless something is misconfigured. Just\n  // in case runtime.js accidentally runs in strict mode, in modern engines\n  // we can explicitly access globalThis. In older engines we can escape\n  // strict mode using a global Function call. This could conceivably fail\n  // if a Content Security Policy forbids using Function, but in that case\n  // the proper solution is to fix the accidental strict mode problem. If\n  // you've misconfigured your bundler to force strict mode and applied a\n  // CSP to forbid Function, and you're not willing to fix either of those\n  // problems, please detail your unique predicament in a GitHub issue.\n  if ((typeof globalThis === \"undefined\" ? \"undefined\" : _typeof(globalThis)) === \"object\") {\n    globalThis.regeneratorRuntime = runtime;\n  } else {\n    Function(\"r\", \"regeneratorRuntime = r\")(runtime);\n  }\n}\n\n//# sourceURL=webpack://lai-cmd/./node_modules/regenerator-runtime/runtime.js?");

/***/ }),

/***/ "./src/const/Colors.js":
/*!*****************************!*\
  !*** ./src/const/Colors.js ***!
  \*****************************/
/***/ ((module) => {

eval("var Colors = {\n  RED: '\\x1b[31m',\n  GREEN: '\\x1b[32m',\n  YELLOW: '\\x1b[33m',\n  WHITE: '\\x1b[37m'\n};\nmodule.exports = Colors;\n\n//# sourceURL=webpack://lai-cmd/./src/const/Colors.js?");

/***/ }),

/***/ "./src/handler/InitHandler/cmd/js.js":
/*!*******************************************!*\
  !*** ./src/handler/InitHandler/cmd/js.js ***!
  \*******************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }\n\nfunction _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err); } _next(undefined); }); }; }\n\nvar _require = __webpack_require__(/*! child_process */ \"child_process\"),\n    spawn = _require.spawn;\n\nvar Text = __webpack_require__(/*! ../../../lib/Text */ \"./src/lib/Text.js\");\n\nvar fs = __webpack_require__(/*! fs */ \"fs\");\n\nvar ConfigParser = __webpack_require__(/*! ../../../lib/ConfigParser */ \"./src/lib/ConfigParser.js\");\n\nvar Json2Config = __webpack_require__(/*! ../../../lib/JSON2Config */ \"./src/lib/JSON2Config.js\");\n\nvar _require2 = __webpack_require__(/*! ../../../utils */ \"./src/utils.js\"),\n    requestYesOrNo = _require2.requestYesOrNo;\n\nvar initEslint = function initEslint() {\n  console.log(Text.green('Start eslint init...'));\n  return new Promise(function (resolve, reject) {\n    var shell = spawn('npx', ['eslint', '--init'], {\n      stdio: 'inherit',\n      shell: true\n    });\n    shell.on('close', function (code) {\n      if (code !== 0) {\n        var error = \"\".concat(Text.red('ERROR'), \": [eslint] terminated code: \").concat(code);\n        console.log(error);\n        return reject(error);\n      }\n\n      resolve();\n    });\n  });\n};\n\nvar initPrettier = /*#__PURE__*/function () {\n  var _ref = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee() {\n    return regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            console.log(\"The \".concat(Text.green('requires'), \" the following dependencies: \"));\n            console.log('prettier eslint-plugin-prettier eslint-config-prettier');\n            _context.next = 4;\n            return requestYesOrNo('Would you like to install them now with npm?');\n\n          case 4:\n            if (_context.sent) {\n              _context.next = 7;\n              break;\n            }\n\n            console.log(\"\".concat(Text.yellow('[WARNING]'), \": generate the config file first, please don't forget to install the dependencies.\"));\n            return _context.abrupt(\"return\");\n\n          case 7:\n            return _context.abrupt(\"return\", new Promise(function (resolve, reject) {\n              var shell = spawn('npm', ['i', '-D', 'prettier', 'eslint-plugin-prettier', 'eslint-config-prettier'], {\n                stdio: 'inherit',\n                shell: true\n              });\n              shell.on('close', function (code) {\n                if (code !== 0) {\n                  var error = \"\".concat(Text.red('ERROR'), \": [prettier] terminated code: \").concat(code);\n                  console.log(error);\n                  return reject(error);\n                }\n\n                console.log(Text.green('init prettier success.'));\n                resolve();\n              });\n            }));\n\n          case 8:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n\n  return function initPrettier() {\n    return _ref.apply(this, arguments);\n  };\n}();\n\nvar initBabelEslintParser = /*#__PURE__*/function () {\n  var _ref2 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee2() {\n    return regeneratorRuntime.wrap(function _callee2$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            console.log(\"The \".concat(Text.green('requires'), \" the following dependencies: \"));\n            console.log('@babel/eslint-parser');\n            _context2.next = 4;\n            return requestYesOrNo('Would you like to install them now with npm?');\n\n          case 4:\n            if (_context2.sent) {\n              _context2.next = 7;\n              break;\n            }\n\n            console.log(\"\".concat(Text.yellow('[WARNING]'), \": update the eslint config file first, please don't forget to install the dependencies.\"));\n            return _context2.abrupt(\"return\");\n\n          case 7:\n            return _context2.abrupt(\"return\", new Promise(function (resolve, reject) {\n              var shell = spawn('npm', ['i', '-D', '@babel/eslint-parser'], {\n                stdio: 'inherit',\n                shell: true\n              });\n              shell.on('close', function (code) {\n                if (code !== 0) {\n                  var error = \"\".concat(Text.red('ERROR'), \": [@babel/eslint-parser] terminated code: \").concat(code);\n                  console.log(error);\n                  return reject(error);\n                }\n\n                console.log(Text.green('install @babel/eslint-parser success.'));\n                resolve();\n              });\n            }));\n\n          case 8:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, _callee2);\n  }));\n\n  return function initBabelEslintParser() {\n    return _ref2.apply(this, arguments);\n  };\n}();\n\nvar updateEslintConfigForBabelEslintParser = /*#__PURE__*/function () {\n  var _ref3 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee3() {\n    return regeneratorRuntime.wrap(function _callee3$(_context3) {\n      while (1) {\n        switch (_context3.prev = _context3.next) {\n          case 0:\n            console.log(Text.green('update eslint config for @babel/eslint-parser...'));\n            _context3.next = 3;\n            return new Promise(function (resolve, reject) {\n              try {\n                var dirs = fs.readdirSync('./');\n                var configs = dirs.filter(function (dir) {\n                  return /^\\.eslintrc/.test(dir);\n                });\n\n                if (configs.length === 0) {\n                  throw new Error(\"can't find eslint config file.\");\n                }\n\n                if (configs.length > 1) {\n                  throw new Error('Uncertain the eslint config file.');\n                }\n\n                var configFile = configs[0];\n                var config = ConfigParser.parse(configFile);\n                config.parser = '@babel/eslint-parser';\n\n                if (!config.parserOptions) {\n                  config.parserOptions = {};\n                }\n\n                config.parserOptions.requireConfigFile = false;\n                Json2Config.write(configFile, config);\n                console.log(Text.green('update eslint config OK...'));\n                resolve();\n              } catch (e) {\n                console.log(e);\n                return reject(e);\n              }\n            });\n\n          case 3:\n            return _context3.abrupt(\"return\", _context3.sent);\n\n          case 4:\n          case \"end\":\n            return _context3.stop();\n        }\n      }\n    }, _callee3);\n  }));\n\n  return function updateEslintConfigForBabelEslintParser() {\n    return _ref3.apply(this, arguments);\n  };\n}();\n\nvar generatePrettierConfig = function generatePrettierConfig() {\n  console.log(Text.green('generate prettier config...'));\n  var config = {\n    trailingComma: 'es5',\n    tabWidth: 2,\n    semi: false,\n    singleQuote: true\n  };\n  return new Promise(function (resolve, reject) {\n    try {\n      Json2Config.write('.prettierrc.json', config);\n      console.log(Text.green('generate prettier config OK...'));\n      resolve();\n    } catch (e) {\n      var error = \"\".concat(Text.red('ERROR'), \": [prettier] generate config file error. \\n\").concat(e);\n      console.log(error);\n      return reject(error);\n    }\n  });\n};\n\nvar updateEslintConfigForPrettier = function updateEslintConfigForPrettier() {\n  console.log(Text.green('update eslint config for prettier...'));\n  return new Promise(function (resolve, reject) {\n    try {\n      var dirs = fs.readdirSync('./');\n      var configs = dirs.filter(function (dir) {\n        return /^\\.eslintrc/.test(dir);\n      });\n\n      if (configs.length === 0) {\n        throw new Error(\"can't find eslint config file.\");\n      }\n\n      if (configs.length > 1) {\n        throw new Error('Uncertain the eslint config file.');\n      }\n\n      var configFile = configs[0];\n      var config = ConfigParser.parse(configFile);\n      config[\"extends\"] = config[\"extends\"] || [];\n      config.plugins = config.plugins || [];\n      config.rules = config.rules || {};\n\n      if (!config[\"extends\"].includes('prettier')) {\n        config[\"extends\"].push('prettier');\n      }\n\n      if (!config.plugins.includes('prettier')) {\n        config.plugins.push('prettier');\n      }\n\n      if (!config.rules['prettier/prettier']) {\n        config.rules['prettier/prettier'] = 'error';\n      }\n\n      Json2Config.write(configFile, config);\n      console.log(Text.green('update eslint config OK...'));\n      resolve();\n    } catch (e) {\n      console.log(e);\n      return reject(e);\n    }\n  });\n};\n\nvar generateJsConfig = function generateJsConfig() {\n  console.log(Text.green('generate jsconfig for vscode...'));\n  var config = {\n    compilerOptions: {\n      checkJs: true,\n      baseUrl: './src',\n      target: 'ES2015',\n      moduleResolution: 'node'\n    }\n  };\n  return new Promise(function (resolve, reject) {\n    try {\n      Json2Config.write('jsconfig.json', config);\n      console.log(Text.green('generate jsconfig OK...'));\n      resolve();\n    } catch (e) {\n      var error = \"\".concat(Text.red('ERROR'), \": [jsconfig] generate file error. \\n\").concat(e);\n      console.log(error);\n      return reject(error);\n    }\n  });\n};\n\nvar InitJs = function InitJs() {\n  requestYesOrNo('Do you want to initialize eslint?').then(function (res) {\n    return res && initEslint();\n  }).then(function () {\n    return requestYesOrNo('Do you want to use @babel/eslint-parser?').then(function (res) {\n      return res && initBabelEslintParser().then(updateEslintConfigForBabelEslintParser);\n    });\n  }).then(function () {\n    return requestYesOrNo('Do you want to initialize prettier?').then(function (res) {\n      return res && initPrettier().then(generatePrettierConfig).then(updateEslintConfigForPrettier);\n    });\n  }).then(function () {\n    return requestYesOrNo('Do you want to initialize jsconfig?').then(function (res) {\n      return res && generateJsConfig();\n    });\n  }).then(function () {\n    console.log(Text.green('All done.'));\n  })[\"catch\"](function (err) {\n    console.log(\"\".concat(Text.red('[ERROR]'), \": \").concat(err));\n  });\n};\n\nmodule.exports = InitJs;\n\n//# sourceURL=webpack://lai-cmd/./src/handler/InitHandler/cmd/js.js?");

/***/ }),

/***/ "./src/handler/InitHandler/cmd/react-tailwindcss.js":
/*!**********************************************************!*\
  !*** ./src/handler/InitHandler/cmd/react-tailwindcss.js ***!
  \**********************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }\n\nfunction _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err); } _next(undefined); }); }; }\n\nvar _require = __webpack_require__(/*! child_process */ \"child_process\"),\n    spawn = _require.spawn;\n\nvar Text = __webpack_require__(/*! ../../../lib/Text */ \"./src/lib/Text.js\");\n\nvar ConfigParser = __webpack_require__(/*! ../../../lib/ConfigParser */ \"./src/lib/ConfigParser.js\");\n\nvar Json2Config = __webpack_require__(/*! ../../../lib/JSON2Config */ \"./src/lib/JSON2Config.js\");\n\nvar fs = __webpack_require__(/*! fs */ \"fs\");\n\nvar _require2 = __webpack_require__(/*! ../../../utils */ \"./src/utils.js\"),\n    requestYesOrNo = _require2.requestYesOrNo;\n\nvar initConfig = function initConfig() {\n  console.log(Text.green('Init tailwindcss config.'));\n  return new Promise(function (resolve, reject) {\n    var shell = spawn('npx', ['tailwindcss', 'init'], {\n      stdio: 'inherit',\n      shell: true\n    });\n    shell.on('close', function (code) {\n      if (code !== 0) {\n        var error = \"\".concat(Text.red('ERROR'), \": [init tailwind config] terminated code: \").concat(code);\n        console.log(error);\n        return reject(error);\n      }\n\n      resolve();\n    });\n  });\n};\n\nvar installDependencies = /*#__PURE__*/function () {\n  var _ref = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee() {\n    return regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            console.log(\"The \".concat(Text.green('requires'), \" the following dependencies: \"));\n            console.log('tailwindcss postcss autoprefixer');\n\n            if (requestYesOrNo('Would you like to install them now with npm? (y)')) {\n              _context.next = 5;\n              break;\n            }\n\n            console.log(\"\".concat(Text.yellow('[WARNING]'), \": generate the config file first, please don't forget to install the dependencies.\"));\n            return _context.abrupt(\"return\");\n\n          case 5:\n            return _context.abrupt(\"return\", new Promise(function (resolve, reject) {\n              var shell = spawn('npm', ['i', '-D', 'tailwindcss', 'postcss', 'autoprefixer'], {\n                stdio: 'inherit',\n                shell: true\n              });\n              shell.on('close', function (code) {\n                if (code !== 0) {\n                  var error = \"\".concat(Text.red('ERROR'), \": [install tailwind] terminated code: \").concat(code);\n                  console.log(error);\n                  return reject(error);\n                }\n\n                console.log(Text.green('dependencies installed.'));\n                resolve();\n              });\n            }));\n\n          case 6:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n\n  return function installDependencies() {\n    return _ref.apply(this, arguments);\n  };\n}();\n\nvar updateConfig = function updateConfig() {\n  console.log(Text.green('update tailwind config...'));\n  return new Promise(function (resolve, reject) {\n    try {\n      var configFile = 'tailwind.config.js';\n      var config = ConfigParser.parse(configFile);\n      config.content = config.content || [];\n\n      if (!config.content.includes('./src/**/*.{js,jsx,ts,tsx}')) {\n        config.content.push('./src/**/*.{js,jsx,ts,tsx}');\n      }\n\n      Json2Config.write(configFile, config);\n      console.log(Text.green('update tailwind config OK...'));\n      resolve();\n    } catch (e) {\n      console.log(e);\n      return reject(e);\n    }\n  });\n};\n\nvar updateIndexCSS = function updateIndexCSS() {\n  console.log(Text.green('update index.css...'));\n  return new Promise(function (resolve, reject) {\n    try {\n      var file = './src/index.css';\n      var data = \"@tailwind base;\\n@tailwind components;\\n@tailwind utilities;\\n\\n\".concat(fs.readFileSync(file).toString(), \"\\n\");\n      fs.writeFileSync(file, data);\n      console.log(Text.green('update index.css OK...'));\n      resolve();\n    } catch (e) {\n      console.log(e);\n      return reject(e);\n    }\n  });\n};\n\nvar InitReactTailwindCSS = function InitReactTailwindCSS() {\n  installDependencies().then(initConfig).then(updateConfig).then(updateIndexCSS).then(function () {\n    console.log(Text.green('All done.'));\n  })[\"catch\"](function (err) {\n    console.log(\"\".concat(Text.red('[ERROR]'), \": \").concat(err));\n  });\n};\n\nmodule.exports = InitReactTailwindCSS;\n\n//# sourceURL=webpack://lai-cmd/./src/handler/InitHandler/cmd/react-tailwindcss.js?");

/***/ }),

/***/ "./src/handler/InitHandler/cmd/react.js":
/*!**********************************************!*\
  !*** ./src/handler/InitHandler/cmd/react.js ***!
  \**********************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }\n\nfunction _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err); } _next(undefined); }); }; }\n\nvar _require = __webpack_require__(/*! child_process */ \"child_process\"),\n    spawn = _require.spawn;\n\nvar Text = __webpack_require__(/*! ../../../lib/Text */ \"./src/lib/Text.js\");\n\nvar ConfigParser = __webpack_require__(/*! ../../../lib/ConfigParser */ \"./src/lib/ConfigParser.js\");\n\nvar Json2Config = __webpack_require__(/*! ../../../lib/JSON2Config */ \"./src/lib/JSON2Config.js\");\n\nvar fs = __webpack_require__(/*! fs */ \"fs\");\n\nvar _require2 = __webpack_require__(/*! ../../../utils */ \"./src/utils.js\"),\n    requestYesOrNo = _require2.requestYesOrNo;\n\nvar runInitJs = function runInitJs() {\n  return new Promise(function (resolve, reject) {\n    var shell = spawn('npx', ['lai-cmd', 'init', 'js'], {\n      stdio: 'inherit',\n      shell: true\n    });\n    shell.on('close', function (code) {\n      if (code !== 0) {\n        var error = \"\".concat(Text.red('ERROR'), \": [init js] terminated code: \").concat(code);\n        console.log(error);\n        return reject(error);\n      }\n\n      resolve();\n    });\n  });\n};\n\nvar runInitReactTailwindCSS = function runInitReactTailwindCSS() {\n  return new Promise(function (resolve, reject) {\n    var shell = spawn('npx', ['lai-cmd', 'init', 'react-tailwindcss'], {\n      stdio: 'inherit',\n      shell: true\n    });\n    shell.on('close', function (code) {\n      if (code !== 0) {\n        var error = \"\".concat(Text.red('ERROR'), \": [init react tailwindcss] terminated code: \").concat(code);\n        console.log(error);\n        return reject(error);\n      }\n\n      resolve();\n    });\n  });\n};\n\nvar initBabelPresetReact = /*#__PURE__*/function () {\n  var _ref = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee() {\n    return regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            console.log(\"The \".concat(Text.green('requires'), \" the following dependencies: \"));\n            console.log('@babel/eslint-parser');\n            _context.next = 4;\n            return requestYesOrNo('Would you like to install them now with npm?');\n\n          case 4:\n            if (_context.sent) {\n              _context.next = 7;\n              break;\n            }\n\n            console.log(\"\".concat(Text.yellow('[WARNING]'), \": update the eslint config file first, please don't forget to install the dependencies.\"));\n            return _context.abrupt(\"return\");\n\n          case 7:\n            return _context.abrupt(\"return\", new Promise(function (resolve, reject) {\n              var shell = spawn('npm', ['i', '-D', '@babel/preset-react'], {\n                stdio: 'inherit',\n                shell: true\n              });\n              shell.on('close', function (code) {\n                if (code !== 0) {\n                  var error = \"\".concat(Text.red('ERROR'), \": [@babel/preset-react] terminated code: \").concat(code);\n                  console.log(error);\n                  return reject(error);\n                }\n\n                console.log(Text.green('install @babel/preset-react success.'));\n                resolve();\n              });\n            }));\n\n          case 8:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n\n  return function initBabelPresetReact() {\n    return _ref.apply(this, arguments);\n  };\n}();\n\nvar updateEslintConfigForBabelPresetReact = /*#__PURE__*/function () {\n  var _ref2 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee2() {\n    return regeneratorRuntime.wrap(function _callee2$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            console.log(Text.green('update eslint config for @babel/preset-react...'));\n            _context2.next = 3;\n            return new Promise(function (resolve, reject) {\n              try {\n                var dirs = fs.readdirSync('./');\n                var configs = dirs.filter(function (dir) {\n                  return /^\\.eslintrc/.test(dir);\n                });\n\n                if (configs.length === 0) {\n                  throw new Error(\"can't find eslint config file.\");\n                }\n\n                if (configs.length > 1) {\n                  throw new Error('Uncertain the eslint config file.');\n                }\n\n                var configFile = configs[0];\n                var config = ConfigParser.parse(configFile);\n\n                if (!config.parserOptions) {\n                  config.parserOptions = {};\n                }\n\n                if (!config.parserOptions.babelOptions) {\n                  config.parserOptions.babelOptions = {};\n                }\n\n                if (!config.parserOptions.babelOptions.presets) {\n                  config.parserOptions.babelOptions.presets = [];\n                }\n\n                if (!config.parserOptions.babelOptions.presets.includes('@babel/preset-react')) {\n                  config.parserOptions.babelOptions.presets.push('@babel/preset-react');\n                }\n\n                Json2Config.write(configFile, config);\n                console.log(Text.green('update eslint config OK...'));\n                resolve();\n              } catch (e) {\n                console.log(e);\n                return reject(e);\n              }\n            });\n\n          case 3:\n            return _context2.abrupt(\"return\", _context2.sent);\n\n          case 4:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, _callee2);\n  }));\n\n  return function updateEslintConfigForBabelPresetReact() {\n    return _ref2.apply(this, arguments);\n  };\n}();\n\nvar InitReact = function InitReact() {\n  requestYesOrNo('Do you want to initialize js(eslint + prettier + jsconfig) with lai-cmd? ').then(function (res) {\n    return res && runInitJs();\n  }).then(function () {\n    return requestYesOrNo('Do you want to initialize @babel/preset-react?').then(function (res) {\n      return res && initBabelPresetReact().then(updateEslintConfigForBabelPresetReact);\n    });\n  }).then(function () {\n    return requestYesOrNo('Do you want to initialize tailwindcss with lai-cmd?').then(function (res) {\n      return res && runInitReactTailwindCSS();\n    });\n  }).then(function () {\n    console.log(Text.green('All done.'));\n  })[\"catch\"](function (err) {\n    console.log(\"\".concat(Text.red('[ERROR]'), \": \").concat(err));\n  });\n};\n\nmodule.exports = InitReact;\n\n//# sourceURL=webpack://lai-cmd/./src/handler/InitHandler/cmd/react.js?");

/***/ }),

/***/ "./src/handler/InitHandler/index.js":
/*!******************************************!*\
  !*** ./src/handler/InitHandler/index.js ***!
  \******************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("function _typeof(obj) { \"@babel/helpers - typeof\"; return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && \"function\" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }, _typeof(obj); }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, \"prototype\", { writable: false }); return Constructor; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function\"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); Object.defineProperty(subClass, \"prototype\", { writable: false }); if (superClass) _setPrototypeOf(subClass, superClass); }\n\nfunction _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) { return call; } else if (call !== void 0) { throw new TypeError(\"Derived constructors may only return object or undefined\"); } return _assertThisInitialized(self); }\n\nfunction _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return self; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\nfunction _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }\n\nvar Handler = __webpack_require__(/*! ../ */ \"./src/handler/index.js\");\n\nvar InitJs = __webpack_require__(/*! ./cmd/js */ \"./src/handler/InitHandler/cmd/js.js\");\n\nvar InitReact = __webpack_require__(/*! ./cmd/react */ \"./src/handler/InitHandler/cmd/react.js\");\n\nvar InitReactTailwindCSS = __webpack_require__(/*! ./cmd/react-tailwindcss */ \"./src/handler/InitHandler/cmd/react-tailwindcss.js\");\n\nvar InitHandler = /*#__PURE__*/function (_Handler) {\n  _inherits(InitHandler, _Handler);\n\n  var _super = _createSuper(InitHandler);\n\n  function InitHandler() {\n    _classCallCheck(this, InitHandler);\n\n    return _super.apply(this, arguments);\n  }\n\n  return _createClass(InitHandler);\n}(Handler);\n\nInitHandler.register('js', InitJs);\nInitHandler.register('react-tailwindcss', InitReactTailwindCSS);\nInitHandler.register('react', InitReact);\nmodule.exports = InitHandler;\n\n//# sourceURL=webpack://lai-cmd/./src/handler/InitHandler/index.js?");

/***/ }),

/***/ "./src/handler/index.js":
/*!******************************!*\
  !*** ./src/handler/index.js ***!
  \******************************/
/***/ ((module) => {

eval("function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, \"prototype\", { writable: false }); return Constructor; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nvar Handler = /*#__PURE__*/function () {\n  function Handler(source, options, command) {\n    _classCallCheck(this, Handler);\n\n    this.source = source;\n    this.options = options;\n    this.command = command;\n  }\n\n  _createClass(Handler, [{\n    key: \"execute\",\n    value: function execute() {\n      var handler = Handler.payloads[this.constructor.name][this.source];\n\n      if (handler instanceof Function) {\n        handler(this.options, this.command);\n      } else {\n        this.fallback();\n      }\n    }\n  }, {\n    key: \"fallback\",\n    value: function fallback() {\n      console.error(\"error: cmd \".concat(this.command.name(), \" unknown source '\").concat(this.source, \"'\"));\n    }\n  }], [{\n    key: \"register\",\n    value: function register(key, action) {\n      if (!this.payloads[this.name]) {\n        this.payloads[this.name] = {};\n      }\n\n      this.payloads[this.name][key] = action;\n    }\n  }]);\n\n  return Handler;\n}();\n\n_defineProperty(Handler, \"payloads\", {});\n\nmodule.exports = Handler;\n\n//# sourceURL=webpack://lai-cmd/./src/handler/index.js?");

/***/ }),

/***/ "./src/index.js":
/*!**********************!*\
  !*** ./src/index.js ***!
  \**********************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("__webpack_require__(/*! regenerator-runtime/runtime */ \"./node_modules/regenerator-runtime/runtime.js\");\n\nvar _require = __webpack_require__(/*! commander */ \"./node_modules/commander/index.js\"),\n    program = _require.program;\n\nvar InitHandler = __webpack_require__(/*! ./handler/InitHandler */ \"./src/handler/InitHandler/index.js\");\n\nvar run = function run() {\n  program.command('init').description('init source').argument('<source>', 'init source').action(function (source, options, command) {\n    return new InitHandler(source, options, command).execute();\n  });\n  program.parse(process.argv);\n};\n\nmodule.exports = {\n  run: run\n};\n\n//# sourceURL=webpack://lai-cmd/./src/index.js?");

/***/ }),

/***/ "./src/lib/ConfigParser.js":
/*!*********************************!*\
  !*** ./src/lib/ConfigParser.js ***!
  \*********************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, \"prototype\", { writable: false }); return Constructor; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nvar path = __webpack_require__(/*! path */ \"path\");\n\nvar fs = __webpack_require__(/*! fs */ \"fs\");\n\nvar yaml = __webpack_require__(/*! js-yaml */ \"./node_modules/js-yaml/index.js\");\n\nvar ConfigParser = /*#__PURE__*/function () {\n  function ConfigParser() {\n    _classCallCheck(this, ConfigParser);\n  }\n\n  _createClass(ConfigParser, null, [{\n    key: \"parse\",\n    value: function parse(file) {\n      var ext = path.extname(file);\n      var parser = ConfigParser.availables[ext];\n\n      if (!parser) {\n        throw new Error(\"Can't find \".concat(ext, \" parser.\"));\n      }\n\n      try {\n        return parser(file);\n      } catch (e) {\n        throw new Error(\"Can't parser file: \".concat(file, \"\\n\").concat(e));\n      }\n    }\n  }, {\n    key: \"register\",\n    value: function register(ext, action) {\n      this.availables[ext] = action;\n    }\n  }]);\n\n  return ConfigParser;\n}();\n\n_defineProperty(ConfigParser, \"availables\", {});\n\nConfigParser.register('.json', function (file) {\n  return JSON.parse(fs.readFileSync(file).toString());\n}); // eslint-disable-next-line no-eval\n\nConfigParser.register('.js', function (file) {\n  return eval(fs.readFileSync(file).toString());\n});\nConfigParser.register('.yml', function (file) {\n  return yaml.load(fs.readFileSync(file).toString());\n});\nmodule.exports = ConfigParser;\n\n//# sourceURL=webpack://lai-cmd/./src/lib/ConfigParser.js?");

/***/ }),

/***/ "./src/lib/JSON2Config.js":
/*!********************************!*\
  !*** ./src/lib/JSON2Config.js ***!
  \********************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, \"prototype\", { writable: false }); return Constructor; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nvar path = __webpack_require__(/*! path */ \"path\");\n\nvar fs = __webpack_require__(/*! fs */ \"fs\");\n\nvar yaml = __webpack_require__(/*! js-yaml */ \"./node_modules/js-yaml/index.js\");\n\nvar Json2Config = /*#__PURE__*/function () {\n  function Json2Config() {\n    _classCallCheck(this, Json2Config);\n  }\n\n  _createClass(Json2Config, null, [{\n    key: \"write\",\n    value: function write(file, config) {\n      var ext = path.extname(file);\n      var parser = Json2Config.availables[ext];\n\n      if (!parser) {\n        throw new Error(\"Can't find \".concat(ext, \" parser.\"));\n      }\n\n      try {\n        var data = parser(config);\n        fs.writeFileSync(file, data);\n      } catch (e) {\n        throw new Error(e);\n      }\n    }\n  }, {\n    key: \"register\",\n    value: function register(ext, action) {\n      this.availables[ext] = action;\n    }\n  }]);\n\n  return Json2Config;\n}();\n\n_defineProperty(Json2Config, \"availables\", {});\n\nJson2Config.register('.json', function (json) {\n  return JSON.stringify(json, null, 4);\n});\nJson2Config.register('.js', function (json) {\n  return \"module.exports = \".concat(JSON.stringify(json, null, 2));\n});\nJson2Config.register('.yml', function (json) {\n  return yaml.dump(json);\n});\nmodule.exports = Json2Config;\n\n//# sourceURL=webpack://lai-cmd/./src/lib/JSON2Config.js?");

/***/ }),

/***/ "./src/lib/Text.js":
/*!*************************!*\
  !*** ./src/lib/Text.js ***!
  \*************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("var Colors = __webpack_require__(/*! ../const/Colors */ \"./src/const/Colors.js\");\n\nvar RESET = '\\x1b[0m';\nvar Text = {\n  \"while\": function _while(text) {},\n  green: function green(text) {},\n  red: function red(text) {},\n  yellow: function yellow(text) {}\n};\n\nvar _loop = function _loop(key) {\n  var prefix = Colors[key.toUpperCase()];\n\n  Text[key] = function (text) {\n    return prefix + text + RESET;\n  };\n};\n\nfor (var key in Text) {\n  _loop(key);\n}\n\nmodule.exports = Text;\n\n//# sourceURL=webpack://lai-cmd/./src/lib/Text.js?");

/***/ }),

/***/ "./src/utils.js":
/*!**********************!*\
  !*** ./src/utils.js ***!
  \**********************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"requestYesOrNo\": () => (/* binding */ requestYesOrNo)\n/* harmony export */ });\nfunction asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }\n\nfunction _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err); } _next(undefined); }); }; }\n\nvar promptly = __webpack_require__(/*! promptly */ \"./node_modules/promptly/index.js\");\n\nvar requestYesOrNo = /*#__PURE__*/function () {\n  var _ref = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee(message) {\n    var defaultYes,\n        _args = arguments;\n    return regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            defaultYes = _args.length > 1 && _args[1] !== undefined ? _args[1] : true;\n            _context.next = 3;\n            return promptly.prompt(\"\".concat(message, \" (\").concat(defaultYes ? 'y' : 'n', \")\"), {\n              \"default\": defaultYes ? 'y' : 'n'\n            });\n\n          case 3:\n            _context.t0 = _context.sent.toLowerCase();\n            return _context.abrupt(\"return\", _context.t0 !== 'n');\n\n          case 5:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n\n  return function requestYesOrNo(_x) {\n    return _ref.apply(this, arguments);\n  };\n}();\n\n//# sourceURL=webpack://lai-cmd/./src/utils.js?");

/***/ }),

/***/ "child_process":
/*!********************************!*\
  !*** external "child_process" ***!
  \********************************/
/***/ ((module) => {

"use strict";
module.exports = require("child_process");

/***/ }),

/***/ "events":
/*!*************************!*\
  !*** external "events" ***!
  \*************************/
/***/ ((module) => {

"use strict";
module.exports = require("events");

/***/ }),

/***/ "fs":
/*!*********************!*\
  !*** external "fs" ***!
  \*********************/
/***/ ((module) => {

"use strict";
module.exports = require("fs");

/***/ }),

/***/ "os":
/*!*********************!*\
  !*** external "os" ***!
  \*********************/
/***/ ((module) => {

"use strict";
module.exports = require("os");

/***/ }),

/***/ "path":
/*!***********************!*\
  !*** external "path" ***!
  \***********************/
/***/ ((module) => {

"use strict";
module.exports = require("path");

/***/ }),

/***/ "readline":
/*!***************************!*\
  !*** external "readline" ***!
  \***************************/
/***/ ((module) => {

"use strict";
module.exports = require("readline");

/***/ }),

/***/ "stream":
/*!*************************!*\
  !*** external "stream" ***!
  \*************************/
/***/ ((module) => {

"use strict";
module.exports = require("stream");

/***/ }),

/***/ "util":
/*!***********************!*\
  !*** external "util" ***!
  \***********************/
/***/ ((module) => {

"use strict";
module.exports = require("util");

/***/ }),

/***/ "./node_modules/commander/index.js":
/*!*****************************************!*\
  !*** ./node_modules/commander/index.js ***!
  \*****************************************/
/***/ ((module, exports, __webpack_require__) => {

eval("var _require = __webpack_require__(/*! ./lib/argument.js */ \"./node_modules/commander/lib/argument.js\"),\n    Argument = _require.Argument;\n\nvar _require2 = __webpack_require__(/*! ./lib/command.js */ \"./node_modules/commander/lib/command.js\"),\n    Command = _require2.Command;\n\nvar _require3 = __webpack_require__(/*! ./lib/error.js */ \"./node_modules/commander/lib/error.js\"),\n    CommanderError = _require3.CommanderError,\n    InvalidArgumentError = _require3.InvalidArgumentError;\n\nvar _require4 = __webpack_require__(/*! ./lib/help.js */ \"./node_modules/commander/lib/help.js\"),\n    Help = _require4.Help;\n\nvar _require5 = __webpack_require__(/*! ./lib/option.js */ \"./node_modules/commander/lib/option.js\"),\n    Option = _require5.Option; // @ts-check\n\n/**\n * Expose the root command.\n */\n\n\nexports = module.exports = new Command();\nexports.program = exports; // More explicit access to global command.\n// Implicit export of createArgument, createCommand, and createOption.\n\n/**\n * Expose classes\n */\n\nexports.Argument = Argument;\nexports.Command = Command;\nexports.CommanderError = CommanderError;\nexports.Help = Help;\nexports.InvalidArgumentError = InvalidArgumentError;\nexports.InvalidOptionArgumentError = InvalidArgumentError; // Deprecated\n\nexports.Option = Option;\n\n//# sourceURL=webpack://lai-cmd/./node_modules/commander/index.js?");

/***/ }),

/***/ "./node_modules/commander/lib/argument.js":
/*!************************************************!*\
  !*** ./node_modules/commander/lib/argument.js ***!
  \************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, \"prototype\", { writable: false }); return Constructor; }\n\nvar _require = __webpack_require__(/*! ./error.js */ \"./node_modules/commander/lib/error.js\"),\n    InvalidArgumentError = _require.InvalidArgumentError; // @ts-check\n\n\nvar Argument = /*#__PURE__*/function () {\n  /**\n   * Initialize a new command argument with the given name and description.\n   * The default is that the argument is required, and you can explicitly\n   * indicate this with <> around the name. Put [] around the name for an optional argument.\n   *\n   * @param {string} name\n   * @param {string} [description]\n   */\n  function Argument(name, description) {\n    _classCallCheck(this, Argument);\n\n    this.description = description || '';\n    this.variadic = false;\n    this.parseArg = undefined;\n    this.defaultValue = undefined;\n    this.defaultValueDescription = undefined;\n    this.argChoices = undefined;\n\n    switch (name[0]) {\n      case '<':\n        // e.g. <required>\n        this.required = true;\n        this._name = name.slice(1, -1);\n        break;\n\n      case '[':\n        // e.g. [optional]\n        this.required = false;\n        this._name = name.slice(1, -1);\n        break;\n\n      default:\n        this.required = true;\n        this._name = name;\n        break;\n    }\n\n    if (this._name.length > 3 && this._name.slice(-3) === '...') {\n      this.variadic = true;\n      this._name = this._name.slice(0, -3);\n    }\n  }\n  /**\n   * Return argument name.\n   *\n   * @return {string}\n   */\n\n\n  _createClass(Argument, [{\n    key: \"name\",\n    value: function name() {\n      return this._name;\n    }\n    /**\n     * @api private\n     */\n\n  }, {\n    key: \"_concatValue\",\n    value: function _concatValue(value, previous) {\n      if (previous === this.defaultValue || !Array.isArray(previous)) {\n        return [value];\n      }\n\n      return previous.concat(value);\n    }\n    /**\n     * Set the default value, and optionally supply the description to be displayed in the help.\n     *\n     * @param {any} value\n     * @param {string} [description]\n     * @return {Argument}\n     */\n\n  }, {\n    key: \"default\",\n    value: function _default(value, description) {\n      this.defaultValue = value;\n      this.defaultValueDescription = description;\n      return this;\n    }\n    /**\n     * Set the custom handler for processing CLI command arguments into argument values.\n     *\n     * @param {Function} [fn]\n     * @return {Argument}\n     */\n\n  }, {\n    key: \"argParser\",\n    value: function argParser(fn) {\n      this.parseArg = fn;\n      return this;\n    }\n    /**\n     * Only allow argument value to be one of choices.\n     *\n     * @param {string[]} values\n     * @return {Argument}\n     */\n\n  }, {\n    key: \"choices\",\n    value: function choices(values) {\n      var _this = this;\n\n      this.argChoices = values.slice();\n\n      this.parseArg = function (arg, previous) {\n        if (!_this.argChoices.includes(arg)) {\n          throw new InvalidArgumentError(\"Allowed choices are \".concat(_this.argChoices.join(', '), \".\"));\n        }\n\n        if (_this.variadic) {\n          return _this._concatValue(arg, previous);\n        }\n\n        return arg;\n      };\n\n      return this;\n    }\n    /**\n     * Make argument required.\n     */\n\n  }, {\n    key: \"argRequired\",\n    value: function argRequired() {\n      this.required = true;\n      return this;\n    }\n    /**\n     * Make argument optional.\n     */\n\n  }, {\n    key: \"argOptional\",\n    value: function argOptional() {\n      this.required = false;\n      return this;\n    }\n  }]);\n\n  return Argument;\n}();\n/**\n * Takes an argument and returns its human readable equivalent for help usage.\n *\n * @param {Argument} arg\n * @return {string}\n * @api private\n */\n\n\nfunction humanReadableArgName(arg) {\n  var nameOutput = arg.name() + (arg.variadic === true ? '...' : '');\n  return arg.required ? '<' + nameOutput + '>' : '[' + nameOutput + ']';\n}\n\nexports.Argument = Argument;\nexports.humanReadableArgName = humanReadableArgName;\n\n//# sourceURL=webpack://lai-cmd/./node_modules/commander/lib/argument.js?");

/***/ }),

/***/ "./node_modules/commander/lib/command.js":
/*!***********************************************!*\
  !*** ./node_modules/commander/lib/command.js ***!
  \***********************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("function _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread(); }\n\nfunction _nonIterableSpread() { throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); }\n\nfunction _iterableToArray(iter) { if (typeof Symbol !== \"undefined\" && iter[Symbol.iterator] != null || iter[\"@@iterator\"] != null) return Array.from(iter); }\n\nfunction _arrayWithoutHoles(arr) { if (Array.isArray(arr)) return _arrayLikeToArray(arr); }\n\nfunction asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }\n\nfunction _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err); } _next(undefined); }); }; }\n\nfunction _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }\n\nfunction _nonIterableRest() { throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\nfunction _iterableToArrayLimit(arr, i) { var _i = arr == null ? null : typeof Symbol !== \"undefined\" && arr[Symbol.iterator] || arr[\"@@iterator\"]; if (_i == null) return; var _arr = []; var _n = true; var _d = false; var _s, _e; try { for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i[\"return\"] != null) _i[\"return\"](); } finally { if (_d) throw _e; } } return _arr; }\n\nfunction _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }\n\nfunction _typeof(obj) { \"@babel/helpers - typeof\"; return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && \"function\" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }, _typeof(obj); }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, \"prototype\", { writable: false }); return Constructor; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function\"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); Object.defineProperty(subClass, \"prototype\", { writable: false }); if (superClass) _setPrototypeOf(subClass, superClass); }\n\nfunction _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) { return call; } else if (call !== void 0) { throw new TypeError(\"Derived constructors may only return object or undefined\"); } return _assertThisInitialized(self); }\n\nfunction _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return self; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\nfunction _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }\n\nvar EventEmitter = (__webpack_require__(/*! events */ \"events\").EventEmitter);\n\nvar childProcess = __webpack_require__(/*! child_process */ \"child_process\");\n\nvar path = __webpack_require__(/*! path */ \"path\");\n\nvar fs = __webpack_require__(/*! fs */ \"fs\");\n\nvar _require = __webpack_require__(/*! ./argument.js */ \"./node_modules/commander/lib/argument.js\"),\n    Argument = _require.Argument,\n    humanReadableArgName = _require.humanReadableArgName;\n\nvar _require2 = __webpack_require__(/*! ./error.js */ \"./node_modules/commander/lib/error.js\"),\n    CommanderError = _require2.CommanderError;\n\nvar _require3 = __webpack_require__(/*! ./help.js */ \"./node_modules/commander/lib/help.js\"),\n    Help = _require3.Help;\n\nvar _require4 = __webpack_require__(/*! ./option.js */ \"./node_modules/commander/lib/option.js\"),\n    Option = _require4.Option,\n    splitOptionFlags = _require4.splitOptionFlags;\n\nvar _require5 = __webpack_require__(/*! ./suggestSimilar */ \"./node_modules/commander/lib/suggestSimilar.js\"),\n    suggestSimilar = _require5.suggestSimilar; // @ts-check\n\n\nvar Command = /*#__PURE__*/function (_EventEmitter) {\n  _inherits(Command, _EventEmitter);\n\n  var _super = _createSuper(Command);\n\n  /**\n   * Initialize a new `Command`.\n   *\n   * @param {string} [name]\n   */\n  function Command(name) {\n    var _this;\n\n    _classCallCheck(this, Command);\n\n    _this = _super.call(this);\n    /** @type {Command[]} */\n\n    _this.commands = [];\n    /** @type {Option[]} */\n\n    _this.options = [];\n    _this.parent = null;\n    _this._allowUnknownOption = false;\n    _this._allowExcessArguments = true;\n    /** @type {Argument[]} */\n\n    _this._args = [];\n    /** @type {string[]} */\n\n    _this.args = []; // cli args with options removed\n\n    _this.rawArgs = [];\n    _this.processedArgs = []; // like .args but after custom processing and collecting variadic\n\n    _this._scriptPath = null;\n    _this._name = name || '';\n    _this._optionValues = {};\n    _this._optionValueSources = {}; // default < config < env < cli\n\n    _this._storeOptionsAsProperties = false;\n    _this._actionHandler = null;\n    _this._executableHandler = false;\n    _this._executableFile = null; // custom name for executable\n\n    _this._executableDir = null; // custom search directory for subcommands\n\n    _this._defaultCommandName = null;\n    _this._exitCallback = null;\n    _this._aliases = [];\n    _this._combineFlagAndOptionalValue = true;\n    _this._description = '';\n    _this._argsDescription = undefined; // legacy\n\n    _this._enablePositionalOptions = false;\n    _this._passThroughOptions = false;\n    _this._lifeCycleHooks = {}; // a hash of arrays\n\n    /** @type {boolean | string} */\n\n    _this._showHelpAfterError = false;\n    _this._showSuggestionAfterError = true; // see .configureOutput() for docs\n\n    _this._outputConfiguration = {\n      writeOut: function writeOut(str) {\n        return process.stdout.write(str);\n      },\n      writeErr: function writeErr(str) {\n        return process.stderr.write(str);\n      },\n      getOutHelpWidth: function getOutHelpWidth() {\n        return process.stdout.isTTY ? process.stdout.columns : undefined;\n      },\n      getErrHelpWidth: function getErrHelpWidth() {\n        return process.stderr.isTTY ? process.stderr.columns : undefined;\n      },\n      outputError: function outputError(str, write) {\n        return write(str);\n      }\n    };\n    _this._hidden = false;\n    _this._hasHelpOption = true;\n    _this._helpFlags = '-h, --help';\n    _this._helpDescription = 'display help for command';\n    _this._helpShortFlag = '-h';\n    _this._helpLongFlag = '--help';\n    _this._addImplicitHelpCommand = undefined; // Deliberately undefined, not decided whether true or false\n\n    _this._helpCommandName = 'help';\n    _this._helpCommandnameAndArgs = 'help [command]';\n    _this._helpCommandDescription = 'display help for command';\n    _this._helpConfiguration = {};\n    return _this;\n  }\n  /**\n   * Copy settings that are useful to have in common across root command and subcommands.\n   *\n   * (Used internally when adding a command using `.command()` so subcommands inherit parent settings.)\n   *\n   * @param {Command} sourceCommand\n   * @return {Command} `this` command for chaining\n   */\n\n\n  _createClass(Command, [{\n    key: \"copyInheritedSettings\",\n    value: function copyInheritedSettings(sourceCommand) {\n      this._outputConfiguration = sourceCommand._outputConfiguration;\n      this._hasHelpOption = sourceCommand._hasHelpOption;\n      this._helpFlags = sourceCommand._helpFlags;\n      this._helpDescription = sourceCommand._helpDescription;\n      this._helpShortFlag = sourceCommand._helpShortFlag;\n      this._helpLongFlag = sourceCommand._helpLongFlag;\n      this._helpCommandName = sourceCommand._helpCommandName;\n      this._helpCommandnameAndArgs = sourceCommand._helpCommandnameAndArgs;\n      this._helpCommandDescription = sourceCommand._helpCommandDescription;\n      this._helpConfiguration = sourceCommand._helpConfiguration;\n      this._exitCallback = sourceCommand._exitCallback;\n      this._storeOptionsAsProperties = sourceCommand._storeOptionsAsProperties;\n      this._combineFlagAndOptionalValue = sourceCommand._combineFlagAndOptionalValue;\n      this._allowExcessArguments = sourceCommand._allowExcessArguments;\n      this._enablePositionalOptions = sourceCommand._enablePositionalOptions;\n      this._showHelpAfterError = sourceCommand._showHelpAfterError;\n      this._showSuggestionAfterError = sourceCommand._showSuggestionAfterError;\n      return this;\n    }\n    /**\n     * Define a command.\n     *\n     * There are two styles of command: pay attention to where to put the description.\n     *\n     * @example\n     * // Command implemented using action handler (description is supplied separately to `.command`)\n     * program\n     *   .command('clone <source> [destination]')\n     *   .description('clone a repository into a newly created directory')\n     *   .action((source, destination) => {\n     *     console.log('clone command called');\n     *   });\n     *\n     * // Command implemented using separate executable file (description is second parameter to `.command`)\n     * program\n     *   .command('start <service>', 'start named service')\n     *   .command('stop [service]', 'stop named service, or all if no name supplied');\n     *\n     * @param {string} nameAndArgs - command name and arguments, args are `<required>` or `[optional]` and last may also be `variadic...`\n     * @param {Object|string} [actionOptsOrExecDesc] - configuration options (for action), or description (for executable)\n     * @param {Object} [execOpts] - configuration options (for executable)\n     * @return {Command} returns new command for action handler, or `this` for executable command\n     */\n\n  }, {\n    key: \"command\",\n    value: function command(nameAndArgs, actionOptsOrExecDesc, execOpts) {\n      var desc = actionOptsOrExecDesc;\n      var opts = execOpts;\n\n      if (_typeof(desc) === 'object' && desc !== null) {\n        opts = desc;\n        desc = null;\n      }\n\n      opts = opts || {};\n\n      var _nameAndArgs$match = nameAndArgs.match(/([^ ]+) *(.*)/),\n          _nameAndArgs$match2 = _slicedToArray(_nameAndArgs$match, 3),\n          name = _nameAndArgs$match2[1],\n          args = _nameAndArgs$match2[2];\n\n      var cmd = this.createCommand(name);\n\n      if (desc) {\n        cmd.description(desc);\n        cmd._executableHandler = true;\n      }\n\n      if (opts.isDefault) this._defaultCommandName = cmd._name;\n      cmd._hidden = !!(opts.noHelp || opts.hidden); // noHelp is deprecated old name for hidden\n\n      cmd._executableFile = opts.executableFile || null; // Custom name for executable file, set missing to null to match constructor\n\n      if (args) cmd.arguments(args);\n      this.commands.push(cmd);\n      cmd.parent = this;\n      cmd.copyInheritedSettings(this);\n      if (desc) return this;\n      return cmd;\n    }\n    /**\n     * Factory routine to create a new unattached command.\n     *\n     * See .command() for creating an attached subcommand, which uses this routine to\n     * create the command. You can override createCommand to customise subcommands.\n     *\n     * @param {string} [name]\n     * @return {Command} new command\n     */\n\n  }, {\n    key: \"createCommand\",\n    value: function createCommand(name) {\n      return new Command(name);\n    }\n    /**\n     * You can customise the help with a subclass of Help by overriding createHelp,\n     * or by overriding Help properties using configureHelp().\n     *\n     * @return {Help}\n     */\n\n  }, {\n    key: \"createHelp\",\n    value: function createHelp() {\n      return Object.assign(new Help(), this.configureHelp());\n    }\n    /**\n     * You can customise the help by overriding Help properties using configureHelp(),\n     * or with a subclass of Help by overriding createHelp().\n     *\n     * @param {Object} [configuration] - configuration options\n     * @return {Command|Object} `this` command for chaining, or stored configuration\n     */\n\n  }, {\n    key: \"configureHelp\",\n    value: function configureHelp(configuration) {\n      if (configuration === undefined) return this._helpConfiguration;\n      this._helpConfiguration = configuration;\n      return this;\n    }\n    /**\n     * The default output goes to stdout and stderr. You can customise this for special\n     * applications. You can also customise the display of errors by overriding outputError.\n     *\n     * The configuration properties are all functions:\n     *\n     *     // functions to change where being written, stdout and stderr\n     *     writeOut(str)\n     *     writeErr(str)\n     *     // matching functions to specify width for wrapping help\n     *     getOutHelpWidth()\n     *     getErrHelpWidth()\n     *     // functions based on what is being written out\n     *     outputError(str, write) // used for displaying errors, and not used for displaying help\n     *\n     * @param {Object} [configuration] - configuration options\n     * @return {Command|Object} `this` command for chaining, or stored configuration\n     */\n\n  }, {\n    key: \"configureOutput\",\n    value: function configureOutput(configuration) {\n      if (configuration === undefined) return this._outputConfiguration;\n      Object.assign(this._outputConfiguration, configuration);\n      return this;\n    }\n    /**\n     * Display the help or a custom message after an error occurs.\n     *\n     * @param {boolean|string} [displayHelp]\n     * @return {Command} `this` command for chaining\n     */\n\n  }, {\n    key: \"showHelpAfterError\",\n    value: function showHelpAfterError() {\n      var displayHelp = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;\n      if (typeof displayHelp !== 'string') displayHelp = !!displayHelp;\n      this._showHelpAfterError = displayHelp;\n      return this;\n    }\n    /**\n     * Display suggestion of similar commands for unknown commands, or options for unknown options.\n     *\n     * @param {boolean} [displaySuggestion]\n     * @return {Command} `this` command for chaining\n     */\n\n  }, {\n    key: \"showSuggestionAfterError\",\n    value: function showSuggestionAfterError() {\n      var displaySuggestion = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;\n      this._showSuggestionAfterError = !!displaySuggestion;\n      return this;\n    }\n    /**\n     * Add a prepared subcommand.\n     *\n     * See .command() for creating an attached subcommand which inherits settings from its parent.\n     *\n     * @param {Command} cmd - new subcommand\n     * @param {Object} [opts] - configuration options\n     * @return {Command} `this` command for chaining\n     */\n\n  }, {\n    key: \"addCommand\",\n    value: function addCommand(cmd, opts) {\n      if (!cmd._name) {\n        throw new Error(\"Command passed to .addCommand() must have a name\\n- specify the name in Command constructor or using .name()\");\n      }\n\n      opts = opts || {};\n      if (opts.isDefault) this._defaultCommandName = cmd._name;\n      if (opts.noHelp || opts.hidden) cmd._hidden = true; // modifying passed command due to existing implementation\n\n      this.commands.push(cmd);\n      cmd.parent = this;\n      return this;\n    }\n    /**\n     * Factory routine to create a new unattached argument.\n     *\n     * See .argument() for creating an attached argument, which uses this routine to\n     * create the argument. You can override createArgument to return a custom argument.\n     *\n     * @param {string} name\n     * @param {string} [description]\n     * @return {Argument} new argument\n     */\n\n  }, {\n    key: \"createArgument\",\n    value: function createArgument(name, description) {\n      return new Argument(name, description);\n    }\n    /**\n     * Define argument syntax for command.\n     *\n     * The default is that the argument is required, and you can explicitly\n     * indicate this with <> around the name. Put [] around the name for an optional argument.\n     *\n     * @example\n     * program.argument('<input-file>');\n     * program.argument('[output-file]');\n     *\n     * @param {string} name\n     * @param {string} [description]\n     * @param {Function|*} [fn] - custom argument processing function\n     * @param {*} [defaultValue]\n     * @return {Command} `this` command for chaining\n     */\n\n  }, {\n    key: \"argument\",\n    value: function argument(name, description, fn, defaultValue) {\n      var argument = this.createArgument(name, description);\n\n      if (typeof fn === 'function') {\n        argument[\"default\"](defaultValue).argParser(fn);\n      } else {\n        argument[\"default\"](fn);\n      }\n\n      this.addArgument(argument);\n      return this;\n    }\n    /**\n     * Define argument syntax for command, adding multiple at once (without descriptions).\n     *\n     * See also .argument().\n     *\n     * @example\n     * program.arguments('<cmd> [env]');\n     *\n     * @param {string} names\n     * @return {Command} `this` command for chaining\n     */\n\n  }, {\n    key: \"arguments\",\n    value: function _arguments(names) {\n      var _this2 = this;\n\n      names.split(/ +/).forEach(function (detail) {\n        _this2.argument(detail);\n      });\n      return this;\n    }\n    /**\n     * Define argument syntax for command, adding a prepared argument.\n     *\n     * @param {Argument} argument\n     * @return {Command} `this` command for chaining\n     */\n\n  }, {\n    key: \"addArgument\",\n    value: function addArgument(argument) {\n      var previousArgument = this._args.slice(-1)[0];\n\n      if (previousArgument && previousArgument.variadic) {\n        throw new Error(\"only the last argument can be variadic '\".concat(previousArgument.name(), \"'\"));\n      }\n\n      if (argument.required && argument.defaultValue !== undefined && argument.parseArg === undefined) {\n        throw new Error(\"a default value for a required argument is never used: '\".concat(argument.name(), \"'\"));\n      }\n\n      this._args.push(argument);\n\n      return this;\n    }\n    /**\n     * Override default decision whether to add implicit help command.\n     *\n     *    addHelpCommand() // force on\n     *    addHelpCommand(false); // force off\n     *    addHelpCommand('help [cmd]', 'display help for [cmd]'); // force on with custom details\n     *\n     * @return {Command} `this` command for chaining\n     */\n\n  }, {\n    key: \"addHelpCommand\",\n    value: function addHelpCommand(enableOrNameAndArgs, description) {\n      if (enableOrNameAndArgs === false) {\n        this._addImplicitHelpCommand = false;\n      } else {\n        this._addImplicitHelpCommand = true;\n\n        if (typeof enableOrNameAndArgs === 'string') {\n          this._helpCommandName = enableOrNameAndArgs.split(' ')[0];\n          this._helpCommandnameAndArgs = enableOrNameAndArgs;\n        }\n\n        this._helpCommandDescription = description || this._helpCommandDescription;\n      }\n\n      return this;\n    }\n    /**\n     * @return {boolean}\n     * @api private\n     */\n\n  }, {\n    key: \"_hasImplicitHelpCommand\",\n    value: function _hasImplicitHelpCommand() {\n      if (this._addImplicitHelpCommand === undefined) {\n        return this.commands.length && !this._actionHandler && !this._findCommand('help');\n      }\n\n      return this._addImplicitHelpCommand;\n    }\n    /**\n     * Add hook for life cycle event.\n     *\n     * @param {string} event\n     * @param {Function} listener\n     * @return {Command} `this` command for chaining\n     */\n\n  }, {\n    key: \"hook\",\n    value: function hook(event, listener) {\n      var allowedValues = ['preAction', 'postAction'];\n\n      if (!allowedValues.includes(event)) {\n        throw new Error(\"Unexpected value for event passed to hook : '\".concat(event, \"'.\\nExpecting one of '\").concat(allowedValues.join(\"', '\"), \"'\"));\n      }\n\n      if (this._lifeCycleHooks[event]) {\n        this._lifeCycleHooks[event].push(listener);\n      } else {\n        this._lifeCycleHooks[event] = [listener];\n      }\n\n      return this;\n    }\n    /**\n     * Register callback to use as replacement for calling process.exit.\n     *\n     * @param {Function} [fn] optional callback which will be passed a CommanderError, defaults to throwing\n     * @return {Command} `this` command for chaining\n     */\n\n  }, {\n    key: \"exitOverride\",\n    value: function exitOverride(fn) {\n      if (fn) {\n        this._exitCallback = fn;\n      } else {\n        this._exitCallback = function (err) {\n          if (err.code !== 'commander.executeSubCommandAsync') {\n            throw err;\n          } else {// Async callback from spawn events, not useful to throw.\n          }\n        };\n      }\n\n      return this;\n    }\n    /**\n     * Call process.exit, and _exitCallback if defined.\n     *\n     * @param {number} exitCode exit code for using with process.exit\n     * @param {string} code an id string representing the error\n     * @param {string} message human-readable description of the error\n     * @return never\n     * @api private\n     */\n\n  }, {\n    key: \"_exit\",\n    value: function _exit(exitCode, code, message) {\n      if (this._exitCallback) {\n        this._exitCallback(new CommanderError(exitCode, code, message)); // Expecting this line is not reached.\n\n      }\n\n      process.exit(exitCode);\n    }\n    /**\n     * Register callback `fn` for the command.\n     *\n     * @example\n     * program\n     *   .command('serve')\n     *   .description('start service')\n     *   .action(function() {\n     *      // do work here\n     *   });\n     *\n     * @param {Function} fn\n     * @return {Command} `this` command for chaining\n     */\n\n  }, {\n    key: \"action\",\n    value: function action(fn) {\n      var _this3 = this;\n\n      var listener = function listener(args) {\n        // The .action callback takes an extra parameter which is the command or options.\n        var expectedArgsCount = _this3._args.length;\n        var actionArgs = args.slice(0, expectedArgsCount);\n\n        if (_this3._storeOptionsAsProperties) {\n          actionArgs[expectedArgsCount] = _this3; // backwards compatible \"options\"\n        } else {\n          actionArgs[expectedArgsCount] = _this3.opts();\n        }\n\n        actionArgs.push(_this3);\n        return fn.apply(_this3, actionArgs);\n      };\n\n      this._actionHandler = listener;\n      return this;\n    }\n    /**\n     * Factory routine to create a new unattached option.\n     *\n     * See .option() for creating an attached option, which uses this routine to\n     * create the option. You can override createOption to return a custom option.\n     *\n     * @param {string} flags\n     * @param {string} [description]\n     * @return {Option} new option\n     */\n\n  }, {\n    key: \"createOption\",\n    value: function createOption(flags, description) {\n      return new Option(flags, description);\n    }\n    /**\n     * Add an option.\n     *\n     * @param {Option} option\n     * @return {Command} `this` command for chaining\n     */\n\n  }, {\n    key: \"addOption\",\n    value: function addOption(option) {\n      var _this4 = this;\n\n      var oname = option.name();\n      var name = option.attributeName(); // store default value\n\n      if (option.negate) {\n        // --no-foo is special and defaults foo to true, unless a --foo option is already defined\n        var positiveLongFlag = option[\"long\"].replace(/^--no-/, '--');\n\n        if (!this._findOption(positiveLongFlag)) {\n          this.setOptionValueWithSource(name, option.defaultValue === undefined ? true : option.defaultValue, 'default');\n        }\n      } else if (option.defaultValue !== undefined) {\n        this.setOptionValueWithSource(name, option.defaultValue, 'default');\n      } // register the option\n\n\n      this.options.push(option); // handler for cli and env supplied values\n\n      var handleOptionValue = function handleOptionValue(val, invalidValueMessage, valueSource) {\n        // val is null for optional option used without an optional-argument.\n        // val is undefined for boolean and negated option.\n        if (val == null && option.presetArg !== undefined) {\n          val = option.presetArg;\n        } // custom processing\n\n\n        var oldValue = _this4.getOptionValue(name);\n\n        if (val !== null && option.parseArg) {\n          try {\n            val = option.parseArg(val, oldValue);\n          } catch (err) {\n            if (err.code === 'commander.invalidArgument') {\n              var message = \"\".concat(invalidValueMessage, \" \").concat(err.message);\n\n              _this4.error(message, {\n                exitCode: err.exitCode,\n                code: err.code\n              });\n            }\n\n            throw err;\n          }\n        } else if (val !== null && option.variadic) {\n          val = option._concatValue(val, oldValue);\n        } // Fill-in appropriate missing values. Long winded but easy to follow.\n\n\n        if (val == null) {\n          if (option.negate) {\n            val = false;\n          } else if (option.isBoolean() || option.optional) {\n            val = true;\n          } else {\n            val = ''; // not normal, parseArg might have failed or be a mock function for testing\n          }\n        }\n\n        _this4.setOptionValueWithSource(name, val, valueSource);\n      };\n\n      this.on('option:' + oname, function (val) {\n        var invalidValueMessage = \"error: option '\".concat(option.flags, \"' argument '\").concat(val, \"' is invalid.\");\n        handleOptionValue(val, invalidValueMessage, 'cli');\n      });\n\n      if (option.envVar) {\n        this.on('optionEnv:' + oname, function (val) {\n          var invalidValueMessage = \"error: option '\".concat(option.flags, \"' value '\").concat(val, \"' from env '\").concat(option.envVar, \"' is invalid.\");\n          handleOptionValue(val, invalidValueMessage, 'env');\n        });\n      }\n\n      return this;\n    }\n    /**\n     * Internal implementation shared by .option() and .requiredOption()\n     *\n     * @api private\n     */\n\n  }, {\n    key: \"_optionEx\",\n    value: function _optionEx(config, flags, description, fn, defaultValue) {\n      if (_typeof(flags) === 'object' && flags instanceof Option) {\n        throw new Error('To add an Option object use addOption() instead of option() or requiredOption()');\n      }\n\n      var option = this.createOption(flags, description);\n      option.makeOptionMandatory(!!config.mandatory);\n\n      if (typeof fn === 'function') {\n        option[\"default\"](defaultValue).argParser(fn);\n      } else if (fn instanceof RegExp) {\n        // deprecated\n        var regex = fn;\n\n        fn = function fn(val, def) {\n          var m = regex.exec(val);\n          return m ? m[0] : def;\n        };\n\n        option[\"default\"](defaultValue).argParser(fn);\n      } else {\n        option[\"default\"](fn);\n      }\n\n      return this.addOption(option);\n    }\n    /**\n     * Define option with `flags`, `description` and optional\n     * coercion `fn`.\n     *\n     * The `flags` string contains the short and/or long flags,\n     * separated by comma, a pipe or space. The following are all valid\n     * all will output this way when `--help` is used.\n     *\n     *     \"-p, --pepper\"\n     *     \"-p|--pepper\"\n     *     \"-p --pepper\"\n     *\n     * @example\n     * // simple boolean defaulting to undefined\n     * program.option('-p, --pepper', 'add pepper');\n     *\n     * program.pepper\n     * // => undefined\n     *\n     * --pepper\n     * program.pepper\n     * // => true\n     *\n     * // simple boolean defaulting to true (unless non-negated option is also defined)\n     * program.option('-C, --no-cheese', 'remove cheese');\n     *\n     * program.cheese\n     * // => true\n     *\n     * --no-cheese\n     * program.cheese\n     * // => false\n     *\n     * // required argument\n     * program.option('-C, --chdir <path>', 'change the working directory');\n     *\n     * --chdir /tmp\n     * program.chdir\n     * // => \"/tmp\"\n     *\n     * // optional argument\n     * program.option('-c, --cheese [type]', 'add cheese [marble]');\n     *\n     * @param {string} flags\n     * @param {string} [description]\n     * @param {Function|*} [fn] - custom option processing function or default value\n     * @param {*} [defaultValue]\n     * @return {Command} `this` command for chaining\n     */\n\n  }, {\n    key: \"option\",\n    value: function option(flags, description, fn, defaultValue) {\n      return this._optionEx({}, flags, description, fn, defaultValue);\n    }\n    /**\n    * Add a required option which must have a value after parsing. This usually means\n    * the option must be specified on the command line. (Otherwise the same as .option().)\n    *\n    * The `flags` string contains the short and/or long flags, separated by comma, a pipe or space.\n    *\n    * @param {string} flags\n    * @param {string} [description]\n    * @param {Function|*} [fn] - custom option processing function or default value\n    * @param {*} [defaultValue]\n    * @return {Command} `this` command for chaining\n    */\n\n  }, {\n    key: \"requiredOption\",\n    value: function requiredOption(flags, description, fn, defaultValue) {\n      return this._optionEx({\n        mandatory: true\n      }, flags, description, fn, defaultValue);\n    }\n    /**\n     * Alter parsing of short flags with optional values.\n     *\n     * @example\n     * // for `.option('-f,--flag [value]'):\n     * program.combineFlagAndOptionalValue(true);  // `-f80` is treated like `--flag=80`, this is the default behaviour\n     * program.combineFlagAndOptionalValue(false) // `-fb` is treated like `-f -b`\n     *\n     * @param {Boolean} [combine=true] - if `true` or omitted, an optional value can be specified directly after the flag.\n     */\n\n  }, {\n    key: \"combineFlagAndOptionalValue\",\n    value: function combineFlagAndOptionalValue() {\n      var combine = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;\n      this._combineFlagAndOptionalValue = !!combine;\n      return this;\n    }\n    /**\n     * Allow unknown options on the command line.\n     *\n     * @param {Boolean} [allowUnknown=true] - if `true` or omitted, no error will be thrown\n     * for unknown options.\n     */\n\n  }, {\n    key: \"allowUnknownOption\",\n    value: function allowUnknownOption() {\n      var allowUnknown = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;\n      this._allowUnknownOption = !!allowUnknown;\n      return this;\n    }\n    /**\n     * Allow excess command-arguments on the command line. Pass false to make excess arguments an error.\n     *\n     * @param {Boolean} [allowExcess=true] - if `true` or omitted, no error will be thrown\n     * for excess arguments.\n     */\n\n  }, {\n    key: \"allowExcessArguments\",\n    value: function allowExcessArguments() {\n      var allowExcess = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;\n      this._allowExcessArguments = !!allowExcess;\n      return this;\n    }\n    /**\n     * Enable positional options. Positional means global options are specified before subcommands which lets\n     * subcommands reuse the same option names, and also enables subcommands to turn on passThroughOptions.\n     * The default behaviour is non-positional and global options may appear anywhere on the command line.\n     *\n     * @param {Boolean} [positional=true]\n     */\n\n  }, {\n    key: \"enablePositionalOptions\",\n    value: function enablePositionalOptions() {\n      var positional = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;\n      this._enablePositionalOptions = !!positional;\n      return this;\n    }\n    /**\n     * Pass through options that come after command-arguments rather than treat them as command-options,\n     * so actual command-options come before command-arguments. Turning this on for a subcommand requires\n     * positional options to have been enabled on the program (parent commands).\n     * The default behaviour is non-positional and options may appear before or after command-arguments.\n     *\n     * @param {Boolean} [passThrough=true]\n     * for unknown options.\n     */\n\n  }, {\n    key: \"passThroughOptions\",\n    value: function passThroughOptions() {\n      var passThrough = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;\n      this._passThroughOptions = !!passThrough;\n\n      if (!!this.parent && passThrough && !this.parent._enablePositionalOptions) {\n        throw new Error('passThroughOptions can not be used without turning on enablePositionalOptions for parent command(s)');\n      }\n\n      return this;\n    }\n    /**\n      * Whether to store option values as properties on command object,\n      * or store separately (specify false). In both cases the option values can be accessed using .opts().\n      *\n      * @param {boolean} [storeAsProperties=true]\n      * @return {Command} `this` command for chaining\n      */\n\n  }, {\n    key: \"storeOptionsAsProperties\",\n    value: function storeOptionsAsProperties() {\n      var storeAsProperties = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;\n      this._storeOptionsAsProperties = !!storeAsProperties;\n\n      if (this.options.length) {\n        throw new Error('call .storeOptionsAsProperties() before adding options');\n      }\n\n      return this;\n    }\n    /**\n     * Retrieve option value.\n     *\n     * @param {string} key\n     * @return {Object} value\n     */\n\n  }, {\n    key: \"getOptionValue\",\n    value: function getOptionValue(key) {\n      if (this._storeOptionsAsProperties) {\n        return this[key];\n      }\n\n      return this._optionValues[key];\n    }\n    /**\n     * Store option value.\n     *\n     * @param {string} key\n     * @param {Object} value\n     * @return {Command} `this` command for chaining\n     */\n\n  }, {\n    key: \"setOptionValue\",\n    value: function setOptionValue(key, value) {\n      if (this._storeOptionsAsProperties) {\n        this[key] = value;\n      } else {\n        this._optionValues[key] = value;\n      }\n\n      return this;\n    }\n    /**\n     * Store option value and where the value came from.\n      *\n      * @param {string} key\n      * @param {Object} value\n      * @param {string} source - expected values are default/config/env/cli\n      * @return {Command} `this` command for chaining\n      */\n\n  }, {\n    key: \"setOptionValueWithSource\",\n    value: function setOptionValueWithSource(key, value, source) {\n      this.setOptionValue(key, value);\n      this._optionValueSources[key] = source;\n      return this;\n    }\n    /**\n      * Get source of option value.\n      * Expected values are default | config | env | cli\n      *\n      * @param {string} key\n      * @return {string}\n      */\n\n  }, {\n    key: \"getOptionValueSource\",\n    value: function getOptionValueSource(key) {\n      return this._optionValueSources[key];\n    }\n    /**\n     * Get user arguments from implied or explicit arguments.\n     * Side-effects: set _scriptPath if args included script. Used for default program name, and subcommand searches.\n     *\n     * @api private\n     */\n\n  }, {\n    key: \"_prepareUserArgs\",\n    value: function _prepareUserArgs(argv, parseOptions) {\n      if (argv !== undefined && !Array.isArray(argv)) {\n        throw new Error('first parameter to parse must be array or undefined');\n      }\n\n      parseOptions = parseOptions || {}; // Default to using process.argv\n\n      if (argv === undefined) {\n        argv = process.argv; // @ts-ignore: unknown property\n\n        if (process.versions && process.versions.electron) {\n          parseOptions.from = 'electron';\n        }\n      }\n\n      this.rawArgs = argv.slice(); // make it a little easier for callers by supporting various argv conventions\n\n      var userArgs;\n\n      switch (parseOptions.from) {\n        case undefined:\n        case 'node':\n          this._scriptPath = argv[1];\n          userArgs = argv.slice(2);\n          break;\n\n        case 'electron':\n          // @ts-ignore: unknown property\n          if (process.defaultApp) {\n            this._scriptPath = argv[1];\n            userArgs = argv.slice(2);\n          } else {\n            userArgs = argv.slice(1);\n          }\n\n          break;\n\n        case 'user':\n          userArgs = argv.slice(0);\n          break;\n\n        default:\n          throw new Error(\"unexpected parse option { from: '\".concat(parseOptions.from, \"' }\"));\n      } // Find default name for program from arguments.\n\n\n      if (!this._name && this._scriptPath) this.nameFromFilename(this._scriptPath);\n      this._name = this._name || 'program';\n      return userArgs;\n    }\n    /**\n     * Parse `argv`, setting options and invoking commands when defined.\n     *\n     * The default expectation is that the arguments are from node and have the application as argv[0]\n     * and the script being run in argv[1], with user parameters after that.\n     *\n     * @example\n     * program.parse(process.argv);\n     * program.parse(); // implicitly use process.argv and auto-detect node vs electron conventions\n     * program.parse(my-args, { from: 'user' }); // just user supplied arguments, nothing special about argv[0]\n     *\n     * @param {string[]} [argv] - optional, defaults to process.argv\n     * @param {Object} [parseOptions] - optionally specify style of options with from: node/user/electron\n     * @param {string} [parseOptions.from] - where the args are from: 'node', 'user', 'electron'\n     * @return {Command} `this` command for chaining\n     */\n\n  }, {\n    key: \"parse\",\n    value: function parse(argv, parseOptions) {\n      var userArgs = this._prepareUserArgs(argv, parseOptions);\n\n      this._parseCommand([], userArgs);\n\n      return this;\n    }\n    /**\n     * Parse `argv`, setting options and invoking commands when defined.\n     *\n     * Use parseAsync instead of parse if any of your action handlers are async. Returns a Promise.\n     *\n     * The default expectation is that the arguments are from node and have the application as argv[0]\n     * and the script being run in argv[1], with user parameters after that.\n     *\n     * @example\n     * await program.parseAsync(process.argv);\n     * await program.parseAsync(); // implicitly use process.argv and auto-detect node vs electron conventions\n     * await program.parseAsync(my-args, { from: 'user' }); // just user supplied arguments, nothing special about argv[0]\n     *\n     * @param {string[]} [argv]\n     * @param {Object} [parseOptions]\n     * @param {string} parseOptions.from - where the args are from: 'node', 'user', 'electron'\n     * @return {Promise}\n     */\n\n  }, {\n    key: \"parseAsync\",\n    value: function () {\n      var _parseAsync = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee(argv, parseOptions) {\n        var userArgs;\n        return regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                userArgs = this._prepareUserArgs(argv, parseOptions);\n                _context.next = 3;\n                return this._parseCommand([], userArgs);\n\n              case 3:\n                return _context.abrupt(\"return\", this);\n\n              case 4:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n\n      function parseAsync(_x, _x2) {\n        return _parseAsync.apply(this, arguments);\n      }\n\n      return parseAsync;\n    }()\n    /**\n     * Execute a sub-command executable.\n     *\n     * @api private\n     */\n\n  }, {\n    key: \"_executeSubCommand\",\n    value: function _executeSubCommand(subcommand, args) {\n      args = args.slice();\n      var launchWithNode = false; // Use node for source targets so do not need to get permissions correct, and on Windows.\n\n      var sourceExt = ['.js', '.ts', '.tsx', '.mjs', '.cjs'];\n\n      function findFile(baseDir, baseName) {\n        // Look for specified file\n        var localBin = path.resolve(baseDir, baseName);\n        if (fs.existsSync(localBin)) return localBin; // Stop looking if candidate already has an expected extension.\n\n        if (sourceExt.includes(path.extname(baseName))) return undefined; // Try all the extensions.\n\n        var foundExt = sourceExt.find(function (ext) {\n          return fs.existsSync(\"\".concat(localBin).concat(ext));\n        });\n        if (foundExt) return \"\".concat(localBin).concat(foundExt);\n        return undefined;\n      } // Not checking for help first. Unlikely to have mandatory and executable, and can't robustly test for help flags in external command.\n\n\n      this._checkForMissingMandatoryOptions(); // executableFile and executableDir might be full path, or just a name\n\n\n      var executableFile = subcommand._executableFile || \"\".concat(this._name, \"-\").concat(subcommand._name);\n      var executableDir = this._executableDir || '';\n\n      if (this._scriptPath) {\n        var resolvedScriptPath; // resolve possible symlink for installed npm binary\n\n        try {\n          resolvedScriptPath = fs.realpathSync(this._scriptPath);\n        } catch (err) {\n          resolvedScriptPath = this._scriptPath;\n        }\n\n        executableDir = path.resolve(path.dirname(resolvedScriptPath), executableDir);\n      } // Look for a local file in preference to a command in PATH.\n\n\n      if (executableDir) {\n        var localFile = findFile(executableDir, executableFile); // Legacy search using prefix of script name instead of command name\n\n        if (!localFile && !subcommand._executableFile && this._scriptPath) {\n          var legacyName = path.basename(this._scriptPath, path.extname(this._scriptPath));\n\n          if (legacyName !== this._name) {\n            localFile = findFile(executableDir, \"\".concat(legacyName, \"-\").concat(subcommand._name));\n          }\n        }\n\n        executableFile = localFile || executableFile;\n      }\n\n      launchWithNode = sourceExt.includes(path.extname(executableFile));\n      var proc;\n\n      if (process.platform !== 'win32') {\n        if (launchWithNode) {\n          args.unshift(executableFile); // add executable arguments to spawn\n\n          args = incrementNodeInspectorPort(process.execArgv).concat(args);\n          proc = childProcess.spawn(process.argv[0], args, {\n            stdio: 'inherit'\n          });\n        } else {\n          proc = childProcess.spawn(executableFile, args, {\n            stdio: 'inherit'\n          });\n        }\n      } else {\n        args.unshift(executableFile); // add executable arguments to spawn\n\n        args = incrementNodeInspectorPort(process.execArgv).concat(args);\n        proc = childProcess.spawn(process.execPath, args, {\n          stdio: 'inherit'\n        });\n      }\n\n      if (!proc.killed) {\n        // testing mainly to avoid leak warnings during unit tests with mocked spawn\n        var signals = ['SIGUSR1', 'SIGUSR2', 'SIGTERM', 'SIGINT', 'SIGHUP'];\n        signals.forEach(function (signal) {\n          // @ts-ignore\n          process.on(signal, function () {\n            if (proc.killed === false && proc.exitCode === null) {\n              proc.kill(signal);\n            }\n          });\n        });\n      } // By default terminate process when spawned process terminates.\n      // Suppressing the exit if exitCallback defined is a bit messy and of limited use, but does allow process to stay running!\n\n\n      var exitCallback = this._exitCallback;\n\n      if (!exitCallback) {\n        proc.on('close', process.exit.bind(process));\n      } else {\n        proc.on('close', function () {\n          exitCallback(new CommanderError(process.exitCode || 0, 'commander.executeSubCommandAsync', '(close)'));\n        });\n      }\n\n      proc.on('error', function (err) {\n        // @ts-ignore\n        if (err.code === 'ENOENT') {\n          var executableDirMessage = executableDir ? \"searched for local subcommand relative to directory '\".concat(executableDir, \"'\") : 'no directory for search for local subcommand, use .executableDir() to supply a custom directory';\n          var executableMissing = \"'\".concat(executableFile, \"' does not exist\\n - if '\").concat(subcommand._name, \"' is not meant to be an executable command, remove description parameter from '.command()' and use '.description()' instead\\n - if the default executable name is not suitable, use the executableFile option to supply a custom name or path\\n - \").concat(executableDirMessage);\n          throw new Error(executableMissing); // @ts-ignore\n        } else if (err.code === 'EACCES') {\n          throw new Error(\"'\".concat(executableFile, \"' not executable\"));\n        }\n\n        if (!exitCallback) {\n          process.exit(1);\n        } else {\n          var wrappedError = new CommanderError(1, 'commander.executeSubCommandAsync', '(error)');\n          wrappedError.nestedError = err;\n          exitCallback(wrappedError);\n        }\n      }); // Store the reference to the child process\n\n      this.runningCommand = proc;\n    }\n    /**\n     * @api private\n     */\n\n  }, {\n    key: \"_dispatchSubcommand\",\n    value: function _dispatchSubcommand(commandName, operands, unknown) {\n      var subCommand = this._findCommand(commandName);\n\n      if (!subCommand) this.help({\n        error: true\n      });\n\n      if (subCommand._executableHandler) {\n        this._executeSubCommand(subCommand, operands.concat(unknown));\n      } else {\n        return subCommand._parseCommand(operands, unknown);\n      }\n    }\n    /**\n     * Check this.args against expected this._args.\n     *\n     * @api private\n     */\n\n  }, {\n    key: \"_checkNumberOfArguments\",\n    value: function _checkNumberOfArguments() {\n      var _this5 = this;\n\n      // too few\n      this._args.forEach(function (arg, i) {\n        if (arg.required && _this5.args[i] == null) {\n          _this5.missingArgument(arg.name());\n        }\n      }); // too many\n\n\n      if (this._args.length > 0 && this._args[this._args.length - 1].variadic) {\n        return;\n      }\n\n      if (this.args.length > this._args.length) {\n        this._excessArguments(this.args);\n      }\n    }\n    /**\n     * Process this.args using this._args and save as this.processedArgs!\n     *\n     * @api private\n     */\n\n  }, {\n    key: \"_processArguments\",\n    value: function _processArguments() {\n      var _this6 = this;\n\n      var myParseArg = function myParseArg(argument, value, previous) {\n        // Extra processing for nice error message on parsing failure.\n        var parsedValue = value;\n\n        if (value !== null && argument.parseArg) {\n          try {\n            parsedValue = argument.parseArg(value, previous);\n          } catch (err) {\n            if (err.code === 'commander.invalidArgument') {\n              var message = \"error: command-argument value '\".concat(value, \"' is invalid for argument '\").concat(argument.name(), \"'. \").concat(err.message);\n\n              _this6.error(message, {\n                exitCode: err.exitCode,\n                code: err.code\n              });\n            }\n\n            throw err;\n          }\n        }\n\n        return parsedValue;\n      };\n\n      this._checkNumberOfArguments();\n\n      var processedArgs = [];\n\n      this._args.forEach(function (declaredArg, index) {\n        var value = declaredArg.defaultValue;\n\n        if (declaredArg.variadic) {\n          // Collect together remaining arguments for passing together as an array.\n          if (index < _this6.args.length) {\n            value = _this6.args.slice(index);\n\n            if (declaredArg.parseArg) {\n              value = value.reduce(function (processed, v) {\n                return myParseArg(declaredArg, v, processed);\n              }, declaredArg.defaultValue);\n            }\n          } else if (value === undefined) {\n            value = [];\n          }\n        } else if (index < _this6.args.length) {\n          value = _this6.args[index];\n\n          if (declaredArg.parseArg) {\n            value = myParseArg(declaredArg, value, declaredArg.defaultValue);\n          }\n        }\n\n        processedArgs[index] = value;\n      });\n\n      this.processedArgs = processedArgs;\n    }\n    /**\n     * Once we have a promise we chain, but call synchronously until then.\n     *\n     * @param {Promise|undefined} promise\n     * @param {Function} fn\n     * @return {Promise|undefined}\n     * @api private\n     */\n\n  }, {\n    key: \"_chainOrCall\",\n    value: function _chainOrCall(promise, fn) {\n      // thenable\n      if (promise && promise.then && typeof promise.then === 'function') {\n        // already have a promise, chain callback\n        return promise.then(function () {\n          return fn();\n        });\n      } // callback might return a promise\n\n\n      return fn();\n    }\n    /**\n     *\n     * @param {Promise|undefined} promise\n     * @param {string} event\n     * @return {Promise|undefined}\n     * @api private\n     */\n\n  }, {\n    key: \"_chainOrCallHooks\",\n    value: function _chainOrCallHooks(promise, event) {\n      var _this7 = this;\n\n      var result = promise;\n      var hooks = [];\n      getCommandAndParents(this).reverse().filter(function (cmd) {\n        return cmd._lifeCycleHooks[event] !== undefined;\n      }).forEach(function (hookedCommand) {\n        hookedCommand._lifeCycleHooks[event].forEach(function (callback) {\n          hooks.push({\n            hookedCommand: hookedCommand,\n            callback: callback\n          });\n        });\n      });\n\n      if (event === 'postAction') {\n        hooks.reverse();\n      }\n\n      hooks.forEach(function (hookDetail) {\n        result = _this7._chainOrCall(result, function () {\n          return hookDetail.callback(hookDetail.hookedCommand, _this7);\n        });\n      });\n      return result;\n    }\n    /**\n     * Process arguments in context of this command.\n     * Returns action result, in case it is a promise.\n     *\n     * @api private\n     */\n\n  }, {\n    key: \"_parseCommand\",\n    value: function _parseCommand(operands, unknown) {\n      var _this8 = this;\n\n      var parsed = this.parseOptions(unknown);\n\n      this._parseOptionsEnv(); // after cli, so parseArg not called on both cli and env\n\n\n      operands = operands.concat(parsed.operands);\n      unknown = parsed.unknown;\n      this.args = operands.concat(unknown);\n\n      if (operands && this._findCommand(operands[0])) {\n        return this._dispatchSubcommand(operands[0], operands.slice(1), unknown);\n      }\n\n      if (this._hasImplicitHelpCommand() && operands[0] === this._helpCommandName) {\n        if (operands.length === 1) {\n          this.help();\n        }\n\n        return this._dispatchSubcommand(operands[1], [], [this._helpLongFlag]);\n      }\n\n      if (this._defaultCommandName) {\n        outputHelpIfRequested(this, unknown); // Run the help for default command from parent rather than passing to default command\n\n        return this._dispatchSubcommand(this._defaultCommandName, operands, unknown);\n      }\n\n      if (this.commands.length && this.args.length === 0 && !this._actionHandler && !this._defaultCommandName) {\n        // probably missing subcommand and no handler, user needs help (and exit)\n        this.help({\n          error: true\n        });\n      }\n\n      outputHelpIfRequested(this, parsed.unknown);\n\n      this._checkForMissingMandatoryOptions(); // We do not always call this check to avoid masking a \"better\" error, like unknown command.\n\n\n      var checkForUnknownOptions = function checkForUnknownOptions() {\n        if (parsed.unknown.length > 0) {\n          _this8.unknownOption(parsed.unknown[0]);\n        }\n      };\n\n      var commandEvent = \"command:\".concat(this.name());\n\n      if (this._actionHandler) {\n        checkForUnknownOptions();\n\n        this._processArguments();\n\n        var actionResult;\n        actionResult = this._chainOrCallHooks(actionResult, 'preAction');\n        actionResult = this._chainOrCall(actionResult, function () {\n          return _this8._actionHandler(_this8.processedArgs);\n        });\n\n        if (this.parent) {\n          actionResult = this._chainOrCall(actionResult, function () {\n            _this8.parent.emit(commandEvent, operands, unknown); // legacy\n\n          });\n        }\n\n        actionResult = this._chainOrCallHooks(actionResult, 'postAction');\n        return actionResult;\n      }\n\n      if (this.parent && this.parent.listenerCount(commandEvent)) {\n        checkForUnknownOptions();\n\n        this._processArguments();\n\n        this.parent.emit(commandEvent, operands, unknown); // legacy\n      } else if (operands.length) {\n        if (this._findCommand('*')) {\n          // legacy default command\n          return this._dispatchSubcommand('*', operands, unknown);\n        }\n\n        if (this.listenerCount('command:*')) {\n          // skip option check, emit event for possible misspelling suggestion\n          this.emit('command:*', operands, unknown);\n        } else if (this.commands.length) {\n          this.unknownCommand();\n        } else {\n          checkForUnknownOptions();\n\n          this._processArguments();\n        }\n      } else if (this.commands.length) {\n        checkForUnknownOptions(); // This command has subcommands and nothing hooked up at this level, so display help (and exit).\n\n        this.help({\n          error: true\n        });\n      } else {\n        checkForUnknownOptions();\n\n        this._processArguments(); // fall through for caller to handle after calling .parse()\n\n      }\n    }\n    /**\n     * Find matching command.\n     *\n     * @api private\n     */\n\n  }, {\n    key: \"_findCommand\",\n    value: function _findCommand(name) {\n      if (!name) return undefined;\n      return this.commands.find(function (cmd) {\n        return cmd._name === name || cmd._aliases.includes(name);\n      });\n    }\n    /**\n     * Return an option matching `arg` if any.\n     *\n     * @param {string} arg\n     * @return {Option}\n     * @api private\n     */\n\n  }, {\n    key: \"_findOption\",\n    value: function _findOption(arg) {\n      return this.options.find(function (option) {\n        return option.is(arg);\n      });\n    }\n    /**\n     * Display an error message if a mandatory option does not have a value.\n     * Lazy calling after checking for help flags from leaf subcommand.\n     *\n     * @api private\n     */\n\n  }, {\n    key: \"_checkForMissingMandatoryOptions\",\n    value: function _checkForMissingMandatoryOptions() {\n      var _loop = function _loop(cmd) {\n        cmd.options.forEach(function (anOption) {\n          if (anOption.mandatory && cmd.getOptionValue(anOption.attributeName()) === undefined) {\n            cmd.missingMandatoryOptionValue(anOption);\n          }\n        });\n      };\n\n      // Walk up hierarchy so can call in subcommand after checking for displaying help.\n      for (var cmd = this; cmd; cmd = cmd.parent) {\n        _loop(cmd);\n      }\n    }\n    /**\n     * Parse options from `argv` removing known options,\n     * and return argv split into operands and unknown arguments.\n     *\n     * Examples:\n     *\n     *     argv => operands, unknown\n     *     --known kkk op => [op], []\n     *     op --known kkk => [op], []\n     *     sub --unknown uuu op => [sub], [--unknown uuu op]\n     *     sub -- --unknown uuu op => [sub --unknown uuu op], []\n     *\n     * @param {String[]} argv\n     * @return {{operands: String[], unknown: String[]}}\n     */\n\n  }, {\n    key: \"parseOptions\",\n    value: function parseOptions(argv) {\n      var operands = []; // operands, not options or values\n\n      var unknown = []; // first unknown option and remaining unknown args\n\n      var dest = operands;\n      var args = argv.slice();\n\n      function maybeOption(arg) {\n        return arg.length > 1 && arg[0] === '-';\n      } // parse options\n\n\n      var activeVariadicOption = null;\n\n      while (args.length) {\n        var arg = args.shift(); // literal\n\n        if (arg === '--') {\n          var _dest;\n\n          if (dest === unknown) dest.push(arg);\n\n          (_dest = dest).push.apply(_dest, _toConsumableArray(args));\n\n          break;\n        }\n\n        if (activeVariadicOption && !maybeOption(arg)) {\n          this.emit(\"option:\".concat(activeVariadicOption.name()), arg);\n          continue;\n        }\n\n        activeVariadicOption = null;\n\n        if (maybeOption(arg)) {\n          var option = this._findOption(arg); // recognised option, call listener to assign value with possible custom processing\n\n\n          if (option) {\n            if (option.required) {\n              var value = args.shift();\n              if (value === undefined) this.optionMissingArgument(option);\n              this.emit(\"option:\".concat(option.name()), value);\n            } else if (option.optional) {\n              var _value = null; // historical behaviour is optional value is following arg unless an option\n\n              if (args.length > 0 && !maybeOption(args[0])) {\n                _value = args.shift();\n              }\n\n              this.emit(\"option:\".concat(option.name()), _value);\n            } else {\n              // boolean flag\n              this.emit(\"option:\".concat(option.name()));\n            }\n\n            activeVariadicOption = option.variadic ? option : null;\n            continue;\n          }\n        } // Look for combo options following single dash, eat first one if known.\n\n\n        if (arg.length > 2 && arg[0] === '-' && arg[1] !== '-') {\n          var _option = this._findOption(\"-\".concat(arg[1]));\n\n          if (_option) {\n            if (_option.required || _option.optional && this._combineFlagAndOptionalValue) {\n              // option with value following in same argument\n              this.emit(\"option:\".concat(_option.name()), arg.slice(2));\n            } else {\n              // boolean option, emit and put back remainder of arg for further processing\n              this.emit(\"option:\".concat(_option.name()));\n              args.unshift(\"-\".concat(arg.slice(2)));\n            }\n\n            continue;\n          }\n        } // Look for known long flag with value, like --foo=bar\n\n\n        if (/^--[^=]+=/.test(arg)) {\n          var index = arg.indexOf('=');\n\n          var _option2 = this._findOption(arg.slice(0, index));\n\n          if (_option2 && (_option2.required || _option2.optional)) {\n            this.emit(\"option:\".concat(_option2.name()), arg.slice(index + 1));\n            continue;\n          }\n        } // Not a recognised option by this command.\n        // Might be a command-argument, or subcommand option, or unknown option, or help command or option.\n        // An unknown option means further arguments also classified as unknown so can be reprocessed by subcommands.\n\n\n        if (maybeOption(arg)) {\n          dest = unknown;\n        } // If using positionalOptions, stop processing our options at subcommand.\n\n\n        if ((this._enablePositionalOptions || this._passThroughOptions) && operands.length === 0 && unknown.length === 0) {\n          if (this._findCommand(arg)) {\n            operands.push(arg);\n            if (args.length > 0) unknown.push.apply(unknown, _toConsumableArray(args));\n            break;\n          } else if (arg === this._helpCommandName && this._hasImplicitHelpCommand()) {\n            operands.push(arg);\n            if (args.length > 0) operands.push.apply(operands, _toConsumableArray(args));\n            break;\n          } else if (this._defaultCommandName) {\n            unknown.push(arg);\n            if (args.length > 0) unknown.push.apply(unknown, _toConsumableArray(args));\n            break;\n          }\n        } // If using passThroughOptions, stop processing options at first command-argument.\n\n\n        if (this._passThroughOptions) {\n          var _dest2;\n\n          dest.push(arg);\n          if (args.length > 0) (_dest2 = dest).push.apply(_dest2, _toConsumableArray(args));\n          break;\n        } // add arg\n\n\n        dest.push(arg);\n      }\n\n      return {\n        operands: operands,\n        unknown: unknown\n      };\n    }\n    /**\n     * Return an object containing local option values as key-value pairs.\n     *\n     * @return {Object}\n     */\n\n  }, {\n    key: \"opts\",\n    value: function opts() {\n      if (this._storeOptionsAsProperties) {\n        // Preserve original behaviour so backwards compatible when still using properties\n        var result = {};\n        var len = this.options.length;\n\n        for (var i = 0; i < len; i++) {\n          var key = this.options[i].attributeName();\n          result[key] = key === this._versionOptionName ? this._version : this[key];\n        }\n\n        return result;\n      }\n\n      return this._optionValues;\n    }\n    /**\n     * Return an object containing merged local and global option values as key-value pairs.\n     *\n     * @return {Object}\n     */\n\n  }, {\n    key: \"optsWithGlobals\",\n    value: function optsWithGlobals() {\n      // globals overwrite locals\n      return getCommandAndParents(this).reduce(function (combinedOptions, cmd) {\n        return Object.assign(combinedOptions, cmd.opts());\n      }, {});\n    }\n    /**\n     * Display error message and exit (or call exitOverride).\n     *\n     * @param {string} message\n     * @param {Object} [errorOptions]\n     * @param {string} [errorOptions.code] - an id string representing the error\n     * @param {number} [errorOptions.exitCode] - used with process.exit\n     */\n\n  }, {\n    key: \"error\",\n    value: function error(message, errorOptions) {\n      // output handling\n      this._outputConfiguration.outputError(\"\".concat(message, \"\\n\"), this._outputConfiguration.writeErr);\n\n      if (typeof this._showHelpAfterError === 'string') {\n        this._outputConfiguration.writeErr(\"\".concat(this._showHelpAfterError, \"\\n\"));\n      } else if (this._showHelpAfterError) {\n        this._outputConfiguration.writeErr('\\n');\n\n        this.outputHelp({\n          error: true\n        });\n      } // exit handling\n\n\n      var config = errorOptions || {};\n      var exitCode = config.exitCode || 1;\n      var code = config.code || 'commander.error';\n\n      this._exit(exitCode, code, message);\n    }\n    /**\n     * Apply any option related environment variables, if option does\n     * not have a value from cli or client code.\n     *\n     * @api private\n     */\n\n  }, {\n    key: \"_parseOptionsEnv\",\n    value: function _parseOptionsEnv() {\n      var _this9 = this;\n\n      this.options.forEach(function (option) {\n        if (option.envVar && option.envVar in process.env) {\n          var optionKey = option.attributeName(); // Priority check. Do not overwrite cli or options from unknown source (client-code).\n\n          if (_this9.getOptionValue(optionKey) === undefined || ['default', 'config', 'env'].includes(_this9.getOptionValueSource(optionKey))) {\n            if (option.required || option.optional) {\n              // option can take a value\n              // keep very simple, optional always takes value\n              _this9.emit(\"optionEnv:\".concat(option.name()), process.env[option.envVar]);\n            } else {\n              // boolean\n              // keep very simple, only care that envVar defined and not the value\n              _this9.emit(\"optionEnv:\".concat(option.name()));\n            }\n          }\n        }\n      });\n    }\n    /**\n     * Argument `name` is missing.\n     *\n     * @param {string} name\n     * @api private\n     */\n\n  }, {\n    key: \"missingArgument\",\n    value: function missingArgument(name) {\n      var message = \"error: missing required argument '\".concat(name, \"'\");\n      this.error(message, {\n        code: 'commander.missingArgument'\n      });\n    }\n    /**\n     * `Option` is missing an argument.\n     *\n     * @param {Option} option\n     * @api private\n     */\n\n  }, {\n    key: \"optionMissingArgument\",\n    value: function optionMissingArgument(option) {\n      var message = \"error: option '\".concat(option.flags, \"' argument missing\");\n      this.error(message, {\n        code: 'commander.optionMissingArgument'\n      });\n    }\n    /**\n     * `Option` does not have a value, and is a mandatory option.\n     *\n     * @param {Option} option\n     * @api private\n     */\n\n  }, {\n    key: \"missingMandatoryOptionValue\",\n    value: function missingMandatoryOptionValue(option) {\n      var message = \"error: required option '\".concat(option.flags, \"' not specified\");\n      this.error(message, {\n        code: 'commander.missingMandatoryOptionValue'\n      });\n    }\n    /**\n     * Unknown option `flag`.\n     *\n     * @param {string} flag\n     * @api private\n     */\n\n  }, {\n    key: \"unknownOption\",\n    value: function unknownOption(flag) {\n      if (this._allowUnknownOption) return;\n      var suggestion = '';\n\n      if (flag.startsWith('--') && this._showSuggestionAfterError) {\n        // Looping to pick up the global options too\n        var candidateFlags = [];\n        var command = this;\n\n        do {\n          var moreFlags = command.createHelp().visibleOptions(command).filter(function (option) {\n            return option[\"long\"];\n          }).map(function (option) {\n            return option[\"long\"];\n          });\n          candidateFlags = candidateFlags.concat(moreFlags);\n          command = command.parent;\n        } while (command && !command._enablePositionalOptions);\n\n        suggestion = suggestSimilar(flag, candidateFlags);\n      }\n\n      var message = \"error: unknown option '\".concat(flag, \"'\").concat(suggestion);\n      this.error(message, {\n        code: 'commander.unknownOption'\n      });\n    }\n    /**\n     * Excess arguments, more than expected.\n     *\n     * @param {string[]} receivedArgs\n     * @api private\n     */\n\n  }, {\n    key: \"_excessArguments\",\n    value: function _excessArguments(receivedArgs) {\n      if (this._allowExcessArguments) return;\n      var expected = this._args.length;\n      var s = expected === 1 ? '' : 's';\n      var forSubcommand = this.parent ? \" for '\".concat(this.name(), \"'\") : '';\n      var message = \"error: too many arguments\".concat(forSubcommand, \". Expected \").concat(expected, \" argument\").concat(s, \" but got \").concat(receivedArgs.length, \".\");\n      this.error(message, {\n        code: 'commander.excessArguments'\n      });\n    }\n    /**\n     * Unknown command.\n     *\n     * @api private\n     */\n\n  }, {\n    key: \"unknownCommand\",\n    value: function unknownCommand() {\n      var unknownName = this.args[0];\n      var suggestion = '';\n\n      if (this._showSuggestionAfterError) {\n        var candidateNames = [];\n        this.createHelp().visibleCommands(this).forEach(function (command) {\n          candidateNames.push(command.name()); // just visible alias\n\n          if (command.alias()) candidateNames.push(command.alias());\n        });\n        suggestion = suggestSimilar(unknownName, candidateNames);\n      }\n\n      var message = \"error: unknown command '\".concat(unknownName, \"'\").concat(suggestion);\n      this.error(message, {\n        code: 'commander.unknownCommand'\n      });\n    }\n    /**\n     * Set the program version to `str`.\n     *\n     * This method auto-registers the \"-V, --version\" flag\n     * which will print the version number when passed.\n     *\n     * You can optionally supply the  flags and description to override the defaults.\n     *\n     * @param {string} str\n     * @param {string} [flags]\n     * @param {string} [description]\n     * @return {this | string} `this` command for chaining, or version string if no arguments\n     */\n\n  }, {\n    key: \"version\",\n    value: function version(str, flags, description) {\n      var _this10 = this;\n\n      if (str === undefined) return this._version;\n      this._version = str;\n      flags = flags || '-V, --version';\n      description = description || 'output the version number';\n      var versionOption = this.createOption(flags, description);\n      this._versionOptionName = versionOption.attributeName();\n      this.options.push(versionOption);\n      this.on('option:' + versionOption.name(), function () {\n        _this10._outputConfiguration.writeOut(\"\".concat(str, \"\\n\"));\n\n        _this10._exit(0, 'commander.version', str);\n      });\n      return this;\n    }\n    /**\n     * Set the description to `str`.\n     *\n     * @param {string} [str]\n     * @param {Object} [argsDescription]\n     * @return {string|Command}\n     */\n\n  }, {\n    key: \"description\",\n    value: function description(str, argsDescription) {\n      if (str === undefined && argsDescription === undefined) return this._description;\n      this._description = str;\n\n      if (argsDescription) {\n        this._argsDescription = argsDescription;\n      }\n\n      return this;\n    }\n    /**\n     * Set an alias for the command.\n     *\n     * You may call more than once to add multiple aliases. Only the first alias is shown in the auto-generated help.\n     *\n     * @param {string} [alias]\n     * @return {string|Command}\n     */\n\n  }, {\n    key: \"alias\",\n    value: function alias(_alias) {\n      if (_alias === undefined) return this._aliases[0]; // just return first, for backwards compatibility\n\n      /** @type {Command} */\n\n      var command = this;\n\n      if (this.commands.length !== 0 && this.commands[this.commands.length - 1]._executableHandler) {\n        // assume adding alias for last added executable subcommand, rather than this\n        command = this.commands[this.commands.length - 1];\n      }\n\n      if (_alias === command._name) throw new Error('Command alias can\\'t be the same as its name');\n\n      command._aliases.push(_alias);\n\n      return this;\n    }\n    /**\n     * Set aliases for the command.\n     *\n     * Only the first alias is shown in the auto-generated help.\n     *\n     * @param {string[]} [aliases]\n     * @return {string[]|Command}\n     */\n\n  }, {\n    key: \"aliases\",\n    value: function aliases(_aliases) {\n      var _this11 = this;\n\n      // Getter for the array of aliases is the main reason for having aliases() in addition to alias().\n      if (_aliases === undefined) return this._aliases;\n\n      _aliases.forEach(function (alias) {\n        return _this11.alias(alias);\n      });\n\n      return this;\n    }\n    /**\n     * Set / get the command usage `str`.\n     *\n     * @param {string} [str]\n     * @return {String|Command}\n     */\n\n  }, {\n    key: \"usage\",\n    value: function usage(str) {\n      if (str === undefined) {\n        if (this._usage) return this._usage;\n\n        var args = this._args.map(function (arg) {\n          return humanReadableArgName(arg);\n        });\n\n        return [].concat(this.options.length || this._hasHelpOption ? '[options]' : [], this.commands.length ? '[command]' : [], this._args.length ? args : []).join(' ');\n      }\n\n      this._usage = str;\n      return this;\n    }\n    /**\n     * Get or set the name of the command.\n     *\n     * @param {string} [str]\n     * @return {string|Command}\n     */\n\n  }, {\n    key: \"name\",\n    value: function name(str) {\n      if (str === undefined) return this._name;\n      this._name = str;\n      return this;\n    }\n    /**\n     * Set the name of the command from script filename, such as process.argv[1],\n     * or require.main.filename, or __filename.\n     *\n     * (Used internally and public although not documented in README.)\n     *\n     * @example\n     * program.nameFromFilename(require.main.filename);\n     *\n     * @param {string} filename\n     * @return {Command}\n     */\n\n  }, {\n    key: \"nameFromFilename\",\n    value: function nameFromFilename(filename) {\n      this._name = path.basename(filename, path.extname(filename));\n      return this;\n    }\n    /**\n     * Get or set the directory for searching for executable subcommands of this command.\n     *\n     * @example\n     * program.executableDir(__dirname);\n     * // or\n     * program.executableDir('subcommands');\n     *\n     * @param {string} [path]\n     * @return {string|Command}\n     */\n\n  }, {\n    key: \"executableDir\",\n    value: function executableDir(path) {\n      if (path === undefined) return this._executableDir;\n      this._executableDir = path;\n      return this;\n    }\n    /**\n     * Return program help documentation.\n     *\n     * @param {{ error: boolean }} [contextOptions] - pass {error:true} to wrap for stderr instead of stdout\n     * @return {string}\n     */\n\n  }, {\n    key: \"helpInformation\",\n    value: function helpInformation(contextOptions) {\n      var helper = this.createHelp();\n\n      if (helper.helpWidth === undefined) {\n        helper.helpWidth = contextOptions && contextOptions.error ? this._outputConfiguration.getErrHelpWidth() : this._outputConfiguration.getOutHelpWidth();\n      }\n\n      return helper.formatHelp(this, helper);\n    }\n    /**\n     * @api private\n     */\n\n  }, {\n    key: \"_getHelpContext\",\n    value: function _getHelpContext(contextOptions) {\n      var _this12 = this;\n\n      contextOptions = contextOptions || {};\n      var context = {\n        error: !!contextOptions.error\n      };\n      var write;\n\n      if (context.error) {\n        write = function write(arg) {\n          return _this12._outputConfiguration.writeErr(arg);\n        };\n      } else {\n        write = function write(arg) {\n          return _this12._outputConfiguration.writeOut(arg);\n        };\n      }\n\n      context.write = contextOptions.write || write;\n      context.command = this;\n      return context;\n    }\n    /**\n     * Output help information for this command.\n     *\n     * Outputs built-in help, and custom text added using `.addHelpText()`.\n     *\n     * @param {{ error: boolean } | Function} [contextOptions] - pass {error:true} to write to stderr instead of stdout\n     */\n\n  }, {\n    key: \"outputHelp\",\n    value: function outputHelp(contextOptions) {\n      var deprecatedCallback;\n\n      if (typeof contextOptions === 'function') {\n        deprecatedCallback = contextOptions;\n        contextOptions = undefined;\n      }\n\n      var context = this._getHelpContext(contextOptions);\n\n      getCommandAndParents(this).reverse().forEach(function (command) {\n        return command.emit('beforeAllHelp', context);\n      });\n      this.emit('beforeHelp', context);\n      var helpInformation = this.helpInformation(context);\n\n      if (deprecatedCallback) {\n        helpInformation = deprecatedCallback(helpInformation);\n\n        if (typeof helpInformation !== 'string' && !Buffer.isBuffer(helpInformation)) {\n          throw new Error('outputHelp callback must return a string or a Buffer');\n        }\n      }\n\n      context.write(helpInformation);\n      this.emit(this._helpLongFlag); // deprecated\n\n      this.emit('afterHelp', context);\n      getCommandAndParents(this).forEach(function (command) {\n        return command.emit('afterAllHelp', context);\n      });\n    }\n    /**\n     * You can pass in flags and a description to override the help\n     * flags and help description for your command. Pass in false to\n     * disable the built-in help option.\n     *\n     * @param {string | boolean} [flags]\n     * @param {string} [description]\n     * @return {Command} `this` command for chaining\n     */\n\n  }, {\n    key: \"helpOption\",\n    value: function helpOption(flags, description) {\n      if (typeof flags === 'boolean') {\n        this._hasHelpOption = flags;\n        return this;\n      }\n\n      this._helpFlags = flags || this._helpFlags;\n      this._helpDescription = description || this._helpDescription;\n      var helpFlags = splitOptionFlags(this._helpFlags);\n      this._helpShortFlag = helpFlags.shortFlag;\n      this._helpLongFlag = helpFlags.longFlag;\n      return this;\n    }\n    /**\n     * Output help information and exit.\n     *\n     * Outputs built-in help, and custom text added using `.addHelpText()`.\n     *\n     * @param {{ error: boolean }} [contextOptions] - pass {error:true} to write to stderr instead of stdout\n     */\n\n  }, {\n    key: \"help\",\n    value: function help(contextOptions) {\n      this.outputHelp(contextOptions);\n      var exitCode = process.exitCode || 0;\n\n      if (exitCode === 0 && contextOptions && typeof contextOptions !== 'function' && contextOptions.error) {\n        exitCode = 1;\n      } // message: do not have all displayed text available so only passing placeholder.\n\n\n      this._exit(exitCode, 'commander.help', '(outputHelp)');\n    }\n    /**\n     * Add additional text to be displayed with the built-in help.\n     *\n     * Position is 'before' or 'after' to affect just this command,\n     * and 'beforeAll' or 'afterAll' to affect this command and all its subcommands.\n     *\n     * @param {string} position - before or after built-in help\n     * @param {string | Function} text - string to add, or a function returning a string\n     * @return {Command} `this` command for chaining\n     */\n\n  }, {\n    key: \"addHelpText\",\n    value: function addHelpText(position, text) {\n      var allowedValues = ['beforeAll', 'before', 'after', 'afterAll'];\n\n      if (!allowedValues.includes(position)) {\n        throw new Error(\"Unexpected value for position to addHelpText.\\nExpecting one of '\".concat(allowedValues.join(\"', '\"), \"'\"));\n      }\n\n      var helpEvent = \"\".concat(position, \"Help\");\n      this.on(helpEvent, function (context) {\n        var helpStr;\n\n        if (typeof text === 'function') {\n          helpStr = text({\n            error: context.error,\n            command: context.command\n          });\n        } else {\n          helpStr = text;\n        } // Ignore falsy value when nothing to output.\n\n\n        if (helpStr) {\n          context.write(\"\".concat(helpStr, \"\\n\"));\n        }\n      });\n      return this;\n    }\n  }]);\n\n  return Command;\n}(EventEmitter);\n/**\n * Output help information if help flags specified\n *\n * @param {Command} cmd - command to output help for\n * @param {Array} args - array of options to search for help flags\n * @api private\n */\n\n\nfunction outputHelpIfRequested(cmd, args) {\n  var helpOption = cmd._hasHelpOption && args.find(function (arg) {\n    return arg === cmd._helpLongFlag || arg === cmd._helpShortFlag;\n  });\n\n  if (helpOption) {\n    cmd.outputHelp(); // (Do not have all displayed text available so only passing placeholder.)\n\n    cmd._exit(0, 'commander.helpDisplayed', '(outputHelp)');\n  }\n}\n/**\n * Scan arguments and increment port number for inspect calls (to avoid conflicts when spawning new command).\n *\n * @param {string[]} args - array of arguments from node.execArgv\n * @returns {string[]}\n * @api private\n */\n\n\nfunction incrementNodeInspectorPort(args) {\n  // Testing for these options:\n  //  --inspect[=[host:]port]\n  //  --inspect-brk[=[host:]port]\n  //  --inspect-port=[host:]port\n  return args.map(function (arg) {\n    if (!arg.startsWith('--inspect')) {\n      return arg;\n    }\n\n    var debugOption;\n    var debugHost = '127.0.0.1';\n    var debugPort = '9229';\n    var match;\n\n    if ((match = arg.match(/^(--inspect(-brk)?)$/)) !== null) {\n      // e.g. --inspect\n      debugOption = match[1];\n    } else if ((match = arg.match(/^(--inspect(-brk|-port)?)=([^:]+)$/)) !== null) {\n      debugOption = match[1];\n\n      if (/^\\d+$/.test(match[3])) {\n        // e.g. --inspect=1234\n        debugPort = match[3];\n      } else {\n        // e.g. --inspect=localhost\n        debugHost = match[3];\n      }\n    } else if ((match = arg.match(/^(--inspect(-brk|-port)?)=([^:]+):(\\d+)$/)) !== null) {\n      // e.g. --inspect=localhost:1234\n      debugOption = match[1];\n      debugHost = match[3];\n      debugPort = match[4];\n    }\n\n    if (debugOption && debugPort !== '0') {\n      return \"\".concat(debugOption, \"=\").concat(debugHost, \":\").concat(parseInt(debugPort) + 1);\n    }\n\n    return arg;\n  });\n}\n/**\n * @param {Command} startCommand\n * @returns {Command[]}\n * @api private\n */\n\n\nfunction getCommandAndParents(startCommand) {\n  var result = [];\n\n  for (var command = startCommand; command; command = command.parent) {\n    result.push(command);\n  }\n\n  return result;\n}\n\nexports.Command = Command;\n\n//# sourceURL=webpack://lai-cmd/./node_modules/commander/lib/command.js?");

/***/ }),

/***/ "./node_modules/commander/lib/error.js":
/*!*********************************************!*\
  !*** ./node_modules/commander/lib/error.js ***!
  \*********************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("function _typeof(obj) { \"@babel/helpers - typeof\"; return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && \"function\" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }, _typeof(obj); }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, \"prototype\", { writable: false }); return Constructor; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function\"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); Object.defineProperty(subClass, \"prototype\", { writable: false }); if (superClass) _setPrototypeOf(subClass, superClass); }\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) { return call; } else if (call !== void 0) { throw new TypeError(\"Derived constructors may only return object or undefined\"); } return _assertThisInitialized(self); }\n\nfunction _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return self; }\n\nfunction _wrapNativeSuper(Class) { var _cache = typeof Map === \"function\" ? new Map() : undefined; _wrapNativeSuper = function _wrapNativeSuper(Class) { if (Class === null || !_isNativeFunction(Class)) return Class; if (typeof Class !== \"function\") { throw new TypeError(\"Super expression must either be null or a function\"); } if (typeof _cache !== \"undefined\") { if (_cache.has(Class)) return _cache.get(Class); _cache.set(Class, Wrapper); } function Wrapper() { return _construct(Class, arguments, _getPrototypeOf(this).constructor); } Wrapper.prototype = Object.create(Class.prototype, { constructor: { value: Wrapper, enumerable: false, writable: true, configurable: true } }); return _setPrototypeOf(Wrapper, Class); }; return _wrapNativeSuper(Class); }\n\nfunction _construct(Parent, args, Class) { if (_isNativeReflectConstruct()) { _construct = Reflect.construct; } else { _construct = function _construct(Parent, args, Class) { var a = [null]; a.push.apply(a, args); var Constructor = Function.bind.apply(Parent, a); var instance = new Constructor(); if (Class) _setPrototypeOf(instance, Class.prototype); return instance; }; } return _construct.apply(null, arguments); }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\nfunction _isNativeFunction(fn) { return Function.toString.call(fn).indexOf(\"[native code]\") !== -1; }\n\nfunction _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }\n\nfunction _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }\n\n// @ts-check\n\n/**\n * CommanderError class\n * @class\n */\nvar CommanderError = /*#__PURE__*/function (_Error) {\n  _inherits(CommanderError, _Error);\n\n  var _super = _createSuper(CommanderError);\n\n  /**\n   * Constructs the CommanderError class\n   * @param {number} exitCode suggested exit code which could be used with process.exit\n   * @param {string} code an id string representing the error\n   * @param {string} message human-readable description of the error\n   * @constructor\n   */\n  function CommanderError(exitCode, code, message) {\n    var _this;\n\n    _classCallCheck(this, CommanderError);\n\n    _this = _super.call(this, message); // properly capture stack trace in Node.js\n\n    Error.captureStackTrace(_assertThisInitialized(_this), _this.constructor);\n    _this.name = _this.constructor.name;\n    _this.code = code;\n    _this.exitCode = exitCode;\n    _this.nestedError = undefined;\n    return _this;\n  }\n\n  return _createClass(CommanderError);\n}( /*#__PURE__*/_wrapNativeSuper(Error));\n/**\n * InvalidArgumentError class\n * @class\n */\n\n\nvar InvalidArgumentError = /*#__PURE__*/function (_CommanderError) {\n  _inherits(InvalidArgumentError, _CommanderError);\n\n  var _super2 = _createSuper(InvalidArgumentError);\n\n  /**\n   * Constructs the InvalidArgumentError class\n   * @param {string} [message] explanation of why argument is invalid\n   * @constructor\n   */\n  function InvalidArgumentError(message) {\n    var _this2;\n\n    _classCallCheck(this, InvalidArgumentError);\n\n    _this2 = _super2.call(this, 1, 'commander.invalidArgument', message); // properly capture stack trace in Node.js\n\n    Error.captureStackTrace(_assertThisInitialized(_this2), _this2.constructor);\n    _this2.name = _this2.constructor.name;\n    return _this2;\n  }\n\n  return _createClass(InvalidArgumentError);\n}(CommanderError);\n\nexports.CommanderError = CommanderError;\nexports.InvalidArgumentError = InvalidArgumentError;\n\n//# sourceURL=webpack://lai-cmd/./node_modules/commander/lib/error.js?");

/***/ }),

/***/ "./node_modules/commander/lib/help.js":
/*!********************************************!*\
  !*** ./node_modules/commander/lib/help.js ***!
  \********************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }\n\nfunction _nonIterableRest() { throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\nfunction _iterableToArrayLimit(arr, i) { var _i = arr == null ? null : typeof Symbol !== \"undefined\" && arr[Symbol.iterator] || arr[\"@@iterator\"]; if (_i == null) return; var _arr = []; var _n = true; var _d = false; var _s, _e; try { for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i[\"return\"] != null) _i[\"return\"](); } finally { if (_d) throw _e; } } return _arr; }\n\nfunction _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, \"prototype\", { writable: false }); return Constructor; }\n\nvar _require = __webpack_require__(/*! ./argument.js */ \"./node_modules/commander/lib/argument.js\"),\n    humanReadableArgName = _require.humanReadableArgName;\n/**\n * TypeScript import types for JSDoc, used by Visual Studio Code IntelliSense and `npm run typescript-checkJS`\n * https://www.typescriptlang.org/docs/handbook/jsdoc-supported-types.html#import-types\n * @typedef { import(\"./argument.js\").Argument } Argument\n * @typedef { import(\"./command.js\").Command } Command\n * @typedef { import(\"./option.js\").Option } Option\n */\n// @ts-check\n// Although this is a class, methods are static in style to allow override using subclass or just functions.\n\n\nvar Help = /*#__PURE__*/function () {\n  function Help() {\n    _classCallCheck(this, Help);\n\n    this.helpWidth = undefined;\n    this.sortSubcommands = false;\n    this.sortOptions = false;\n  }\n  /**\n   * Get an array of the visible subcommands. Includes a placeholder for the implicit help command, if there is one.\n   *\n   * @param {Command} cmd\n   * @returns {Command[]}\n   */\n\n\n  _createClass(Help, [{\n    key: \"visibleCommands\",\n    value: function visibleCommands(cmd) {\n      var visibleCommands = cmd.commands.filter(function (cmd) {\n        return !cmd._hidden;\n      });\n\n      if (cmd._hasImplicitHelpCommand()) {\n        // Create a command matching the implicit help command.\n        var _cmd$_helpCommandname = cmd._helpCommandnameAndArgs.match(/([^ ]+) *(.*)/),\n            _cmd$_helpCommandname2 = _slicedToArray(_cmd$_helpCommandname, 3),\n            helpName = _cmd$_helpCommandname2[1],\n            helpArgs = _cmd$_helpCommandname2[2];\n\n        var helpCommand = cmd.createCommand(helpName).helpOption(false);\n        helpCommand.description(cmd._helpCommandDescription);\n        if (helpArgs) helpCommand.arguments(helpArgs);\n        visibleCommands.push(helpCommand);\n      }\n\n      if (this.sortSubcommands) {\n        visibleCommands.sort(function (a, b) {\n          // @ts-ignore: overloaded return type\n          return a.name().localeCompare(b.name());\n        });\n      }\n\n      return visibleCommands;\n    }\n    /**\n     * Get an array of the visible options. Includes a placeholder for the implicit help option, if there is one.\n     *\n     * @param {Command} cmd\n     * @returns {Option[]}\n     */\n\n  }, {\n    key: \"visibleOptions\",\n    value: function visibleOptions(cmd) {\n      var visibleOptions = cmd.options.filter(function (option) {\n        return !option.hidden;\n      }); // Implicit help\n\n      var showShortHelpFlag = cmd._hasHelpOption && cmd._helpShortFlag && !cmd._findOption(cmd._helpShortFlag);\n      var showLongHelpFlag = cmd._hasHelpOption && !cmd._findOption(cmd._helpLongFlag);\n\n      if (showShortHelpFlag || showLongHelpFlag) {\n        var helpOption;\n\n        if (!showShortHelpFlag) {\n          helpOption = cmd.createOption(cmd._helpLongFlag, cmd._helpDescription);\n        } else if (!showLongHelpFlag) {\n          helpOption = cmd.createOption(cmd._helpShortFlag, cmd._helpDescription);\n        } else {\n          helpOption = cmd.createOption(cmd._helpFlags, cmd._helpDescription);\n        }\n\n        visibleOptions.push(helpOption);\n      }\n\n      if (this.sortOptions) {\n        var getSortKey = function getSortKey(option) {\n          // WYSIWYG for order displayed in help with short before long, no special handling for negated.\n          return option[\"short\"] ? option[\"short\"].replace(/^-/, '') : option[\"long\"].replace(/^--/, '');\n        };\n\n        visibleOptions.sort(function (a, b) {\n          return getSortKey(a).localeCompare(getSortKey(b));\n        });\n      }\n\n      return visibleOptions;\n    }\n    /**\n     * Get an array of the arguments if any have a description.\n     *\n     * @param {Command} cmd\n     * @returns {Argument[]}\n     */\n\n  }, {\n    key: \"visibleArguments\",\n    value: function visibleArguments(cmd) {\n      // Side effect! Apply the legacy descriptions before the arguments are displayed.\n      if (cmd._argsDescription) {\n        cmd._args.forEach(function (argument) {\n          argument.description = argument.description || cmd._argsDescription[argument.name()] || '';\n        });\n      } // If there are any arguments with a description then return all the arguments.\n\n\n      if (cmd._args.find(function (argument) {\n        return argument.description;\n      })) {\n        return cmd._args;\n      }\n\n      return [];\n    }\n    /**\n     * Get the command term to show in the list of subcommands.\n     *\n     * @param {Command} cmd\n     * @returns {string}\n     */\n\n  }, {\n    key: \"subcommandTerm\",\n    value: function subcommandTerm(cmd) {\n      // Legacy. Ignores custom usage string, and nested commands.\n      var args = cmd._args.map(function (arg) {\n        return humanReadableArgName(arg);\n      }).join(' ');\n\n      return cmd._name + (cmd._aliases[0] ? '|' + cmd._aliases[0] : '') + (cmd.options.length ? ' [options]' : '') + ( // simplistic check for non-help option\n      args ? ' ' + args : '');\n    }\n    /**\n     * Get the option term to show in the list of options.\n     *\n     * @param {Option} option\n     * @returns {string}\n     */\n\n  }, {\n    key: \"optionTerm\",\n    value: function optionTerm(option) {\n      return option.flags;\n    }\n    /**\n     * Get the argument term to show in the list of arguments.\n     *\n     * @param {Argument} argument\n     * @returns {string}\n     */\n\n  }, {\n    key: \"argumentTerm\",\n    value: function argumentTerm(argument) {\n      return argument.name();\n    }\n    /**\n     * Get the longest command term length.\n     *\n     * @param {Command} cmd\n     * @param {Help} helper\n     * @returns {number}\n     */\n\n  }, {\n    key: \"longestSubcommandTermLength\",\n    value: function longestSubcommandTermLength(cmd, helper) {\n      return helper.visibleCommands(cmd).reduce(function (max, command) {\n        return Math.max(max, helper.subcommandTerm(command).length);\n      }, 0);\n    }\n    /**\n     * Get the longest option term length.\n     *\n     * @param {Command} cmd\n     * @param {Help} helper\n     * @returns {number}\n     */\n\n  }, {\n    key: \"longestOptionTermLength\",\n    value: function longestOptionTermLength(cmd, helper) {\n      return helper.visibleOptions(cmd).reduce(function (max, option) {\n        return Math.max(max, helper.optionTerm(option).length);\n      }, 0);\n    }\n    /**\n     * Get the longest argument term length.\n     *\n     * @param {Command} cmd\n     * @param {Help} helper\n     * @returns {number}\n     */\n\n  }, {\n    key: \"longestArgumentTermLength\",\n    value: function longestArgumentTermLength(cmd, helper) {\n      return helper.visibleArguments(cmd).reduce(function (max, argument) {\n        return Math.max(max, helper.argumentTerm(argument).length);\n      }, 0);\n    }\n    /**\n     * Get the command usage to be displayed at the top of the built-in help.\n     *\n     * @param {Command} cmd\n     * @returns {string}\n     */\n\n  }, {\n    key: \"commandUsage\",\n    value: function commandUsage(cmd) {\n      // Usage\n      var cmdName = cmd._name;\n\n      if (cmd._aliases[0]) {\n        cmdName = cmdName + '|' + cmd._aliases[0];\n      }\n\n      var parentCmdNames = '';\n\n      for (var parentCmd = cmd.parent; parentCmd; parentCmd = parentCmd.parent) {\n        parentCmdNames = parentCmd.name() + ' ' + parentCmdNames;\n      }\n\n      return parentCmdNames + cmdName + ' ' + cmd.usage();\n    }\n    /**\n     * Get the description for the command.\n     *\n     * @param {Command} cmd\n     * @returns {string}\n     */\n\n  }, {\n    key: \"commandDescription\",\n    value: function commandDescription(cmd) {\n      // @ts-ignore: overloaded return type\n      return cmd.description();\n    }\n    /**\n     * Get the command description to show in the list of subcommands.\n     *\n     * @param {Command} cmd\n     * @returns {string}\n     */\n\n  }, {\n    key: \"subcommandDescription\",\n    value: function subcommandDescription(cmd) {\n      // @ts-ignore: overloaded return type\n      return cmd.description();\n    }\n    /**\n     * Get the option description to show in the list of options.\n     *\n     * @param {Option} option\n     * @return {string}\n     */\n\n  }, {\n    key: \"optionDescription\",\n    value: function optionDescription(option) {\n      var extraInfo = [];\n\n      if (option.argChoices) {\n        extraInfo.push( // use stringify to match the display of the default value\n        \"choices: \".concat(option.argChoices.map(function (choice) {\n          return JSON.stringify(choice);\n        }).join(', ')));\n      }\n\n      if (option.defaultValue !== undefined) {\n        // default for boolean and negated more for programmer than end user,\n        // but show true/false for boolean option as may be for hand-rolled env or config processing.\n        var showDefault = option.required || option.optional || option.isBoolean() && typeof option.defaultValue === 'boolean';\n\n        if (showDefault) {\n          extraInfo.push(\"default: \".concat(option.defaultValueDescription || JSON.stringify(option.defaultValue)));\n        }\n      } // preset for boolean and negated are more for programmer than end user\n\n\n      if (option.presetArg !== undefined && option.optional) {\n        extraInfo.push(\"preset: \".concat(JSON.stringify(option.presetArg)));\n      }\n\n      if (option.envVar !== undefined) {\n        extraInfo.push(\"env: \".concat(option.envVar));\n      }\n\n      if (extraInfo.length > 0) {\n        return \"\".concat(option.description, \" (\").concat(extraInfo.join(', '), \")\");\n      }\n\n      return option.description;\n    }\n    /**\n     * Get the argument description to show in the list of arguments.\n     *\n     * @param {Argument} argument\n     * @return {string}\n     */\n\n  }, {\n    key: \"argumentDescription\",\n    value: function argumentDescription(argument) {\n      var extraInfo = [];\n\n      if (argument.argChoices) {\n        extraInfo.push( // use stringify to match the display of the default value\n        \"choices: \".concat(argument.argChoices.map(function (choice) {\n          return JSON.stringify(choice);\n        }).join(', ')));\n      }\n\n      if (argument.defaultValue !== undefined) {\n        extraInfo.push(\"default: \".concat(argument.defaultValueDescription || JSON.stringify(argument.defaultValue)));\n      }\n\n      if (extraInfo.length > 0) {\n        var extraDescripton = \"(\".concat(extraInfo.join(', '), \")\");\n\n        if (argument.description) {\n          return \"\".concat(argument.description, \" \").concat(extraDescripton);\n        }\n\n        return extraDescripton;\n      }\n\n      return argument.description;\n    }\n    /**\n     * Generate the built-in help text.\n     *\n     * @param {Command} cmd\n     * @param {Help} helper\n     * @returns {string}\n     */\n\n  }, {\n    key: \"formatHelp\",\n    value: function formatHelp(cmd, helper) {\n      var termWidth = helper.padWidth(cmd, helper);\n      var helpWidth = helper.helpWidth || 80;\n      var itemIndentWidth = 2;\n      var itemSeparatorWidth = 2; // between term and description\n\n      function formatItem(term, description) {\n        if (description) {\n          var fullText = \"\".concat(term.padEnd(termWidth + itemSeparatorWidth)).concat(description);\n          return helper.wrap(fullText, helpWidth - itemIndentWidth, termWidth + itemSeparatorWidth);\n        }\n\n        return term;\n      }\n\n      function formatList(textArray) {\n        return textArray.join('\\n').replace(/^/gm, ' '.repeat(itemIndentWidth));\n      } // Usage\n\n\n      var output = [\"Usage: \".concat(helper.commandUsage(cmd)), '']; // Description\n\n      var commandDescription = helper.commandDescription(cmd);\n\n      if (commandDescription.length > 0) {\n        output = output.concat([commandDescription, '']);\n      } // Arguments\n\n\n      var argumentList = helper.visibleArguments(cmd).map(function (argument) {\n        return formatItem(helper.argumentTerm(argument), helper.argumentDescription(argument));\n      });\n\n      if (argumentList.length > 0) {\n        output = output.concat(['Arguments:', formatList(argumentList), '']);\n      } // Options\n\n\n      var optionList = helper.visibleOptions(cmd).map(function (option) {\n        return formatItem(helper.optionTerm(option), helper.optionDescription(option));\n      });\n\n      if (optionList.length > 0) {\n        output = output.concat(['Options:', formatList(optionList), '']);\n      } // Commands\n\n\n      var commandList = helper.visibleCommands(cmd).map(function (cmd) {\n        return formatItem(helper.subcommandTerm(cmd), helper.subcommandDescription(cmd));\n      });\n\n      if (commandList.length > 0) {\n        output = output.concat(['Commands:', formatList(commandList), '']);\n      }\n\n      return output.join('\\n');\n    }\n    /**\n     * Calculate the pad width from the maximum term length.\n     *\n     * @param {Command} cmd\n     * @param {Help} helper\n     * @returns {number}\n     */\n\n  }, {\n    key: \"padWidth\",\n    value: function padWidth(cmd, helper) {\n      return Math.max(helper.longestOptionTermLength(cmd, helper), helper.longestSubcommandTermLength(cmd, helper), helper.longestArgumentTermLength(cmd, helper));\n    }\n    /**\n     * Wrap the given string to width characters per line, with lines after the first indented.\n     * Do not wrap if insufficient room for wrapping (minColumnWidth), or string is manually formatted.\n     *\n     * @param {string} str\n     * @param {number} width\n     * @param {number} indent\n     * @param {number} [minColumnWidth=40]\n     * @return {string}\n     *\n     */\n\n  }, {\n    key: \"wrap\",\n    value: function wrap(str, width, indent) {\n      var minColumnWidth = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 40;\n      // Detect manually wrapped and indented strings by searching for line breaks\n      // followed by multiple spaces/tabs.\n      if (str.match(/[\\n]\\s+/)) return str; // Do not wrap if not enough room for a wrapped column of text (as could end up with a word per line).\n\n      var columnWidth = width - indent;\n      if (columnWidth < minColumnWidth) return str;\n      var leadingStr = str.substr(0, indent);\n      var columnText = str.substr(indent);\n      var indentString = ' '.repeat(indent);\n      var regex = new RegExp('.{1,' + (columnWidth - 1) + \"}([\\\\s\\u200B]|$)|[^\\\\s\\u200B]+?([\\\\s\\u200B]|$)\", 'g');\n      var lines = columnText.match(regex) || [];\n      return leadingStr + lines.map(function (line, i) {\n        if (line.slice(-1) === '\\n') {\n          line = line.slice(0, line.length - 1);\n        }\n\n        return (i > 0 ? indentString : '') + line.trimRight();\n      }).join('\\n');\n    }\n  }]);\n\n  return Help;\n}();\n\nexports.Help = Help;\n\n//# sourceURL=webpack://lai-cmd/./node_modules/commander/lib/help.js?");

/***/ }),

/***/ "./node_modules/commander/lib/option.js":
/*!**********************************************!*\
  !*** ./node_modules/commander/lib/option.js ***!
  \**********************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, \"prototype\", { writable: false }); return Constructor; }\n\nvar _require = __webpack_require__(/*! ./error.js */ \"./node_modules/commander/lib/error.js\"),\n    InvalidArgumentError = _require.InvalidArgumentError; // @ts-check\n\n\nvar Option = /*#__PURE__*/function () {\n  /**\n   * Initialize a new `Option` with the given `flags` and `description`.\n   *\n   * @param {string} flags\n   * @param {string} [description]\n   */\n  function Option(flags, description) {\n    _classCallCheck(this, Option);\n\n    this.flags = flags;\n    this.description = description || '';\n    this.required = flags.includes('<'); // A value must be supplied when the option is specified.\n\n    this.optional = flags.includes('['); // A value is optional when the option is specified.\n    // variadic test ignores <value,...> et al which might be used to describe custom splitting of single argument\n\n    this.variadic = /\\w\\.\\.\\.[>\\]]$/.test(flags); // The option can take multiple values.\n\n    this.mandatory = false; // The option must have a value after parsing, which usually means it must be specified on command line.\n\n    var optionFlags = splitOptionFlags(flags);\n    this[\"short\"] = optionFlags.shortFlag;\n    this[\"long\"] = optionFlags.longFlag;\n    this.negate = false;\n\n    if (this[\"long\"]) {\n      this.negate = this[\"long\"].startsWith('--no-');\n    }\n\n    this.defaultValue = undefined;\n    this.defaultValueDescription = undefined;\n    this.presetArg = undefined;\n    this.envVar = undefined;\n    this.parseArg = undefined;\n    this.hidden = false;\n    this.argChoices = undefined;\n  }\n  /**\n   * Set the default value, and optionally supply the description to be displayed in the help.\n   *\n   * @param {any} value\n   * @param {string} [description]\n   * @return {Option}\n   */\n\n\n  _createClass(Option, [{\n    key: \"default\",\n    value: function _default(value, description) {\n      this.defaultValue = value;\n      this.defaultValueDescription = description;\n      return this;\n    }\n    /**\n     * Preset to use when option used without option-argument, especially optional but also boolean and negated.\n     * The custom processing (parseArg) is called.\n     *\n     * @example\n     * new Option('--color').default('GREYSCALE').preset('RGB');\n     * new Option('--donate [amount]').preset('20').argParser(parseFloat);\n     *\n     * @param {any} arg\n     * @return {Option}\n     */\n\n  }, {\n    key: \"preset\",\n    value: function preset(arg) {\n      this.presetArg = arg;\n      return this;\n    }\n    /**\n     * Set environment variable to check for option value.\n     * Priority order of option values is default < env < cli\n     *\n     * @param {string} name\n     * @return {Option}\n     */\n\n  }, {\n    key: \"env\",\n    value: function env(name) {\n      this.envVar = name;\n      return this;\n    }\n    /**\n     * Set the custom handler for processing CLI option arguments into option values.\n     *\n     * @param {Function} [fn]\n     * @return {Option}\n     */\n\n  }, {\n    key: \"argParser\",\n    value: function argParser(fn) {\n      this.parseArg = fn;\n      return this;\n    }\n    /**\n     * Whether the option is mandatory and must have a value after parsing.\n     *\n     * @param {boolean} [mandatory=true]\n     * @return {Option}\n     */\n\n  }, {\n    key: \"makeOptionMandatory\",\n    value: function makeOptionMandatory() {\n      var mandatory = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;\n      this.mandatory = !!mandatory;\n      return this;\n    }\n    /**\n     * Hide option in help.\n     *\n     * @param {boolean} [hide=true]\n     * @return {Option}\n     */\n\n  }, {\n    key: \"hideHelp\",\n    value: function hideHelp() {\n      var hide = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;\n      this.hidden = !!hide;\n      return this;\n    }\n    /**\n     * @api private\n     */\n\n  }, {\n    key: \"_concatValue\",\n    value: function _concatValue(value, previous) {\n      if (previous === this.defaultValue || !Array.isArray(previous)) {\n        return [value];\n      }\n\n      return previous.concat(value);\n    }\n    /**\n     * Only allow option value to be one of choices.\n     *\n     * @param {string[]} values\n     * @return {Option}\n     */\n\n  }, {\n    key: \"choices\",\n    value: function choices(values) {\n      var _this = this;\n\n      this.argChoices = values.slice();\n\n      this.parseArg = function (arg, previous) {\n        if (!_this.argChoices.includes(arg)) {\n          throw new InvalidArgumentError(\"Allowed choices are \".concat(_this.argChoices.join(', '), \".\"));\n        }\n\n        if (_this.variadic) {\n          return _this._concatValue(arg, previous);\n        }\n\n        return arg;\n      };\n\n      return this;\n    }\n    /**\n     * Return option name.\n     *\n     * @return {string}\n     */\n\n  }, {\n    key: \"name\",\n    value: function name() {\n      if (this[\"long\"]) {\n        return this[\"long\"].replace(/^--/, '');\n      }\n\n      return this[\"short\"].replace(/^-/, '');\n    }\n    /**\n     * Return option name, in a camelcase format that can be used\n     * as a object attribute key.\n     *\n     * @return {string}\n     * @api private\n     */\n\n  }, {\n    key: \"attributeName\",\n    value: function attributeName() {\n      return camelcase(this.name().replace(/^no-/, ''));\n    }\n    /**\n     * Check if `arg` matches the short or long flag.\n     *\n     * @param {string} arg\n     * @return {boolean}\n     * @api private\n     */\n\n  }, {\n    key: \"is\",\n    value: function is(arg) {\n      return this[\"short\"] === arg || this[\"long\"] === arg;\n    }\n    /**\n     * Return whether a boolean option.\n     *\n     * Options are one of boolean, negated, required argument, or optional argument.\n     *\n     * @return {boolean}\n     * @api private\n     */\n\n  }, {\n    key: \"isBoolean\",\n    value: function isBoolean() {\n      return !this.required && !this.optional && !this.negate;\n    }\n  }]);\n\n  return Option;\n}();\n/**\n * Convert string from kebab-case to camelCase.\n *\n * @param {string} str\n * @return {string}\n * @api private\n */\n\n\nfunction camelcase(str) {\n  return str.split('-').reduce(function (str, word) {\n    return str + word[0].toUpperCase() + word.slice(1);\n  });\n}\n/**\n * Split the short and long flag out of something like '-m,--mixed <value>'\n *\n * @api private\n */\n\n\nfunction splitOptionFlags(flags) {\n  var shortFlag;\n  var longFlag; // Use original very loose parsing to maintain backwards compatibility for now,\n  // which allowed for example unintended `-sw, --short-word` [sic].\n\n  var flagParts = flags.split(/[ |,]+/);\n  if (flagParts.length > 1 && !/^[[<]/.test(flagParts[1])) shortFlag = flagParts.shift();\n  longFlag = flagParts.shift(); // Add support for lone short flag without significantly changing parsing!\n\n  if (!shortFlag && /^-[^-]$/.test(longFlag)) {\n    shortFlag = longFlag;\n    longFlag = undefined;\n  }\n\n  return {\n    shortFlag: shortFlag,\n    longFlag: longFlag\n  };\n}\n\nexports.Option = Option;\nexports.splitOptionFlags = splitOptionFlags;\n\n//# sourceURL=webpack://lai-cmd/./node_modules/commander/lib/option.js?");

/***/ }),

/***/ "./node_modules/commander/lib/suggestSimilar.js":
/*!******************************************************!*\
  !*** ./node_modules/commander/lib/suggestSimilar.js ***!
  \******************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("var maxDistance = 3;\n\nfunction editDistance(a, b) {\n  // https://en.wikipedia.org/wiki/Damerau–Levenshtein_distance\n  // Calculating optimal string alignment distance, no substring is edited more than once.\n  // (Simple implementation.)\n  // Quick early exit, return worst case.\n  if (Math.abs(a.length - b.length) > maxDistance) return Math.max(a.length, b.length); // distance between prefix substrings of a and b\n\n  var d = []; // pure deletions turn a into empty string\n\n  for (var i = 0; i <= a.length; i++) {\n    d[i] = [i];\n  } // pure insertions turn empty string into b\n\n\n  for (var j = 0; j <= b.length; j++) {\n    d[0][j] = j;\n  } // fill matrix\n\n\n  for (var _j = 1; _j <= b.length; _j++) {\n    for (var _i = 1; _i <= a.length; _i++) {\n      var cost = 1;\n\n      if (a[_i - 1] === b[_j - 1]) {\n        cost = 0;\n      } else {\n        cost = 1;\n      }\n\n      d[_i][_j] = Math.min(d[_i - 1][_j] + 1, // deletion\n      d[_i][_j - 1] + 1, // insertion\n      d[_i - 1][_j - 1] + cost // substitution\n      ); // transposition\n\n      if (_i > 1 && _j > 1 && a[_i - 1] === b[_j - 2] && a[_i - 2] === b[_j - 1]) {\n        d[_i][_j] = Math.min(d[_i][_j], d[_i - 2][_j - 2] + 1);\n      }\n    }\n  }\n\n  return d[a.length][b.length];\n}\n/**\n * Find close matches, restricted to same number of edits.\n *\n * @param {string} word\n * @param {string[]} candidates\n * @returns {string}\n */\n\n\nfunction suggestSimilar(word, candidates) {\n  if (!candidates || candidates.length === 0) return ''; // remove possible duplicates\n\n  candidates = Array.from(new Set(candidates));\n  var searchingOptions = word.startsWith('--');\n\n  if (searchingOptions) {\n    word = word.slice(2);\n    candidates = candidates.map(function (candidate) {\n      return candidate.slice(2);\n    });\n  }\n\n  var similar = [];\n  var bestDistance = maxDistance;\n  var minSimilarity = 0.4;\n  candidates.forEach(function (candidate) {\n    if (candidate.length <= 1) return; // no one character guesses\n\n    var distance = editDistance(word, candidate);\n    var length = Math.max(word.length, candidate.length);\n    var similarity = (length - distance) / length;\n\n    if (similarity > minSimilarity) {\n      if (distance < bestDistance) {\n        // better edit distance, throw away previous worse matches\n        bestDistance = distance;\n        similar = [candidate];\n      } else if (distance === bestDistance) {\n        similar.push(candidate);\n      }\n    }\n  });\n  similar.sort(function (a, b) {\n    return a.localeCompare(b);\n  });\n\n  if (searchingOptions) {\n    similar = similar.map(function (candidate) {\n      return \"--\".concat(candidate);\n    });\n  }\n\n  if (similar.length > 1) {\n    return \"\\n(Did you mean one of \".concat(similar.join(', '), \"?)\");\n  }\n\n  if (similar.length === 1) {\n    return \"\\n(Did you mean \".concat(similar[0], \"?)\");\n  }\n\n  return '';\n}\n\nexports.suggestSimilar = suggestSimilar;\n\n//# sourceURL=webpack://lai-cmd/./node_modules/commander/lib/suggestSimilar.js?");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		var cachedModule = __webpack_module_cache__[moduleId];
/******/ 		if (cachedModule !== undefined) {
/******/ 			return cachedModule.exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			id: moduleId,
/******/ 			loaded: false,
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		__webpack_modules__[moduleId](module, module.exports, __webpack_require__);
/******/ 	
/******/ 		// Flag the module as loaded
/******/ 		module.loaded = true;
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/define property getters */
/******/ 	(() => {
/******/ 		// define getter functions for harmony exports
/******/ 		__webpack_require__.d = (exports, definition) => {
/******/ 			for(var key in definition) {
/******/ 				if(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {
/******/ 					Object.defineProperty(exports, key, { enumerable: true, get: definition[key] });
/******/ 				}
/******/ 			}
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/hasOwnProperty shorthand */
/******/ 	(() => {
/******/ 		__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/make namespace object */
/******/ 	(() => {
/******/ 		// define __esModule on exports
/******/ 		__webpack_require__.r = (exports) => {
/******/ 			if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 				Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 			}
/******/ 			Object.defineProperty(exports, '__esModule', { value: true });
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/node module decorator */
/******/ 	(() => {
/******/ 		__webpack_require__.nmd = (module) => {
/******/ 			module.paths = [];
/******/ 			if (!module.children) module.children = [];
/******/ 			return module;
/******/ 		};
/******/ 	})();
/******/ 	
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module is referenced by other modules so it can't be inlined
/******/ 	var __webpack_exports__ = __webpack_require__("./src/index.js");
/******/ 	
/******/ 	return __webpack_exports__;
/******/ })()
;
});